*$FROM Library
$EXTERN Open-Auto, Close;

$INCLUDE "LibraryEx";

*$FROM DisplayName
$EXTERN DisplayName;

*$FROM Escape
$EXTERN EscapeString;

*$FROM Log-AST
$EXTERN Log-TextFromAST, Log-FormatIdentFuncMapTableLines, Log-EntryList;


/**
  <Log-Init e.FileName?> == []
*/
$ENTRY Log-Init {
  /* no file name */ = /* do noting */;

  e.LogFileName
    = <Open-Auto "w" e.LogFileName> : s.FileHandle
    = <G_LogFile s.FileHandle> : /* empty */
    = <Log-PutLine 'Compilation starts'>;
}

$SWAP G_LogFile;


/**
  <Log-Final> == []
*/
$ENTRY Log-Final {
  /* empty */
    = <Log-PutLine 'Compilation ends'> : /* empty */
    = <G_LogFile>
    : {
        s.FileHandle = <Close s.FileHandle>;

        /* empty */ = /* do nothing */;
      };
}

LogHandle {
  /* empty */
    = <G_LogFile>
    : {
        s.FileHandle = s.FileHandle <G_LogFile s.FileHandle>;

        /* empty */ = /* empty */;
      };
}


/**
  <Log-PutLine e.Line> == []
*/
$ENTRY Log-PutLine {
  e.Message
    = <LogHandle>
    : {
        /* none */ = /* do nothing */;

        s.FileHandle = <Putout s.FileHandle <Time> ': ' e.Message>;
      };
}


/**
  <Log-PutLine-Lazy s.FnLine> == []
*/
$ENTRY Log-PutLine-Lazy {
  s.FnMessage
    = <LogHandle>
    : {
        /* none */ = /* do nothing */;

        s.FileHandle = <Putout s.FileHandle <Time> ': ' <s.FnMessage>>;
      };
}


/**
  <Log-AST (e.Message) e.AST> == e.AST
*/
$ENTRY Log-AST {
  (e.Message) e.AST
    = <LogHandle>
    : {
        /* none */ = e.AST;

        s.FileHandle
          = <Log-PutLine 'AST of file ' e.Message ':'>
            <Map (&IndentedPutout s.FileHandle) <Log-TextFromAST e.AST>>
            e.AST;
      };
}

IndentedPutout {
  s.FileHandle () = <Putout s.FileHandle>;
  s.FileHandle (e.Line) = <Putout s.FileHandle '  ' e.Line>;
}


/**
  <Log-HighLevelRASL (e.SrcName) e.RASL> == e.RASL
*/
$ENTRY Log-HighLevelRASL {
  (e.SrcName) e.RASL
    = <LogHandle>
    : {
        /* none */ = e.RASL;

        s.FileHandle
          = <Log-PutLine 'HighLevelRASL code of file ' e.SrcName ':'>
            <Map (&PutProgramElement s.FileHandle) e.RASL>
            e.RASL;
      };
}

PutProgramElement {
  s.FileHandle
  (Entries e.Names)
    = <Map (&IndentedPutout s.FileHandle) <Log-EntryList e.Names>>;

  s.FileHandle
  (Function (e.Name) e.Commands)
    = <PutRASLFunction s.FileHandle (e.Name) e.Commands>;

  s.FileHandle
  (CmdNativeFunction (e.Name) t.SrcPos e.Code)
    = <Putout s.FileHandle '  ' <DisplayName e.Name> ' :: native {'>
      <PutCode s.FileHandle t.SrcPos e.Code>
      <Putout s.FileHandle '  }\n'>;

  s.FileHandle
  (CmdMetatable (e.Name) e.Metatable)
    = <Putout s.FileHandle '  ' <DisplayName e.Name> ' :: metatable {'>
      <Map
        {
          ((Symbol Identifier e.Ident) (Symbol Name e.Function))
            = <Putout s.FileHandle '    ' e.Ident ' :: ' e.Function>;
        }
        e.Metatable
      >
      <Putout s.FileHandle '  }\n'>;

  s.FileHandle (CmdEnum e.Name)
    = <Putout s.FileHandle '  ' <DisplayName e.Name> ' :: enum'>;

  s.FileHandle (CmdSwap e.Name)
    = <Putout s.FileHandle '  ' <DisplayName e.Name> ' :: swap'>;

  s.FileHandle (CmdConditionFunc e.Name)
    = <Putout s.FileHandle '  ' <DisplayName e.Name> ' :: condition'>;

  s.FileHandle (CmdDeclaration e.Name)
    = <Putout s.FileHandle '  ' <DisplayName e.Name> ' :: extern'>;

  s.FileHandle (CmdDefineIdent e.Name)
    = <Putout s.FileHandle '$LABEL ' <DisplayName e.Name>>;

  s.FileHandle (CmdEmitNativeCode t.SrcPos e.Code)
    = <Putout s.FileHandle 'Native code:'>
      <PutCode s.FileHandle t.SrcPos e.Code>
      <Putout s.FileHandle>;

  s.FileHandle (Spec (e.Name) e.Pattern)
    = <Putout s.FileHandle '$SPEC ' <DisplayName e.Name>>
      <PutRASLCommands s.FileHandle ('  ') e.Pattern>
}

PutRASLFunction {
  s.FileHandle (e.Name) e.Commands
    = <Putout s.FileHandle '  ' <DisplayName e.Name> ' {'>
      <PutRASLCommands s.FileHandle ('    ') e.Commands>
      <Putout s.FileHandle '  }\n'>;
}

PutRASLCommands {
  s.FileHandle (e.Indent) e.Commands
    = <Map
        {
          (CmdSentence e.SubCommands)
            = <Putout s.FileHandle e.Indent '(CmdSentence'>
              <PutRASLCommands s.FileHandle (e.Indent '  ') e.SubCommands>
              <Putout s.FileHandle e.Indent ')  // CmdSentence'>;

          (CmdOpenELoop AlgLeft s.BracketNum s.VarNumber e.SubCommands)
            = <Putout
                 s.FileHandle e.Indent '(CmdOpenELoop'
                ' e.' <Symb s.VarNumber>
                ' <- [' <Symb s.BracketNum> ']'
              >
              <PutRASLCommands s.FileHandle (e.Indent '  ') e.SubCommands>
              <Putout s.FileHandle e.Indent ')  // CmdOpenELoop'>;

          (CmdComment s.FnMessage)
            = <Putout s.FileHandle e.Indent '// ' <s.FnMessage>>;

          /* TODO: pretty print */
          (s.Command e.Args)
            = <Putout s.FileHandle e.Indent '(' s.Command e.Args ')'>;
        }
        e.Commands
      >;
}

PutCode {
  s.FileHandle t.SrcPos e.Code
    = <Putout s.FileHandle '  ' <SrcPos t.SrcPos>>
      <Putout s.FileHandle '    ======================================'>
      <Map
        {
          (e.Line) = <Putout s.FileHandle '    | ' e.Line>;
        }
        e.Code
      >
      <Putout s.FileHandle '    ======================================'>;
}

SrcPos {
  s.LineNumber = '#line ' <Symb s.LineNumber>;

  (FileLine s.Line e.FileName)
    = '#line ' <Symb s.Line> ' "' <EscapeString e.FileName> '"';

  (RowCol s.Row s.Col) = '#line ' <Symb s.Row> ':' <Symb s.Col>;

  (FileRowCol (s.Row s.Col) e.FileName)
    = '#line ' <Symb s.Row> ':' <Symb s.Col>
      ' "' <EscapeString e.FileName> '"';
}
