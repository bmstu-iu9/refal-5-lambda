$INCLUDE "LibraryEx";

*$FROM HighLevelRASL-DisjointFunc
$EXTERN HighLevelRASL-Function-Disjoint;

*$FROM HighLevelRASL-ConjointFunc
$EXTERN HighLevelRASL-Function-Conjoint;

*$FROM HighLevelRASL-GenSubst-Simple
$EXTERN GenSubst-Simple;

*$FROM HighLevelRASL-GenResult-Simple
$EXTERN GenResult-Simple;

*$FROM HighLevelRASL-GenSubst-Save
$EXTERN GenSubst-Save;

*$FROM HighLevelRASL-GenResult-Opt
$EXTERN GenResult-Opt;

/**
  <HighLevelRASL s.Joint s.OptResult e.AST>
    == e.RASLAST

  e.RASLAST ::= t.RASLFunction*
  t.RASLFunction ::=
      (Function (e.Name) t.HiRASLCommand*)
    | (CmdNativeFunction (e.Name) t.SrcPos e.Code)
    | (s.SingularItem e.Name)
    | (CmdDefineIdent e.Name)
    | (CmdEmitNativeCode t.SrcPos e.Code)
  s.SingularItem ::= CmdEnum | CmdSwap | CmdDeclaration
  t.HiRASLCommand ::=
      (Cmd… e.Value)
    | (CmdSentence t.HiRASLCommand*)
    | (CmdOpenELoop AlgLeft s.BracketNum s.VarNumber t.HiRASLCommand*)
*/
$ENTRY HighLevelRASL {
  s.Joint s.OptResult e.ProgramElements
    = <Map
        {
          (Entries e.Names) = (Entries e.Names);

          (Function (e.Name) Sentences e.Sentences)
            = <HighLevelRASL-Function
                s.Joint s.OptResult (e.Name) e.Sentences
              >;

          (Function (e.Name) NativeBody t.SrcPos e.Code)
            = (CmdNativeFunction (e.Name) t.SrcPos e.Code);

          (Function (e.Name) Metatable e.Metatable)
            = (CmdMetatable (e.Name) e.Metatable);

          (Function (e.Name) Swap) = (CmdSwap e.Name);

          (Declaration s.ScopeClass e.Name)
            = (CmdDeclaration s.ScopeClass e.Name);

          (Ident e.Name) = (CmdDefineIdent e.Name);

          (NativeBlock t.SrcPos e.Code) = (CmdEmitNativeCode t.SrcPos e.Code);
        }
        e.ProgramElements
      >;
}

HighLevelRASL-Function {
  s.Joint s.OptResult (e.Name) e.Sentences

    /*
      Исправляем суффиксы функций-условий.

      Имена этим функциям даются в процессе рассахаривания, но оптимизаторы
      уровня дерева функции с условиями могут дублировать. Оптимизатор
      прогонки создаёт функции Func*1, Func*2…, содержащие предложения
      начиная с i-го, оптимизатор специализации создаёт специализированные
      варианты, где вместо статических параметров подставлены актуальные
      значения.

      Поэтому имена условий уже не соответствуют именам тех функций,
      в которых они находятся. Теоретическая проблема здесь: рассогласованность,
      практическая: создаются дубликаты функций и программа не работает.

      TODO: текущая реализация является костылём. Правильнее рассахаривателем
      сохранять для функций-условий только суффиксы, а здесь их объединять
      с актуальным именем.
    */
    = <MapAccum
        {
          (e.CondNames)
          ((e.Pattern) e.Conditions (e.Result))
            = <MapAccum
                {
                  (e.CondNames^)
                  (Condition (e.CondName) (e.Result^) (e.Pattern^))
                    = <FixupName (e.Name) e.CondName> : e.CondName^
                    = (e.CondNames (e.CondName))
                      (Condition (e.CondName) (e.Result) (e.Pattern))
                }
                (/* имена функций условий */)
                e.Conditions
              >
            : (e.SentenceCondNames) e.Conditions^
            = (e.CondNames e.SentenceCondNames)
              ((e.Pattern) e.Conditions (e.Result));
        }
        (/* имена функций условий */)
        e.Sentences
      >
    : (e.CondNames) e.Sentences^

    = <Map
        {
          (e.CondName) = (CmdConditionFunc e.CondName);
        }
        <Unique e.CondNames>
      >
      <HighLevelRASL-Function-Aux
        <GenSentenceFunc s.Joint>
        <GenResultFuncs s.OptResult>
        (e.Name) e.Sentences
      >;
}

FixupName {
  (e.Name SUF e.Suf) e.Name SUF e.CondSuf
    = e.Name SUF <FixupName-Suf (e.Suf) e.CondSuf>;

  (e.Name) e.Name SUF e.CondSuf = e.Name SUF e.CondSuf;
}

FixupName-Suf {
  (s.Tag s.Num e.Suf) s.Tag s.Num e.CondSuf
    = s.Tag s.Num <FixupName-Suf (e.Suf) e.CondSuf>;

  (e.Suf) e.CondSuf = e.Suf e.CondSuf;
}

HighLevelRASL-Function-Aux {
  s.FnGenFunction s.FnGenSubst s.FnGenResult (e.Name) /* нет предложений */
    = (CmdEnum e.Name);

  s.FnGenFunction s.FnGenSubst s.FnGenResult (e.Name) t.OneSentence
    /* Нет смысла вызывать оптимизацию совместного сопоставления с образцом */
    = <HighLevelRASL-Function-Disjoint
        s.FnGenSubst s.FnGenResult (e.Name) t.OneSentence
      >;

  s.FnGenFunction s.FnGenSubst s.FnGenResult (e.Name) e.Sentences
    = <s.FnGenFunction
        s.FnGenSubst s.FnGenResult (e.Name) e.Sentences
      >;
}

GenSentenceFunc {
  Conjoint = &HighLevelRASL-Function-Conjoint;
  Disjoint = &HighLevelRASL-Function-Disjoint;
}

GenResultFuncs {
  NoOpt     = &GenSubst-Simple &GenResult-Simple;
  OptResult = &GenSubst-Save   &GenResult-Opt;
}
