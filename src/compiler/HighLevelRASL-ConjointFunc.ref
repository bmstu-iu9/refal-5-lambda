$INCLUDE "LibraryEx";

*$FROM HighLevelRASL-Common
$EXTERN GenPattern, MakeSavers, GenResult;

*$FROM GenericMatch
$EXTERN GenericMatch;

*$FROM GlobalGen
$EXTERN BuildImage, BuildImage-Term, Generalization, Generalization-Term,
  Collapse, Collapse-Term;


$ENTRY HighLevelRASL-Function-Conjoint {
  s.FnGenSubst s.FnGenResult (e.Name) e.Sentences

    /*
      Функция FindDivisionAndGenerate работает с подстановками,
      поэтому заменяем все образцы на подстановки e.new#0.
    */
    = <Map
        {
          ((e.Pattern) e.Conditions (e.Result))
            = (((e.Pattern ':' ('enew'))) e.Conditions (e.Result));
        }
        e.Sentences
      >
    : e.SentencesWithSubst

    = <GenPattern s.FnGenSubst (e.Name) (Var 'enew')>
    : s.ContextSize (e.Vars) (e.MarkedPattern) e.CommonMatchCommands

    = <FindDivisionAndGenerate
        s.FnGenSubst s.FnGenResult
        (e.MarkedPattern) (e.SentencesWithSubst) s.ContextSize
        1 /* base num */
        0 /* depth */
      >
    : s.MaxContextSize e.ResultCommands

    = e.ResultCommands
    : {
        e.Commands (CmdOpenELoop e.OpenELoop) =
          e.Commands (CmdOpenELoop e.OpenELoop) (CmdFail);
        e.Commands = e.Commands;
      }
    : e.ResultCommands^

    = (Function
        (e.Name)
        (CmdIssueMemory s.MaxContextSize)
        e.CommonMatchCommands
        e.ResultCommands
      );
}

FindDivisionAndGenerate {
  s.FnGenSubst s.FnGenResult
  (e.MarkedPattern) (e.SentencesWithSubst) s.ContextSize s.BaseNum s.Depth

    = <FindDivision e.SentencesWithSubst>
    : {
        ForGroup (e.NewGCG-Subst) (e.FirstGroup) e.SecondGroup
          = <GenerateGroupWithGCGSubst
              s.FnGenSubst s.FnGenResult
              (e.MarkedPattern) (e.FirstGroup)
              s.ContextSize s.BaseNum <Inc s.Depth>
              e.NewGCG-Subst
            >
          : s.FirstPartContext e.FirstPartCommands

          = <FindDivisionAndGenerate
              s.FnGenSubst s.FnGenResult
              (e.MarkedPattern) (e.SecondGroup)
              s.ContextSize s.BaseNum s.Depth
            >
          : s.SecondPartContext e.SecondPartCommands

          = <Max s.FirstPartContext s.SecondPartContext> : s.ContextSize^

          = s.ContextSize
            (CmdSentence e.FirstPartCommands) e.SecondPartCommands;

        ForAllSentences (e.NewGCG-Subst) e.SentencesWithSubst^
          = <GenerateGroupWithGCGSubst
              s.FnGenSubst s.FnGenResult
              (e.MarkedPattern) (e.SentencesWithSubst)
              s.ContextSize s.BaseNum s.Depth
              e.NewGCG-Subst
            >;
      }
}

GenerateGroupWithGCGSubst {
  s.FnGenSubst s.FnGenResult
  (e.MarkedPattern) ((e.SentenceWithSubst)) s.ContextSize s.BaseNum s.Depth
  e.NewGCG-Subst
    = <GenerateSingleSentence
        s.FnGenSubst s.FnGenResult s.ContextSize (e.MarkedPattern)
        s.Depth e.SentenceWithSubst
      >;

  s.FnGenSubst s.FnGenResult
  (e.MarkedPattern) (e.SentencesWithSubst) s.ContextSize s.BaseNum s.Depth
  e.NewGCG-Subst

    = <EnumerateVars-Subst s.BaseNum s.Depth e.NewGCG-Subst>
    : s.BaseNum^ e.NewGCG-Subst^

    = <CodeForSubst
        s.FnGenSubst s.ContextSize (e.MarkedPattern) e.NewGCG-Subst s.Depth
      >
    : s.ContextSize^ (e.Vars) (e.MarkedPattern^) e.GCG-Commands

    = <NarrowSentenceSubstitutions (e.NewGCG-Subst) e.SentencesWithSubst>
    : e.SentencesWithSubst^

    = <FindDivisionAndGenerate
        s.FnGenSubst s.FnGenResult
        (e.MarkedPattern)
        (e.SentencesWithSubst)
        s.ContextSize s.BaseNum s.Depth
      >
    : s.ContextSize^ e.Commands

    = s.ContextSize e.GCG-Commands e.Commands;
}

CodeForSubst {
  s.FnGenSubst s.ContextSize (e.MarkedPattern) e.Substitute s.Depth

    = <ComposeVars (e.MarkedPattern) (e.Substitute)> : e.SubstsAndJunks

    = s.Depth
    : {
        0 = s.ContextSize (/* no savers commands */) e.SubstsAndJunks;
        s.Depth^ = <MakeSavers s.ContextSize e.SubstsAndJunks>;
      }
    : s.ContextSize^ (e.CmdSaves) e.SubstsAndJunks^

    = <s.FnGenSubst
        s.ContextSize e.SubstsAndJunks
        (/* no new vars */) (e.CmdSaves)
      >
}

GenerateSingleSentence {
  s.FnGenSubst s.FnGenResult s.ContextSize (e.MarkedPattern)
  s.Depth (e.Substitute) e.Conditions (e.Result)

    = <CodeForSubst
        s.FnGenSubst s.ContextSize (e.MarkedPattern) e.Substitute s.Depth
      >
    : s.ContextSize^ (e.Vars) (e.MarkedPattern^) e.PatternCommands

    = <GenResult
        s.FnGenResult (e.Conditions) (e.Result)
        s.ContextSize (e.Vars) (e.MarkedPattern) e.PatternCommands
      >
    : (CmdIssueMemory s.Memory) e.Commands

    = s.Memory e.Commands;
}


/* Перебирает переменные в обобщении и заменяет на значения подстановок */
ComposeVars {
  (e.MarkedPattern-B (Var s.Mode e.Name s.Offset) e.MarkedPattern-E)
  (e.Substitute-B ( e.Subst ':' (s.Mode e.Name) ) e.Substitute-E)
    = s.Mode : { 's' = S; 't' = T; 'e' = E; } : s.Mode^
    = (Junk e.MarkedPattern-B) (s.Mode s.Offset e.Subst)
      <ComposeVars
        (e.MarkedPattern-E)
        (e.Substitute-B e.Substitute-E)
      >;

  (e.MarkedPattern) () = (Junk e.MarkedPattern);
}

/* Добавляет уникальные индексы */
EnumerateVarsRec {
  s.NextNumber e.Expr
    = <MapAccum
        {
          s.Next (Var s.Type)
            = <Inc s.Next> (Var s.Type 'new' <Symb s.Next>);

          s.Next (Brackets e.Nested)
            = <EnumerateVarsRec s.Next e.Nested> : s.Next^ e.Nested^
            = s.Next (Brackets e.Nested);

          s.Next (ADT-Brackets (e.Name) e.Nested)
            = <EnumerateVarsRec s.Next e.Nested> : s.Next^ e.Nested^
            = s.Next (ADT-Brackets (e.Name) e.Nested);

          s.Next t.OtherTerm = s.Next t.OtherTerm;
        }
        s.NextNumber e.Expr
      >;
}

EnumerateVars-Subst {
  s.StartNumber s.Depth e.Substitute
    = <MapAccum
        {
          s.NextNumber (e.Value ':' (e.Var))
            = <EnumerateVarsRec s.NextNumber e.Value> : s.NextNumber^ e.Value^
            = s.NextNumber (e.Value ':' (e.Var))
        }
        s.StartNumber e.Substitute
      >;
}


/*
  <FindDivision e.SentencesWithSubst>
    == ForGroup (e.NewGCG-Subst) (e.FirstGroup) e.SecondGroup
    == ForAllSentences (e.NewGCG-Subst) e.SentencesWithSubst^

  Функция пытается найти префикс из предложений с нетривиальным ГСО.
  Если префикс охватывает все предложения (суффикс пустой), то она просто
  возвращает подстановку нетривиального ГСО.
*/
FindDivision {
  (e.FirstSentence) e.Sentences
    , e.FirstSentence : (e.FirstSubst) e.FirstConditions (e.FirstResult)
    = <ImagedSentence e.FirstSentence> : (e.FirstImage) e.FirstSentence^
    = <MakeTrivialSubstImage e.FirstImage> : e.TrivialGCG
    = <DoFindDivision
        <MAX-GROUP-LEN>
        (e.TrivialGCG) (e.FirstImage) ((e.FirstSentence)) e.Sentences
      >;
}

MAX-GROUP-LEN { = 50 }

ImagedSentence {
  (e.Subst) e.Conditions (e.Result)
    = <Subst-BuildImage e.Subst> : e.SubstImage
    = (e.SubstImage) (e.Subst) e.Conditions (e.Result);
}

MakeTrivialSubstImage {
  e.SubstImage
    = <Map
        {
          (t.Image ':' ('e' e.Index))
            = ((MN ':' 0 ',' () ',' ()) ':' ('e' e.Index));

          (t.Image ':' (s.ST e.Index)) = ((Var s.ST) ':' (s.ST e.Index));
        }
        e.SubstImage
      >;
}

/*
  <DoFindDivision
    s.Counter (e.TrivialGCG) t.Image (e.FirstGroup) e.RestSentences
  >

  Функция накапливает в e.FirstGroup подстановки до тех пор, пока их ГСО
  будет отличаться от тривиального, либо пока длина группы не превысит предел.

  Причина ограничения длины на группы — для функций с похожими образцами
  из огромного количества предложений может сгенерироваться команда перехода
  на расстояние больше допустимого. Чтобы этого избежать, вводим принудительную
  группировку на меньшие куски. Функции огромного количества предложений могут
  получиться в результате необузданной прогонки.
*/
DoFindDivision {
  s.Counter (e.TrivialGCG) (e.Image) (e.FirstGroup)
    = ForAllSentences (<Subst-Collapse e.Image>) e.FirstGroup;

  0 (e.TrivialGCG) (e.Image) (e.FirstGroup) e.SecondGroup
    = ForGroup (<Subst-Collapse e.Image>) (e.FirstGroup) e.SecondGroup;

  s.Counter (e.TrivialGCG) (e.Image) (e.FirstGroup) (e.NextSentence) e.Sentences
    = <ImagedSentence e.NextSentence> : (e.NextImage) e.NextSentence^
    = <Subst-Generalization (e.Image) (e.NextImage)> : e.NewImage
    = e.NewImage
    : {
        e.TrivialGCG
          = ForGroup
            (<Subst-Collapse e.Image>)
            (e.FirstGroup) (e.NextSentence) e.Sentences;

        e.NewImage^
          = <DoFindDivision
              <Dec s.Counter>
              (e.TrivialGCG) (e.NewImage) (e.FirstGroup (e.NextSentence))
              e.Sentences
            >;
      };
}


NarrowSentenceSubstitutions {
  (e.NewGCG-Subst) e.Sentences
    = <Map
        {
          ((e.Substs) e.Conditions (e.Result))
            = (
                (<NarrowSubst (e.NewGCG-Subst) (e.Substs)>)
                e.Conditions
                (e.Result)
              );
        }
        e.Sentences
      >;
}

NarrowSubst {
  (e.GCG-Substs-B (e.GCG ':' (e.Var)) e.GCG-Substs-E)
  ((e.Pattern ':' (e.Var)) e.SentenceSubsts)
    = <GenericMatch (e.Pattern) (e.GCG)> : Clear e.NarrowSubsts
    = e.NarrowSubsts
      <NarrowSubst (e.GCG-Substs-B e.GCG-Substs-E) (e.SentenceSubsts)>;

  () () = /* пусто */;
}


Subst-BuildImage {
  e.Substitution
    = <Map
        {
          (e.Value ':' ('e' e.Index))
            = (<BuildImage e.Value> ':' ('e' e.Index));
          (t.Value ':' (s.ST e.Index))
            = (<BuildImage-Term t.Value> ':' (s.ST e.Index));
        }
        e.Substitution
      >;
}

Subst-Generalization {
  ((t.Image1 ':' ('e' e.Index)) e.Images1)
  ((t.Image2 ':' ('e' e.Index)) e.Images2)
    = (<Generalization t.Image1 t.Image2> ':' ('e' e.Index))
      <Subst-Generalization (e.Images1) (e.Images2)>;

  ((t.Image1 ':' ('t' e.Index)) e.Images1)
  ((t.Image2 ':' ('t' e.Index)) e.Images2)
    = (<Generalization-Term t.Image1 t.Image2> ':' ('t' e.Index))
      <Subst-Generalization (e.Images1) (e.Images2)>;

  /* Они оба — или одинаковый символ, или безымянная s-переменная */
  ((t.Image ':' ('s' e.Index)) e.Images1)
  ((t.Image ':' ('s' e.Index)) e.Images2)
    = (t.Image ':' ('s' e.Index))
      <Subst-Generalization (e.Images1) (e.Images2)>;

  /* Разные символы или символ vs s-переменная — обобщаем */
  ((t.Image1 ':' ('s' e.Index)) e.Images1)
  ((t.Image2 ':' ('s' e.Index)) e.Images2)
    = ((Var 's') ':' ('s' e.Index))
      <Subst-Generalization (e.Images1) (e.Images2)>;

  (/* пусто */) (/* пусто */) = /* пусто */;
}

Subst-Collapse {
  e.Substitution
    = <Map
        {
          (t.Image ':' ('e' e.Index)) = (<Collapse t.Image> ':' ('e' e.Index));
          (t.Image ':' ('t' e.Index)) = (<Collapse-Term t.Image> ':' ('t' e.Index));
          (t.Image ':' ('s' e.Index)) = (t.Image ':' ('s' e.Index));
        }
        e.Substitution
      >;
}
