$INCLUDE "LibraryEx";

*$FROM DisplayName
$EXTERN DisplayCName, CName;

*$FROM Escape
$EXTERN EscapeChar, EscapeString;


$ENTRY GenProgram-Native {
  (e.SourceFileName) (e.TargetFileName) (e.NativeRASL)

    = <MapAccum
        &GenCommand-Native
        (/* отступ */)
        e.NativeRASL
      >
    : (/* отступ должен остаться тем же */) e.Generated

    = ('// This file automatically generated from \'' e.SourceFileName '\'')
      ('// Don\'t edit! Edit \'' e.SourceFileName '\' and recompile it')
      ()
      ('#include "refalrts.h"')
      ()
      e.Generated
      ()
      ('//End of file')
    : {
        e.Lines-B (NativeInsertBegin t.SrcPos) e.Lines-E =
          <SetLineNumbers
            (e.SourceFileName) (e.TargetFileName) 1
            e.Lines-B (NativeInsertBegin t.SrcPos) e.Lines-E
          >;

        e.Lines = e.Lines;
      };
}

SetLineNumbers {
  /* Оставляем на всякий случай для совместимости */
  (e.Source) (e.Target) s.LineNum (NativeInsertBegin s.SrcLineNum) e.Lines =
    ('#line ' <Symb s.SrcLineNum> ' ' '"' <EscapeString e.Source> '"')
    <SetLineNumbers
      (e.Source) (e.Target) <Inc s.LineNum> e.Lines
    >;

  (e.Source) (e.Target) s.LineNum
  (NativeInsertBegin (FileLine s.Line e.File)) e.Lines =
    ('#line ' <Symb s.Line> ' ' '"' <EscapeString e.File> '"')
    <SetLineNumbers
      (e.Source) (e.Target) <Inc s.LineNum> e.Lines
    >;

  (e.Source) (e.Target) s.LineNum
  (NativeInsertBegin (FileRowCol (s.Line s.Col) e.File)) e.Lines =
    ('#line ' <Symb s.Line> ' ' '"' <EscapeString e.File> '"')
    <SetLineNumbers
      (e.Source) (e.Target) <Inc s.LineNum> e.Lines
    >;

  (e.Source) (e.Target) s.LineNum (NativeInsertEnd) e.Lines =
    ('#line ' <Symb <Inc s.LineNum>> ' ' '"' <EscapeString e.Target> '"')
    <SetLineNumbers
      (e.Source) (e.Target) <Inc s.LineNum> e.Lines
    >;

  (e.Source) (e.Target) s.LineNum (e.OtherLine) e.Lines =
    (e.OtherLine)
    <SetLineNumbers
      (e.Source) (e.Target) <Inc s.LineNum> e.Lines
    >;

  (e.Source) (e.Target) s.LineNum /* кончились строки */ =
    /* пусто */;
}

ContextRange-B {
  s.RangeOffset = 'context[' <Symb s.RangeOffset> ']';
}

ContextRange-E {
  s.RangeOffset = 'context[' <Symb <Inc s.RangeOffset>> ']';
}

ContextRange {
  s.RangeOffset =
    <ContextRange-B s.RangeOffset> ', ' <ContextRange-E s.RangeOffset>;
}

ContextItem {
  s.ItemNumber = 'context[' <Symb s.ItemNumber> ']';
}

PrintBracketsVarInit {
  e.Indent s.InnerBrackets =
    (e.Indent <ContextRange-B s.InnerBrackets> ' = 0;')
    (e.Indent <ContextRange-E s.InnerBrackets> ' = 0;')
    ;
}

FunctionImage {
  e.Name = 'functions[efunc_' <CName e.Name> ']';
}

IdentifierImage {
  e.Name = 'identifiers[ident_' <CName e.Name> ']';
}

BaseCName {
  e.Name Hash s.Cookie1 s.Cookie2 = <CName e.Name>;
  e.Name = <CName e.Name>;
}

NameAndCookies {
  e.Name Hash 0 0 = '"' <DisplayCName e.Name> '", 0U, 0U';

  e.Name Hash s.Cookie1 s.Cookie2 =
    '"' <DisplayCName e.Name> '", COOKIE1_, COOKIE2_';
}

GenCommand-Native {
  /* -------------------------------------------------------------------------*/
  /* Создания глобальных объектов, общие команды */

  (e.Indent) (CmdComment s.FnText) = (e.Indent) (e.Indent '//' <s.FnText>);

  (e.Indent) (CmdCEnum-Start e.Prefix)
    = (e.Indent) () (e.Indent 'enum ' e.Prefix ' {');

  (e.Indent) (CmdCEnum-End) = (e.Indent) (e.Indent '};') ();

  (e.Indent) (CmdCEnum-Item (e.Prefix) e.Name s.Id)
     = (e.Indent)
       (e.Indent '  ' e.Prefix '_' <CName e.Name> ' = ' <Symb s.Id> ',');

  /* -------------------------------------------------------------------------*/
  /* Команды режима прямой кодогенерации */
  /* Создание глобальных объектов, общие команды */

  (e.Indent) (CmdCookieNS s.Cookie1 s.Cookie2)
    = (e.Indent)
      ('#define cookie_ns cookie_ns_' <Symb s.Cookie1> '_' <Symb s.Cookie2>)
      ('#define COOKIE1_ ' <Symb s.Cookie1> 'U')
      ('#define COOKIE2_ ' <Symb s.Cookie2> 'U');

  (e.Indent) (CmdNativeFuncDescr e.Name) =
    (e.Indent)
    ()
    (
      'static refalrts::NativeReference nat_ref_' <BaseCName e.Name> '('
      <NameAndCookies e.Name> ', func_' <BaseCName e.Name>
      ');'
    )
    ();

  (e.Indent) (CmdFnStart e.Name) =
    (e.Indent '  ')
    ()
    (
      'static refalrts::FnResult func_' <BaseCName e.Name>
      '(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end)'
      ' {'
    )
    ('  (void) vm;');

  (e.Indent '  ') (CmdFnEnd) =
    (e.Indent)
    ('}');

  (e.Indent) (CmdEmitNativeCode t.SrcPos e.Code) =
    (e.Indent)
    (NativeInsertBegin t.SrcPos)
    e.Code
    (NativeInsertEnd);

  (e.Indent) (CmdCallCondition) =
    (e.Indent)
    (e.Indent
      'refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);'
    )
    (e.Indent
      'if (rec_res != refalrts::cSuccess)'
    )
    (e.Indent '  return rec_res;');

  (e.Indent) (CmdProfileFunction) =
    (e.Indent)
    (e.Indent 'refalrts::this_is_generated_function(vm);');

  (e.Indent) (CmdLoadConstants)
    = (e.Indent)
      ('  refalrts::RefalFunction **functions;')
      ('  const refalrts::RefalIdentifier *identifiers;')
      ('  refalrts::load_constants(arg_begin, &functions, &identifiers);');

  (e.Indent) (CmdIssueMemory s.Number) =
    (e.Indent)
    (e.Indent '// issue here memory for vars with ' <Symb s.Number> ' elems')
    (e.Indent 'refalrts::Iter context[' <Symb s.Number> '];')
    (e.Indent 'refalrts::zeros( context, ' <Symb s.Number> ' );')
    ;

  (e.Indent) (CmdStartSentence) =
    (e.Indent '  ')
    (e.Indent 'do {');

  (e.Indent '  ') (CmdEndSentence) =
    (e.Indent)
    (e.Indent '} while ( 0 );')
    (e.Indent 'refalrts::stop_sentence(vm);')
    ();

  (e.Indent) (CmdInitB0) =
    (e.Indent)
    (e.Indent <ContextRange-B 0> ' = arg_begin;')
    (e.Indent <ContextRange-E 0> ' = arg_end;')
    (e.Indent 'refalrts::move_left( ' <ContextRange 0> ' );')
    (e.Indent 'refalrts::move_left( ' <ContextRange 0> ' );')
    (e.Indent 'refalrts::move_right( ' <ContextRange 0> ' );')
    ;

  (e.Indent) (CmdInitB0-Lite) =
    (e.Indent)
    (e.Indent <ContextRange-B 0> ' = arg_begin;')
    (e.Indent <ContextRange-E 0> ' = arg_end;')
    ;

  /* -------------------------------------------------------------------------*/
  /* Команды сопоставления с образцом (прямая кодогенерация) */

  (e.Indent) (CmdChar s.Direction s.BracketNumber s.Char) =
    (e.Indent)
    <PrintMatchChar (e.Indent) s.Direction s.BracketNumber s.Char>
    ;

  (e.Indent) (CmdCharSave s.Direction s.BracketNumber s.Offset s.Char) =
    (e.Indent)
    <PrintMatchCharSave (e.Indent) s.Offset s.Direction s.BracketNumber s.Char>
    ;

  (e.Indent) (CmdNumber s.Direction s.BracketNumber s.Number) =
    (e.Indent)
    <PrintMatchNumber (e.Indent) s.Direction s.BracketNumber s.Number>
    ;

  (e.Indent) (CmdNumberSave s.Direction s.BracketNumber s.Offset s.Number) =
    (e.Indent)
    <PrintMatchNumberSave (e.Indent) s.Offset s.Direction s.BracketNumber s.Number>
    ;

  (e.Indent) (CmdName s.Direction s.BracketNumber s.Num e.Name) =
    (e.Indent)
    <PrintMatchName (e.Indent) s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (CmdNameSave  s.Direction s.BracketNumber s.Offset s.Num e.Name) =
    (e.Indent)
    <PrintMatchNameSave (e.Indent) s.Offset s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (CmdIdent s.Direction s.BracketNumber s.Num e.Name) =
    (e.Indent)
    <PrintMatchIdent (e.Indent) s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (CmdIdentSave s.Direction s.BracketNumber s.Offset s.Num e.Name) =
    (e.Indent)
    <PrintMatchIdentSave (e.Indent) s.Offset s.Direction s.BracketNumber e.Name>
    ;

  (e.Indent) (CmdBrackets s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchBrackets (e.Indent) s.Direction s.BracketNumber s.InnerBrackets>
    ;

  (e.Indent) (CmdBracketsSave s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchBracketsSave (e.Indent) s.Direction s.BracketNumber s.InnerBrackets>
    ;

  (e.Indent) (CmdADT s.Direction s.BracketNumber s.InnerBrackets s.Num e.Name) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchADT
      (e.Indent) s.Direction s.BracketNumber s.InnerBrackets e.Name
    >
    ;

  (e.Indent)
   (CmdADTSave s.Direction s.BracketNumber s.InnerBrackets s.Num e.Name) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    <PrintMatchADTSave
      (e.Indent) s.Direction s.BracketNumber s.InnerBrackets e.Name
    >
    ;

  (e.Indent) (CmdCallSave s.Direction s.BracketNumber s.InnerBrackets) =
    (e.Indent)
    <PrintBracketsVarInit e.Indent s.InnerBrackets>
    (e.Indent
      <ContextItem <Add 2 s.InnerBrackets> > ' = '
      'refalrts::call_' <StrFromDirection s.Direction>
      '( '
      <ContextRange s.InnerBrackets> ', '
      <ContextRange s.BracketNumber> ' );'
    );

  (e.Indent) (CmdEmpty s.Direction s.BracketNumber) =
    (e.Indent)
    <PrintMatchEmpty (e.Indent) s.BracketNumber>
    ;

  (e.Indent) (CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    <PrintMatchSTVar (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber>;

 (e.Indent) (CmdVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    (e.Indent)
    <PrintMatchSTVarSave
      (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber
    >;

  (e.Indent) (CmdRepeated s.Direction s.BracketNumber s.Mode s.Var s.Sample) =
    (e.Indent)
    <PrintMatchRepeated
      (e.Indent) s.Direction s.BracketNumber s.Mode s.Var s.Sample
    >;

  (e.Indent)
  (CmdRepeatedTVarSave s.Direction s.BracketNumber s.Var s.Sample) =
    (e.Indent)
    <PrintMatchRepeatedTVarSave
      (e.Indent) s.Direction s.BracketNumber s.Var s.Sample
    >;

  (e.Indent)
  (CmdOpenedE-Start AlgLeft s.BracketNumber s.VarNumber) =
    (e.Indent '  ')
    (e.Indent <ContextRange-B s.VarNumber> ' = 0;')
    (e.Indent <ContextRange-E s.VarNumber> ' = 0;')
    (e.Indent 'refalrts::start_e_loop(vm);')
    (e.Indent 'do {')
    ;

  (e.Indent '  ')
  (CmdOpenedE-End AlgLeft s.BracketNumber s.VarNumber) =
    (e.Indent)
    (e.Indent
      '} while ( refalrts::open_evar_advance( '
      <ContextRange s.VarNumber> ', ' <ContextRange s.BracketNumber>
      ' ) );'
    )
    ;

  (e.Indent) (CmdSave s.OldBracketNumber s.NewBracketNumber) =
    (e.Indent)
    (e.Indent
      <ContextRange-B s.NewBracketNumber>
      ' = ' <ContextRange-B s.OldBracketNumber> ';'
    )
    (e.Indent
      <ContextRange-E s.NewBracketNumber>
      ' = ' <ContextRange-E s.OldBracketNumber> ';'
    );

  /* -------------------------------------------------------------------------*/
  /* Команды построения результата (прямая кодогенерация) */

  (e.Indent) (CmdResetAllocator) =
    (e.Indent)
    ()
    (e.Indent 'refalrts::reset_allocator(vm);');

  (e.Indent) (CmdSetRes ARG-BEGIN) =
    (e.Indent)
    (e.Indent 'refalrts::Iter res = arg_begin;');

  (e.Indent) (CmdSetRes s.Offset) =
    (e.Indent)
    (e.Indent 'refalrts::Iter trash_prev = arg_begin->prev;')
    (e.Indent 'refalrts::use(trash_prev);')
    <Fetch
      s.Offset
      {
        RIGHT-EDGE = (e.Indent 'refalrts::Iter res = arg_end->next;');
        s.Offset^ = (e.Indent 'refalrts::Iter res = ' <ContextItem s.Offset> ';');
      }
    >;

  (e.Indent) (CmdCopyVar 'e' s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      'refalrts::copy_evar(vm, ' <ContextRange s.Target> ', '
      <ContextRange s.Sample> ');'
    );

  (e.Indent) (CmdCopyVar s.Mode s.Target s.Sample) =
    (e.Indent)
    (e.Indent
      'refalrts::copy_stvar(vm, ' <ContextItem s.Target> ', '
      <ContextItem s.Sample> ');'
    );

  (e.Indent) (CmdReinitSVar s.Offset s.Sample) =
    (e.Indent)
    (e.Indent
      'refalrts::reinit_svar( '
      <ContextItem s.Offset> ', ' <ContextItem s.Sample>
      ' );'
    );

  (e.Indent) (CmdCreateElem Allocate s.ElemNumber ElString e.String) =
    (e.Indent)
    (e.Indent
      'refalrts::alloc_chars(vm, '
      <ContextItem s.ElemNumber> ', ' <ContextItem <Inc s.ElemNumber>> ', '
      <PrintString e.String> ');'
    );

  (e.Indent) (CmdCreateElem s.CreateMode s.ElemNumber e.ElemInfo) =
    (e.Indent)
    <PrintCreateElem (e.Indent) s.CreateMode s.ElemNumber e.ElemInfo>;

  (e.Indent) (CmdLinkBrackets s.Left s.Right) =
    (e.Indent)
    (e.Indent
      'refalrts::link_brackets( '
      <ContextItem s.Left> ', ' <ContextItem s.Right>
      ' );'
    );

  (e.Indent) (CmdPushStack s.ElemNumber) =
    (e.Indent)
    (e.Indent 'refalrts::push_stack( vm, ' <ContextItem s.ElemNumber> ' );');

  (e.Indent) (CmdWrapClosure s.Offset)
    = (e.Indent)
      (e.Indent 'refalrts::wrap_closure( ' <ContextItem s.Offset> ' );');

  (e.Indent) (CmdInsertElem s.ElemNumber) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_elem( res, ' <ContextItem s.ElemNumber> ' );'
    );

  (e.Indent) (CmdInsertVar 'e' s.Number) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, ' <ContextRange s.Number> ' );'
    );

  (e.Indent) (CmdInsertVar s.Mode s.Number) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_stvar( res, ' <ContextItem s.Number> ' );'
    );

  (e.Indent) (CmdInsertRange s.Number) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, '
      <ContextItem s.Number> ', ' <ContextItem <Inc s.Number>>
      ' );'
    );

  (e.Indent) (CmdInsertTile s.BeginEndOffset s.BeginEndOffset) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_elem( res, ' <ContextItem s.BeginEndOffset> ' );'
    );

  (e.Indent) (CmdInsertTile s.BeginOffset s.EndOffset) =
    (e.Indent)
    (e.Indent
      'res = refalrts::splice_evar( res, '
      <ContextItem s.BeginOffset> ', ' <ContextItem s.EndOffset>
      ' );'
    );

  (e.Indent) (CmdUseRes) =
    (e.Indent)
    (e.Indent 'refalrts::use( res );');

  (e.Indent) (CmdSpliceToFreeList) =
    (e.Indent)
    (e.Indent 'refalrts::splice_to_freelist( vm, arg_begin, arg_end );');

  (e.Indent) (CmdSpliceToFreeList-Range s.Left s.Right) =
    (e.Indent)
    (e.Indent
      'refalrts::splice_to_freelist(vm, '
      <ContextItem s.Left> ', ' <ContextItem s.Right> ');'
    );

  (e.Indent) (CmdNextStep) =
    (e.Indent)
    (e.Indent 'return refalrts::cSuccess;');

  (e.Indent) (CmdTrash s.Offset) =
    (e.Indent)
    <Fetch
      s.Offset
      {
        LEFT-EDGE =
          (e.Indent
            'refalrts::splice_to_freelist_open( vm, trash_prev, res );'
          );

        s.Offset^ =
          (e.Indent
            'refalrts::splice_to_freelist_open( vm, '
            <ContextItem s.Offset> ', res );'
          );
      }
    >;

  (e.Indent) (CmdFail) =
    (e.Indent)
    (e.Indent <BreakerFromIndent e.Indent>);
}

PrintString {
  e.String = '"' <EscapeString e.String> '", ' <PrintLength e.String>;
}

PrintLength {
  e.String = <DoPrintLength 0 e.String>;
}

DoPrintLength {
  s.Length s.Char e.Tail = <DoPrintLength <Inc s.Length> e.Tail>;

  s.Length = <Symb s.Length>;
}

PrintMatchChar {
  (e.Indent) s.Direction s.BracketNumber s.Char =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('char') '\'' <EscapeChar s.Char> '\''
    >;
}

PrintMatchCharSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber s.Char =
    <PrintMatchSave
      (e.Indent) s.Offset s.Direction s.BracketNumber
      ('char') '\'' <EscapeChar s.Char> '\''
    >;
}

PrintMatchNumber {
  (e.Indent) s.Direction s.BracketNumber s.Number =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('number') <Symb s.Number> 'UL'
    >;
}

PrintMatchNumberSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber s.Number =
    <PrintMatchSave
      (e.Indent) s.Offset s.Direction s.BracketNumber
      ('number') <Symb s.Number> 'UL'
    >;
}

PrintMatchName {
  (e.Indent) s.Direction s.BracketNumber e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('function') <FunctionImage e.Name>
    >;
}

PrintMatchNameSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber e.Name =
    <PrintMatchSave
      (e.Indent) s.Offset s.Direction s.BracketNumber
      ('function') <FunctionImage e.Name>
    >;
}

PrintMatchIdent {
  (e.Indent) s.Direction s.BracketNumber e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('ident') <IdentifierImage e.Name>
    >;
}

PrintMatchIdentSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber e.Name =
    <PrintMatchSave
      (e.Indent) s.Offset s.Direction s.BracketNumber
      ('ident') <IdentifierImage e.Name>
    >;
}

PrintMatchBrackets {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('brackets')
      <ContextRange s.InnerNum>
    >;
}

PrintMatchBracketsSave {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum =
    <PrintMatchSave
      (e.Indent) <Add 2 s.InnerNum> s.Direction s.BracketNumber
      ('brackets')
      <ContextRange s.InnerNum>
    >
    (
      e.Indent
      'refalrts::bracket_pointers('
      <ContextItem <Add s.InnerNum 2> > ', '
      <ContextItem <Add s.InnerNum 3> >
      ');'
    );
}

PrintMatchADT {
  (e.Indent) s.Direction s.BracketNumber s.InnerNum e.Name =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      ('adt')
      <ContextRange s.InnerNum> ', ' <FunctionImage e.Name>
    >;
}

PrintMatchADTSave {
  (e.Indent) AlgTerm s.Offset s.InnerNum e.Name =
    (e.Indent
      <ContextItem <Add s.InnerNum 2>> ' = '
      'refalrts::adt_term('
      <ContextRange s.InnerNum> ', '
      <FunctionImage e.Name> ', '
      <ContextItem s.Offset> ');'
    )
    (e.Indent 'if( ! ' <ContextItem <Add s.InnerNum 2>> ' )')
    (e.Indent '  ' <BreakerFromIndent e.Indent>);

  (e.Indent) s.Direction s.BracketNumber s.InnerNum e.Name =
    <PrintMatchSave
      (e.Indent) <Add 2 s.InnerNum> s.Direction s.BracketNumber
      ('adt')
      <ContextRange s.InnerNum> ', '
      <FunctionImage e.Name>
    >
    (
      e.Indent
      'refalrts::adt_pointers('
      <ContextItem <Add s.InnerNum 2> > ', '
      <ContextItem <Add s.InnerNum 3> > ', '
      <ContextItem <Add s.InnerNum 4> >
      ');'
    );
}

BreakerFromIndent {
  '  ' = 'return refalrts::cRecognitionImpossible;';

  e.OtherIndent = 'continue;';
}

PrintMatchEmpty {
  (e.Indent) s.BracketNumber =
    (e.Indent
      'if( ! refalrts::empty_seq( ' <ContextRange s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

StrFromDirection {
  AlgLeft = 'left'; AlgRight = 'right';
}

VarMatchFunction { 's' = 'svar'; 't' = 'tvar'; }

PrintMatchSTVar {
  (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber =
    <PrintMatch
      (e.Indent) s.Direction s.BracketNumber
      (<VarMatchFunction s.Mode>) <ContextItem s.VarNumber>
    >;
}

PrintMatchSTVarSave {
  (e.Indent) s.Direction s.BracketNumber 't' s.VarNumber =
    <PrintMatchSave
      (e.Indent) <Inc s.VarNumber> s.Direction s.BracketNumber
      (<VarMatchFunction 't'>) <ContextItem s.VarNumber>
    >;
}

PrintMatchRepeated {
  (e.Indent) s.Direction s.BracketNumber 'e' s.VarNumber s.SampleNumber =
    <PrintMatch-VM
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_evar')
      <ContextRange s.VarNumber> ', ' <ContextRange s.SampleNumber>
    >;

  (e.Indent) AlgTerm s.BracketNumber s.Mode s.VarNumber s.SampleNumber =
    (e.Indent
      'if( ! refalrts::repeated_stvar_term( vm, ' <ContextItem s.VarNumber>
      ', ' <ContextItem s.SampleNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);

  (e.Indent) s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber =
    <PrintMatch-VM
      (e.Indent) s.Direction s.BracketNumber
      ('repeated_stvar')
      <ContextItem s.VarNumber> ', ' <ContextItem s.SampleNumber>
    >;
}

PrintMatchRepeatedTVarSave {
  (e.Indent) s.Direction s.BracketNumber s.VarNumber s.SampleNumber =
    <PrintMatchSave-VM
      (e.Indent) <Inc s.VarNumber> s.Direction s.BracketNumber
      ('repeated_stvar')
      <ContextItem s.VarNumber> ', ' <ContextItem s.SampleNumber>
    >;
}

PrintMatch {
  (e.Indent) AlgTerm s.Offset (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_term( ' e.TextRep ', '
      <ContextItem s.Offset> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);

  (e.Indent) s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ' <ContextRange s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintMatchSave {
  (e.Indent) s.Offset s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      <ContextItem s.Offset> ' = '
      'refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( ' e.TextRep ', ' <ContextRange s.BracketNumber> ' );'
    )
    (e.Indent 'if( ! ' <ContextItem s.Offset> ' )')
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintMatch-VM {
  (e.Indent) AlgTerm s.Offset (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_term( vm, ' e.TextRep ', '
      <ContextItem s.Offset> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);

  (e.Indent) s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      'if( ! refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( vm, ' e.TextRep ', ' <ContextRange s.BracketNumber> ' ) )'
    )
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintMatchSave-VM {
  (e.Indent) s.Offset s.Direction s.BracketNumber (e.Function) e.TextRep =
    (e.Indent
      <ContextItem s.Offset> ' = '
      'refalrts::' e.Function '_' <StrFromDirection s.Direction>
      '( vm, ' e.TextRep ', ' <ContextRange s.BracketNumber> ' );'
    )
    (e.Indent 'if( ! ' <ContextItem s.Offset> ' )')
    (e.Indent '  ' <BreakerFromIndent e.Indent>);
}

PrintCreateElem {
  (e.Indent) Allocate s.ElemNumber s.ElementType e.Info =
    (e.Indent
      'refalrts::alloc_' <AllocatorFuncName s.ElementType> '(vm, '
      <ContextItem s.ElemNumber> <AllocatorFuncArgument s.ElementType e.Info>
      ');'
    );

  (e.Indent) s.CreateMode s.ElemNumber s.ElementType e.Info =
    (e.Indent
      'refalrts::' <AllocatorMode s.CreateMode> '_'
      <AllocatorFuncName s.ElementType> '('
      <ContextItem s.ElemNumber> <AllocatorFuncArgument s.ElementType e.Info>
      ');'
    );
}

AllocatorMode {
  Reinit = 'reinit';
  Update = 'update';
}

AllocatorFuncName {
  ElChar = 'char';
  ElName = 'name';
  ElNumber = 'number';
  ElIdent = 'ident';

  ElOpenADT = 'open_adt';
  ElCloseADT = 'close_adt';

  ElOpenBracket = 'open_bracket';
  ElCloseBracket = 'close_bracket';

  ElOpenCall = 'open_call';
  ElCloseCall = 'close_call';

  ElClosureHead = 'closure_head';
  ElUnwrappedClosure = 'unwrapped_closure';
}

AllocatorFuncArgument {
  ElChar s.Char = ', \'' <EscapeChar s.Char> '\'';

  ElName s.Num e.Name = ', ' <FunctionImage e.Name>;

  ElNumber s.Number = ', ' <Symb s.Number> 'UL';

  ElIdent s.Num e.Name = ', ' <IdentifierImage e.Name>;

  ElUnwrappedClosure s.HeadOffset = ', ' <ContextItem s.HeadOffset>;

  /* Остальное — без аргументов (скобки и ElClosureHead) */
  s.Other = ;
}
