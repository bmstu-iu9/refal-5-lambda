$INCLUDE "LibraryEx";

*$FROM Log
$EXTERN Log-PutLine, Log-PutLine-Lazy, Log-InlineExpr;

*$FROM DisplayName
$EXTERN DisplayName;

*$FROM TreeUtils
$EXTERN AddSuffix, ExtractVariables-Expr, NewVarName, ExtractVariables,
  ApplyContractions, ApplyAssigns, IsHardExpr;

*$FROM GenericMatch
$EXTERN Solve-Spec, GenericMatch;

*$FROM OptTree-StopRelation
$EXTERN OptTree-CanonizeExpr, OptTree-CheckExprStopRelation;

*$FROM GlobalGen
$EXTERN GlobalGen-NameVariables, GlobalGen;


/**
  <OptTree-Spec-Prepare s.OptSpec e.AST> == e.AST^

  s.OptSpec ::= OptSpec | NoOpt

  В дерево добавляется узел (SpecInfo e.SpecInfo).

  e.SpecInfo ::= (e.SpecFuncNames) e.SpecInfo-Specific
  e.SpecFuncNames ::= (e.FuncName)*
  e.SpecInfo-Specific ::= t.FunctionInfo* (e.Histories)
  t.FunctionInfo ::= ((e.Name) (e.Body) s.NextCounter t.Signature*)
  t.Signature ::= ((e.InstanceName) e.Expression)
  e.InstanceName ::= e.Name
  e.Histories ::= ((e.InstanceName) e.History)*
  e.History ::= ((e.FuncName) e.Expression)*
*/
$ENTRY OptTree-Spec-Prepare {
  NoOpt e.AST = e.AST;

  OptSpec e.AST-B (SpecInfo e.SpecInfo) e.AST-E
    = <Prepare-Aux (e.SpecInfo) e.AST-B e.AST-E>;

  OptSpec e.AST
    = (/* no names */) /* no info */ (/* no histories */) : e.EmptyInfo
    = <Prepare-Aux (e.EmptyInfo) e.AST>;
}

Prepare-Aux {
  ((e.KnownNames) e.KnownInfo (e.KnownHistories)) e.AST
    = e.AST
    : {
        e.AST-B (Specs e.Names) e.AST-E = (e.Names) e.AST-B e.AST-E;
        e.AST^ = (/* пусто */) e.AST;
      }
    : (e.NewNames) e.AST^

    = e.AST
    : {
        e.AST-B (NoSpecs e.Names) e.AST-E
          = (e.Names) e.AST-B (NoSpecs e.Names) e.AST-E;
        e.AST^ = (/* пусто */) e.AST;
      }
    : (e.NoSpecs) e.AST^

    = <Map
        {
          /* Игнорируем новые $SPEC’и для известных и запрещённых функций */
          (e.Name), e.KnownNames : e._B (e.Name) e._E = /* пропускаем */;
          (e.Name), e.NoSpecs : e._B (e.Name) e._E = /* пропускаем */;
          (e.Name) = (e.Name);
        }
        e.NewNames
      >
    : e.NewNames^

    = <Map
        {
          (e.Name) = <Log-PutLine 'New $SPEC function ' <DisplayName e.Name>>
        }
        e.NewNames
      >
    : /* пусто */

    = <MapAccum
        {
          ((e.Names-B (e.Name) e.Names-E) e.Info)
          (Function (e.Name) e.Body)
            = e.Body
            : {
                Sentences /* нет предложений — функцию не специализируем */
                  = ((e.Names-B e.Names-E) e.Info)
                    (Function (e.Name) Sentences /* пусто */);

                Sentences e.Sentences
                  = (
                      (e.Names-B (e.Name) e.Names-E)
                       e.Info ((e.Name) (e.Sentences) 1)
                    )
                    (Function (e.Name) Sentences e.Sentences);

                e.Body^ /* другие типы функций не специализируем */
                  = ((e.Names-B e.Names-E) e.Info)
                    (Function (e.Name) e.Body);
                };

           (e.Info) t.Other = (e.Info) t.Other;
        }
        ((e.NewNames) /* no info */) e.AST
      >
    : ((e.NewNames^) e.NewInfo) e.AST^

    = <Map
        {
          ((e.Name) (e.Body) 1 /* нет сигнатур */)
            = <BottomSignature e.Body> : e.Pattern
            = (<AddSuffix e.Name ('@' 0)>) e.Pattern : e.HistoryRecord
            = ((e.Name) (e.HistoryRecord));
        }
        e.NewInfo
      >
    : e.NewHistories

    = <AddGuardSentences e.NewInfo> : e.NewInfo^
    = <AddGuardEnums e.AST> : e.AST^

    = <CreateRemainderFunctions e.NewInfo> : e.NewInfo^

    = (SpecInfo
        (e.KnownNames e.NewNames)
        e.KnownInfo e.NewInfo
        (e.KnownHistories e.NewHistories)
      )
      e.AST
}

BottomSignature {
  e.Sentences
    = <Map
        {
          ((e.Pattern) e._Tail) = (e.Pattern);
        }
        e.Sentences
      >
    : e.Patterns
    = <GlobalGen e.Patterns> : e.GlobalGen
    = <GlobalGen-NameVariables e.GlobalGen>
}

* Добавляет вызов аварийной функции Func@0 в конец каждой специализируемой
* функции.Этот вызов облегчает отладку при аварийном завершении программы
* в специализированной функции.
AddGuardSentences {
  e.Info
    = <Map
        {
          ((e.Name) (e.Sentences) e.Signatures)
            = <AddSuffix e.Name ('@' 0)> : e.GuardName
            = ((Var 'eARG'))
              ((CallBrackets (Symbol Name e.GuardName) (Var 'eARG')))
            : e.GuardSentence
            = (
                (e.Name)
                (e.Sentences (e.GuardSentence))
                e.Signatures
              )
        }
        e.Info
      >
}

AddGuardEnums {
  e.AST
    = <Map
        {
          (Function (e.Name) e.Body)
            = (Function (e.Name) e.Body) <MakeGuardEnum e.Name>;

          (Externs e.Names)
            = (Externs e.Names)
              <Map { (e.Name) = <MakeGuardEnum e.Name> } e.Names>;

          t.OtherItem = t.OtherItem;
        }
        e.AST
      >
}

GuardEnumName {
  e.Name = <AddSuffix e.Name ('@' 0)>
}

MakeGuardEnum {
  e.Name = (Function (<GuardEnumName e.Name>) Sentences /* пусто */)
}

* Обеспечивает специализацию функций Func*n. Такие функции могут получаться
* при частичной прогонке функций, помеченных как прогоняемые
* и специализированные одновременно. Этот остаток тоже имеет смысл
* специализировать.
CreateRemainderFunctions {
  e.Info = <Map (&CreateRemainderFunctions-OneFunction 0) e.Info>
}

CreateRemainderFunctions-OneFunction {
  s.Count ((e.Name) ((e.GuardSentence)) 1 /* нет сигнатур */)
    = /* пусто */;

  s.Count ((e.Name) (e.Sentences) 1 /* нет сигнатур */)
    = s.Count
    : {
        0 = e.Name;
        s._ = <AddSuffix e.Name ('*' s.Count)>;
      }
    : e.RemainderName
    = ((e.RemainderName) (e.Sentences) 1 /* нет сигнатур */)
      <CreateRemainderFunctions-OneFunction
        <Inc s.Count>
        ((e.Name) (<Drop e.Sentences>) 1 /* нет сигнатур */)
      >;
}

Drop {
  t.First e.Rest = e.Rest
}

/**
  <OptTree-Spec s.OptSpec e.AST> == e.AST^

  s.OptSpec ::= OptSpec | NoOpt
*/
$ENTRY OptTree-Spec {
  NoOpt e.AST = <ColdAll e.AST>;

  OptSpec e.AST-B (SpecInfo (e.Names) e.SpecInfo (e.Histories)) e.AST-E
    = <PrintHistories e.Histories>
      <MapAccum
        &SpecUnit
        (e.SpecInfo (e.Histories) (/* new functions */))
        e.AST-B e.AST-E
      >
    : (e.SpecInfo^ (e.Histories^) (e.NewFunctions)) e.AST
    = (SpecInfo (e.Names) e.SpecInfo (e.Histories)) e.AST e.NewFunctions;
}

ColdAll {
  e.AST
    = <Map
        {
          (Function (e.Name) e.Body)
            = (ColdFunction SPEC (e.Name) e.Body);

          t.OtherItem = t.OtherItem;
        }
        e.AST
      >;
}

PrintHistories {
  e.Histories = <Map &PrintHistory e.Histories>;
}

PrintHistory {
  ((e.Function) e.History)
    = <Log-PutLine-Lazy { = <PrintHistory-Aux (e.Function) e.History> }>
}

PrintHistory-Aux {
  (e.Function) e.History
      = 'History of ' <DisplayName e.Function> '\n'
        <Map
          {
            ((e.FuncName) e.StaticVarsVals)
              = '    ' <DisplayName e.FuncName> ':'
                ' [' <Log-InlineExpr e.StaticVarsVals> ']\n';
          }
          e.History
        >
}

SpecUnit {
  (e.SpecInfo
    (e.Histories-B (t.Name e.History) e.Histories-E) (e.NewFunctions)
  )
  (Function t.Name Sentences e.Sentences)
    = <MapAccum
        &SpecSentence
        (
          e.SpecInfo (e.Histories-B (t.Name e.History) e.Histories-E)
          (e.History) (e.NewFunctions)
        )
        e.Sentences
      >
    : (e.SpecInfo^ (e.Histories) (e.History^) (e.NewFunctions^)) e.Sentences^
    = (e.SpecInfo (e.Histories) (e.NewFunctions))
      (ColdFunction SPEC t.Name Sentences e.Sentences);

  (e.SpecInfo (e.Histories) (e.NewFunctions))
  (Function t.Name Sentences e.Sentences)
    = <MapAccum
        &SpecSentence
        (e.SpecInfo (e.Histories) (/* empty history */) (e.NewFunctions))
        e.Sentences
      >
    : (e.SpecInfo^ (e.Histories^) (e.History) (e.NewFunctions^))
      e.Sentences^
    = (e.SpecInfo (e.Histories) (e.NewFunctions))
      (ColdFunction SPEC t.Name Sentences e.Sentences);

  (e.SpecInfo (e.Histories) (e.NewFunctions)) t.Other
    = (e.SpecInfo (e.Histories) (e.NewFunctions)) t.Other;
}

/**
  <SpecSentence
    (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
    t.Sentence
  >
    == (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^) t.Sentence^

  t.Sentence ::= ((e.Pattern) e.Conditions (e.Result))

  Функция ищет в правой части предложения вызовы специализируемых функций
  и пытается выполнить специализацию для него
*/
SpecSentence {
  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
  ((e.Pattern) e.Conditions (e.Result))
    = <MapAccum
        {
          (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^))
          (Condition (e.Name) (e.ConditionResult) (e.ConditionPattern))
            = <SpecResult
                (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
                e.ConditionResult
              >
            : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^))
              e.ConditionResult^
            = (e.SpecInfo (e.Histories) (e.History)  (e.NewFunctions))
              (Condition (e.Name) (e.ConditionResult) (e.ConditionPattern));
        }
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
        e.Conditions
      >
    : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^)) e.Conditions^
    = <SpecResult
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
        e.Result
      >
    : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^)) e.Result^
    = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
      ((e.Pattern) e.Conditions (e.Result));
}


/**
  <SpecResult
    (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
    e.Results
  >
    == (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^)) e.Result^

  Функция разбирает результирующее выражение, ищет в нем вызовы специализируемых
  функций и замыканий и пытается выполнить специализацию для них
*/
SpecResult {
  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions)) e.Result
    = <MapAccum
        &SpecTerm
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
        e.Result
      >;
}

/**
  <SpecTerm (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions)) t.Term>
    == (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^)) t.Term^

  Функция ищет в терме вызовы специализируемых функций
  и пытается выполнить специализацию для него
*/
SpecTerm {
  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
  (CallBrackets (ClosureBrackets e.ClosureContent) e.Argument)
    = <SpecTerm
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
        (CallBrackets e.ClosureContent e.Argument)
      >;

  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
  (CallBrackets (Symbol Name e.Name) e.Expression)
    , e.Name : e._ '@' 0
    /*
      Аргументы вызовов аварийных функций специализатора специализировать
      нельзя, они должны оставаться неизменными.

      Вместо этого мы все ссылки на функции заменим ссылками на пустые функции —
      это необходимо, чтобы инструмент удаления неиспользуемых функций удалил
      те, по которым программа уже специализировалась.

      Например, для <Map {{ &F\1 … }} …> в аварийном предложении останется
      &F\1, которая сама может тянуть ненужные функции (и занимать собой
      сгенерированный код). Мы заменим её на пустую функцию.
    */
    = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
      (CallBrackets (Symbol Name e.Name) <ReplaceToGuards e.Expression>);

  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
  (CallBrackets (Symbol Name e.Name) e.Expression)
    = <TrySpecCall
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
        (CallBrackets (Symbol Name e.Name) e.Expression)
      >
    : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^))
      (CallBrackets (Symbol Name e.Name^) e.Expression^)  /* SAME */

    = <SpecResult
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions)) e.Expression
      >
    : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^)) e.Expression^

    = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
      (CallBrackets (Symbol Name e.Name) e.Expression);

  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
  (CallBrackets e.Expression)
    = <SpecResult
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions)) e.Expression
      >
    : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^)) e.Expression^

    = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
      (CallBrackets e.Expression);

  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
  (ClosureBrackets e.ClosureContent)
    = <ExtractVariables-Expr e.ClosureContent> : e.UsedVars
    = <NewVarName (e.UsedVars) 'eClosureArg'> : (e._) e.eClosureArg
    = <TrySpecCall
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
        (CallBrackets e.ClosureContent (Var e.eClosureArg))
      >
    : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^))
      (CallBrackets e.ClosureContent^ (Var e.eClosureArgOut))

    /*
      Проверка на то, что e.eClosureArg и e.eClosureArgOut равны. Проверить
      через повторную переменную нельзя, т.к. стоит режим -Werror для
      сборки исходников.
      TODO: исправить при реализации подавления предупреждений.
    */
    = e.eClosureArgOut
    : {
        e.eClosureArg = /* пусто */;
        e._ = <{X = e.eClosureArg e.eClosureArgOut}>
      }
    : /* пусто */

    = e.ClosureContent
    : {
        (Symbol Name e.OptName) /* пусто */
          = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
            (Symbol Name e.OptName);

        e.ClosureContent^
          = <SpecResult
              (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
              e.ClosureContent
            >
          : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^))
            e.ClosureContent^

          = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
            (ClosureBrackets e.ClosureContent);
      };


  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
    (Brackets e.Expression)
    = <SpecResult
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions)) e.Expression
      >
    : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^)) e.Expression^
    = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
      (Brackets e.Expression);

  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
    (ADT-Brackets (e.Name) e.Expression)
    = <SpecResult
        (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions)) e.Expression
      >
    : (e.SpecInfo^ (e.Histories^) (e.History^) (e.NewFunctions^)) e.Expression^
    = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
      (ADT-Brackets (e.Name) e.Expression);

  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions)) t.Other
   = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions)) t.Other;
}

ReplaceToGuards {
  e.Expression
    = <Map
        {
          (s.Brackets e.Nested)
            , Brackets CallBrackets ClosureBrackets : e._ s.Brackets e._
            = (s.Brackets <ReplaceToGuards e.Nested>);

          (ADT-Brackets (e.Name) e.Nested)
            = (ADT-Brackets (e.Name) <ReplaceToGuards e.Nested>);

          /* Уже пустая функция, ничего не делаем с ней */
          (Symbol Name e.Name '@' 0) = (Symbol Name e.Name '@' 0);

*         TODO: это костыль. Нужно понять, в чём проблема и удалить эту затычку.
          (Symbol Name e.Name '@' s._) = (Symbol Name e.Name '@' 0);

          (Symbol Name e.Name) = (Symbol Name <GuardEnumName e.Name>);

          t.Other = t.Other;
        }
        e.Expression
      >
}

TrySpecCall {
  (
    e.SpecInfo-B ((e.Name) e.Info) e.SpecInfo-E
    (e.Histories) (e.History) (e.NewFunctions)
  )
  (CallBrackets (Symbol Name e.Name) e.Expression)
    = <SpecCall (e.Name) e.Info (e.Expression) (e.History)>
    : (e.Info^) t.NewCall e.NewFunction (e.NewHistory)
    = (
        ((e.Name) e.Info) e.SpecInfo-B e.SpecInfo-E
        (e.Histories e.NewHistory)
        (e.History)
        (e.NewFunctions e.NewFunction)
      )
      t.NewCall;

  (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
  (CallBrackets (Symbol Name e.Name) e.Expression)
    = (e.SpecInfo (e.Histories) (e.History) (e.NewFunctions))
      (CallBrackets (Symbol Name e.Name) e.Expression);
}

/**
  <SpecCall
    (e.Name) (e.Body) s.CurrentNumber e.Signatures (e.Argument) (e.History)
  >
    == ((e.Body) s.NextNumber e.Signatures t.NewSignature)
        t.NewCall t.NewFunction (e.NewHistory)

  Функция пытается выполнить специализацию для заданного вызова:
  # ищет среди сигнатур готовых специализированных функций похожую
    * если сигнатура найдена, заменяем исходный вызов на вызов найденной функции
    * если сигнатура не найдена выполняем специализацию для аргументов вызова
      # формируем новый вызов
      # формируем определение новой специализированной функции
  # возвращает e.Info с новой сигнатурой,
    новый вызов
    определение новой специализированной функции
*/

SpecCall {
  /* TODO: убрать этот хак в рамках задачи #332 */
  (e.Name) (e.Body) s.NextNumber e.Signatures
  (e.Argument) (e.History)
    , s.NextNumber : 100
    = ((e.Body) s.NextNumber e.Signatures)
      (CallBrackets (Symbol Name e.Name) e.Argument)
      /* пусто */ (/* пусто */);

  (e.Name) (e.Body) s.NextNumber e.Signatures
  (e.Argument) (e.History)
    = <ExtractVariables ((e.Argument) (/* пусто */))> : e.UsedVars

    = <ExtractCalls-Expr (/* пусто */ (e.UsedVars)) e.Argument>
    : (e.ExtractedCalls (e.UsedVars^)) e.NewArgument

      /* Обобщаем участки аргумента вида e.1 … e.2 */
    = <GenEE e.NewArgument (e.UsedVars) (/* пусто */)>
    : e.NewArgument^ (e.UsedVars^) (e.Sg)

    = e.Sg e.ExtractedCalls : e.Sg^

    = <SpecCall-BuildSignature-True
        (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
        (e.Argument) (e.NewArgument) (e.Sg) (e.History)
      >;
}

/*
  Функция обобщает участки между двумя e-параметрами:
  … e.1 … e.2 …  →  … e.New …, e.1 … e.2 ← e.New
*/
GenEE {
  /* пусто */ (e.UsedVars) (e.Sg) = /* пусто */ (e.UsedVars) (e.Sg);
  (Var 'e' e.Index) (e.UsedVars) (e.Sg) = (Var 'e' e.Index) (e.UsedVars) (e.Sg);

  (Var 'e' e.Left) e.Expr (Var 'e' e.Right) (e.UsedVars) (e.Sg)
    = <NewVarName (e.UsedVars) 'e' e.Left> : (e.UsedVars^) 'e' e.eGen
    = (Var 'e' e.eGen) (e.UsedVars)
      (e.Sg ((Var 'e' e.Left) e.Expr (Var 'e' e.Right) ':' (Var 'e' e.eGen)));

  (s.Brackets e.Nested) e.Expr (e.UsedVars) (e.Sg)
    , Brackets ClosureBrackets : e._ s.Brackets e._
    = <GenEE e.Nested (e.UsedVars) (e.Sg)> : e.Nested^ (e.UsedVars^) (e.Sg^)
    = (s.Brackets e.Nested) <GenEE e.Expr (e.UsedVars) (e.Sg)>;

  (ADT-Brackets (e.Name) e.Nested) e.Expr (e.UsedVars) (e.Sg)
    = <GenEE e.Nested (e.UsedVars) (e.Sg)> : e.Nested^ (e.UsedVars^) (e.Sg^)
    = (ADT-Brackets (e.Name) e.Nested) <GenEE e.Expr (e.UsedVars) (e.Sg)>;

  (Symbol e.Symbol) e.Expr (e.UsedVars) (e.Sg)
    = (Symbol e.Symbol) <GenEE e.Expr (e.UsedVars) (e.Sg)>;

  (Var s.Mode e.Index) e.Expr (e.UsedVars) (e.Sg)
    , 'st' : e._ s.Mode e._
    = (Var s.Mode e.Index) <GenEE e.Expr (e.UsedVars) (e.Sg)>;

  e.Expr (s.Brackets e.Nested) (e.UsedVars) (e.Sg)
    , Brackets ClosureBrackets : e._ s.Brackets e._
    = <GenEE e.Expr (e.UsedVars) (e.Sg)> : e.Expr^ (e.UsedVars^) (e.Sg^)
    = <GenEE e.Nested (e.UsedVars) (e.Sg)> : e.Nested^ (e.UsedVars^) (e.Sg^)
    = e.Expr (s.Brackets e.Nested) (e.UsedVars) (e.Sg);

  e.Expr (ADT-Brackets (e.Name) e.Nested) (e.UsedVars) (e.Sg)
    = <GenEE e.Expr (e.UsedVars) (e.Sg)> : e.Expr^ (e.UsedVars^) (e.Sg^)
    = <GenEE e.Nested (e.UsedVars) (e.Sg)> : e.Nested^ (e.UsedVars^) (e.Sg^)
    = e.Expr (ADT-Brackets (e.Name) e.Nested) (e.UsedVars) (e.Sg);

  e.Expr (Symbol e.Symbol) (e.UsedVars) (e.Sg)
    = <GenEE e.Expr (e.UsedVars) (e.Sg)> : e.Expr^ (e.UsedVars^) (e.Sg^)
    = e.Expr (Symbol e.Symbol) (e.UsedVars) (e.Sg);

  e.Expr (Var s.Mode e.Index) (e.UsedVars) (e.Sg)
    , 'st' : e._ s.Mode e._
    = <GenEE e.Expr (e.UsedVars) (e.Sg)> : e.Expr^ (e.UsedVars^) (e.Sg^)
    = e.Expr (Var s.Mode e.Index) (e.UsedVars) (e.Sg);
}

SpecCall-BuildSignature-True {
  (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
  (e.Argument) (e.NewArgument) (e.Sg) (e.History)

      /* ищем динамическое обобщение для аргумента и образцов */
    = <DynGenArg (e.UsedVars) (e.NewArgument) (e.Sg) e.Body>
    : (e.UsedVars^) (e.NewArgument^) (e.Sg^) (e.Solutions)

    = <SpecCall-CheckSignature-True
        (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
        (e.Argument) (e.NewArgument) (e.Sg) (e.Solutions) (e.History)
      >;
}

DynGenArg {
  (e.UsedVars) (e.Arg) (e.Sg) e.Sentences
    = <DoDynGenArg
        (e.UsedVars) (e.Arg) (e.Sg) (/* solutions */)
        (/* scanned */) e.Sentences
      >;
}

*$NODRIVE DoDynGenArg

DoDynGenArg {
  (e.UsedVars) (e.Arg) (e.Sg) (e.Sol)
  (e.Begin) ((e.Pat) e.Tail) e.Sentences
    = e.UsedVars <ExtractVariables ((e.Arg e.Pat) e.Tail)> : e.UsedVars^
    = <Unique e.UsedVars> : e.UsedVars^
    = <NewVarName (e.UsedVars) 'eNew'> : (e.UsedVars^) e.eNew
    = e.Arg (Brackets (Var e.eNew)) : e.Arg^
    = <WrappedCondVars e.Tail> : e.WrappedCondVars
    = e.Pat (Brackets e.WrappedCondVars) : e.Pat^
    = <Solve-Spec (e.UsedVars) (e.Arg) (e.Pat)>
    : {
        (e.UsedVars^) e.Solutions (/* нет обобщений */) (e.ArgNew)
          = e.ArgNew : e.ArgNew^ (Brackets e._)
          = e.Pat : e.Pat^ (Brackets e._)
          = <DoDynGenArg
              (e.UsedVars) (e.ArgNew) (e.Sg) (e.Sol (e.Solutions))
              (e.Begin ((e.Pat) e.Tail)) e.Sentences
            >;

        (e.UsedVars^) e.Solutions (e.SgNew) (e.ArgNew)
          = e.ArgNew : e.ArgNew^ (Brackets e._)
          = e.Pat : e.Pat^ (Brackets e._)
          = e.SgNew e.Sg : e.Sg^
          = <RemoveAssignByLeftPart ((Var e.eNew)) e.Sg> : e.Sg^
          = <DynGenArg
              (e.UsedVars) (e.ArgNew) (e.Sg)
              e.Begin ((e.Pat) e.Tail) e.Sentences
            >;
      };

  (e.UsedVars) (e.Arg) (e.Sg) (e.Sol) (e.Begin) /* пусто */
    = (e.UsedVars) (e.Arg) (e.Sg) (e.Sol);
}

WrappedCondVars {
  e.Tail
    = <Reduce
        {
          (e.CondVars) (Condition (e.ConditionName) (e.Result) (e.Pattern))
            = (e.CondVars <ExtractVariables-Expr e.Pattern>);

          (e.CondVars) (e.Result)
            = (e.CondVars);
        }
        (/* пусто */)
        e.Tail
      >
    : (e.CondVars)
    = <Unique e.CondVars> : e.CondVars^
    = <Map
        { (s.Mode e.Index) = <WrapVar s.Mode (Var s.Mode e.Index)> }
        e.CondVars
      >
    : e.CondVars^
    = <RemoveLastGhostBracket e.CondVars>;
}

RemoveAssignByLeftPart {
  (e.Left) e.Assigns
    = <Map
        {
          (e.Left ':' t.Var) = /* пусто */;

          t.Assign = t.Assign;
        }
        e.Assigns
      >;
}

SpecCall-CheckSignature-True {
  /* тривиальная сигнатура */
  (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
  (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.History)
    , <IsTrivialSignature e.NewArg (e.Body)> : True
    = ((e.Body) s.NextNumber e.Signatures)
      (CallBrackets (Symbol Name e.Name) e.OldArg)
      /* пусто */ (/* пусто */);

  /* проверяем, известна ли сигнатура */
  (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
  (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.History)
    = <RenameSignatureVars-Expr (/* пусто */ 0) e.NewArg>
    : t._ e.Signature
    = <FindInSignatures (e.Signature) e.Signatures>
    : {
        Found e.InstanceName (e.Signatures^)
          = ((e.Body) s.NextNumber e.Signatures)
            (CallBrackets
              (Symbol Name e.InstanceName)
              <ApplySequentalAssigns <WrapVars e.NewArg> (e.Sg)>
            )
            /* пусто */ (/* пусто */);

        /* проверяем на зацикливание */
        NotFound e.Signatures^
          = <SpecCall-NewSignature-True
              (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
              (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.History)
              (e.Signature)
            >;
      };
}

SpecCall-NewSignature-True {
  (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
  (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.History)
  (e.Signature)
    = <HasStopRelation
        (e.Name) (<OptTree-CanonizeExpr e.Signature>) e.History
      >
    : {
        True (e.History-B) ((e.HistoryName) e.HistorySignature) (e.History-E)
          = <SpecCall-NewSignature-Generalize
              (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
              (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.Signature)
              (e.History-B) ((e.HistoryName) e.HistorySignature) (e.History-E)
            >;

        False
          = <SpecCall-NewSignature-MakeFunction
              (e.Name) (e.Body) s.NextNumber e.Signatures
              (e.NewArg) (e.Sg) (e.Solutions) (e.History) (e.Signature)
            >;
      }
}

SpecCall-NewSignature-Generalize {
  /*
    Зацикливание с тривиальной сигнатурой на дне.
    Обобщение двух сигнатур дало бы тривиальную сигнатуру,
    вызов которой соответствует вызову исходной функции.
  */
  (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
  (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.Signature)
  (e.History-B) ((e.HistoryName '@' 0) e.HistorySignature) (e.History-E)
    = ((e.Body) s.NextNumber e.Signatures)
      (CallBrackets (Symbol Name e.Name) e.OldArg)
      /* пусто */ (/* пусто */);

  /* Простое зацикливание: текущая сигнатура есть частный случай старой. */
  (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
  (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.Signature)
  (e.History-B) ((e.HistoryName) e.HistorySignature) (e.History-E)

    , <GenericMatch (e.NewArg) (e.HistorySignature)> : Clear e.NewSg

    = <Map
        {
          (e.Expr ':' (s.Mode e.Index)) = (e.Expr ':' (Var s.Mode e.Index))
        }
        e.NewSg
      >
    : e.NewSg^

    = ((e.Body) s.NextNumber e.Signatures)
      (CallBrackets
        (Symbol Name e.HistoryName)
        <ApplySequentalAssigns <WrapVars e.HistorySignature> (e.NewSg e.Sg)>
      )
      /* пусто */ (/* пусто */);

  (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
  (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.Signature)
  (e.History-B) ((e.HistoryName) e.HistorySignature) (e.History-E)
      /* Получает обобщённую сигнатуру для двух сигнатур */
      = <GlobalGen (e.Signature) (e.HistorySignature)> : e.GenSignature

      = <NameSignatureVars-Expr (e.UsedVars) e.GenSignature>
      : (e.UsedVars^) e.GenSignature^

      = <GenericMatch (e.NewArg) (e.GenSignature)> : Clear e.NewSg

      = <IsTrivialSubstitutions e.NewSg>
      : {
          /*
            Если подстановка e.NewSg является тривиальной, проверку
            отношения Хигмана-Крускала в рекурсивном вызове не выполняем
          */
          True = &SpecCall-BuildSignature-False;

          False = &SpecCall-BuildSignature-True;
        }
      : s.SpecCall-BuildSignature

      = <Map
          {
            (e.Expr ':' (s.Mode e.Index)) = (e.Expr ':' (Var s.Mode e.Index))
          }
          e.NewSg
        >
      : e.NewSg^

      = <s.SpecCall-BuildSignature
          (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
          (e.OldArg) (e.GenSignature) (e.NewSg e.Sg)
          (e.History-B)
        >;
}

SpecCall-NewSignature-MakeFunction {
  (e.Name) (e.Body) s.NextNumber e.Signatures
  (e.NewArg) (e.Sg) (e.Solutions) (e.History) (e.Signature)
    = <CreateNewSentences (e.NewArg) (/* пусто */) (e.Solutions) (e.Body)>
    : e.NewSentences
    = <AddSuffix e.Name ('@' s.NextNumber)> : e.InstanceName
    = (
        (e.Body) <Inc s.NextNumber>
        e.Signatures ((e.InstanceName) e.Signature)
      )
      (CallBrackets
        (Symbol Name e.InstanceName)
        <ApplySequentalAssigns <WrapVars e.NewArg> (e.Sg)>
      )
      (Function (e.InstanceName) Sentences e.NewSentences)
      (
        ((e.InstanceName) e.History ((e.InstanceName) e.Signature))
      );
}

SpecCall-BuildSignature-False {
  (e.Name) (e.Body) s.NextNumber e.Signatures (e.UsedVars)
  (e.Argument) (e.NewArgument) (e.Sg) (e.History)

      /* ищем динамическое обобщение для аргумента и образцов */
    = <DynGenArg (e.UsedVars) (e.NewArgument) (e.Sg) e.Body>
    : (e.UsedVars^) (e.NewArgument^) (e.Sg^) (e.Solutions)

    = <SpecCall-CheckSignature-False
        (e.Name) (e.Body) s.NextNumber e.Signatures
        (e.Argument) (e.NewArgument) (e.Sg) (e.Solutions) (e.History)
      >;
}

SpecCall-CheckSignature-False {
  /* тривиальная сигнатура */
  (e.Name) (e.Body) s.NextNumber e.Signatures
  (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.History)
    , <IsTrivialSignature e.NewArg (e.Body)> : True
    = ((e.Body) s.NextNumber e.Signatures)
      (CallBrackets (Symbol Name e.Name) e.OldArg)
      /* пусто */ (/* пусто */);

  /* проверяем, известна ли сигнатура */
  (e.Name) (e.Body) s.NextNumber e.Signatures
  (e.OldArg) (e.NewArg) (e.Sg) (e.Solutions) (e.History)
    = <RenameSignatureVars-Expr (/* пусто */ 0) e.NewArg>
    : t._ e.Signature
    = <FindInSignatures (e.Signature) e.Signatures>
    : {
        Found e.InstanceName (e.Signatures^)
          = ((e.Body) s.NextNumber e.Signatures)
            (CallBrackets
              (Symbol Name e.InstanceName)
              <ApplySequentalAssigns <WrapVars e.NewArg> (e.Sg)>
            )
            /* пусто */ (/* пусто */);

        /* проверяем на зацикливание */
        NotFound e.Signatures^
          = <SpecCall-NewSignature-MakeFunction
              (e.Name) (e.Body) s.NextNumber e.Signatures
              (e.NewArg) (e.Sg) (e.Solutions) (e.History) (e.Signature)
            >;
      }
}

ExtractCalls-Expr {
  (e.Calls (e.UsedVars)) e.Expr
    = <MapAccum &ExtractCalls-Term (e.Calls (e.UsedVars)) e.Expr>;
}

ExtractCalls-Term {
  (e.Calls (e.UsedVars)) (CallBrackets e.Expr)
    = <NewVarName (e.UsedVars) 'eCall'> : (e.UsedVars^) e.NewVar
    = (e.Calls ((CallBrackets e.Expr) ':' (Var e.NewVar)) (e.UsedVars))
      (Var e.NewVar);

  (e.Calls (e.UsedVars)) (Brackets e.Expr)
    = <ExtractCalls-Expr (e.Calls (e.UsedVars)) e.Expr>
    : (e.Calls^ (e.UsedVars^)) e.Expr^
    = (e.Calls (e.UsedVars)) (Brackets e.Expr);

  (e.Calls (e.UsedVars)) (ADT-Brackets (e.Name) e.Expr)
    = <ExtractCalls-Expr (e.Calls (e.UsedVars)) e.Expr>
    : (e.Calls^ (e.UsedVars^)) e.Expr^
    = (e.Calls (e.UsedVars)) (ADT-Brackets (e.Name) e.Expr);

  (e.Calls (e.UsedVars)) t.OtherTerm = (e.Calls (e.UsedVars)) t.OtherTerm;
}

RenameSignatureVars-Expr {
  t.State e.Expr = <MapAccum &RenameSignatureVars-Term t.State e.Expr>;
}

RenameSignatureVars-Term {
  (e.KnownVariables s.NextId) (Var s.Mode e.OldIndex)
    , e.KnownVariables : e._B (s.Mode e.OldIndex (e.NewIndex)) e._E
    = (e.KnownVariables s.NextId)
      (Var s.Mode e.NewIndex);

  (e.KnownVariables s.NextId) (Var s.Mode e.OldIndex)
    = <Symb s.NextId> : e.NewIndex
    = (e.KnownVariables (s.Mode e.OldIndex (e.NewIndex)) <Inc s.NextId>)
      (Var s.Mode e.NewIndex);

  t.State (s.BracketsTag e.Expr)
    , <OneOf s.BracketsTag CallBrackets ClosureBrackets Brackets> : True
    = <RenameSignatureVars-Expr t.State e.Expr> : t.State^ e.Expr^
    = t.State (s.BracketsTag e.Expr);

  t.State (ADT-Brackets (e.Name) e.Expr)
    = <RenameSignatureVars-Expr t.State e.Expr> : t.State^ e.Expr^
    = t.State (ADT-Brackets (e.Name) e.Expr);

  t.State t.OtherTerm = t.State t.OtherTerm;
}

ApplySequentalAssigns {
  e.Expression (e.Assigns)
    = <Map
        {
          (e.Expr ':' t.Var) = (t.Var ':' e.Expr)
        }
        e.Assigns
      >
    : e.Contractions
    = <ApplyContractions e.Expression (e.Contractions)>
}

FindInSignatures {
  (e.Signature)
  e.Signatures-B ((e.InstanceName) e.Signature) e.Signatures-E
    = Found e.InstanceName
      (((e.InstanceName) e.Signature) e.Signatures-B e.Signatures-E);

  (e.Signature) e.Signatures = NotFound e.Signatures;
}

/**
  <IsTrivialSubstitutions e.StaticMatches>
*/
IsTrivialSubstitutions {
  e.StaticMatches
    = <Reduce
        {
          False t.Any = False;

          True ((Var s.Mode e.Index1) ':' (Var s.Mode e.Index2))
            = True;

          True ((Var s.Mode e.Index1) ':' (s.Mode e.Index2))
            = True;

          True t.OtherSubstitution = False;
        }
        True
        e.StaticMatches
      >;
}

CreateNewSentences {
  (e.Arg) (e.NewSentences) (e.Solutions) (e.Body)
    = <WrapVars e.Arg> : e.PatternTemplate
    = <DoCreateNewSentences
        (e.PatternTemplate) (e.NewSentences) (e.Solutions) (e.Body)
      >
}

DoCreateNewSentences {
  (e.PatTemplate) (e.NewSentences)
  ((e.Sol) e.Solutions) (((e.Pat) e.Tail) e.Body)
    = <Reduce
        {
          (e.NewSentences^) ((e.Contrs) (e.Assigns))
            = <ApplyContractions e.PatTemplate (e.Contrs)> : e.Pat^
            = <ApplySubst-Tail (e.Assigns) e.Tail> : e.Tail^
            = (e.NewSentences ((e.Pat) e.Tail));
        }
        (e.NewSentences)
        e.Sol
      >
    : (e.NewSentences^)
    = <DoCreateNewSentences
        (e.PatTemplate) (e.NewSentences) (e.Solutions) (e.Body)
      >;

  (e.PatTemplate) (e.NewSentences) (/* пусто */) (/* пусто */)
    = e.NewSentences
    : {
        /*
          Если образец одного из предложений совпадает с шаблоном
          (к нему не применилось ни одно из сужений) и условий нет,
          то это предложение экранирует все последующие.
        */
        e.Prefix ((e.PatTemplate) (e.Result)) e.ScreenedSentences
          = e.Prefix ((e.PatTemplate) (e.Result));

        e.NewSentences^ = e.NewSentences;
      };
}

ApplySubst-Tail {
  (e.Assigns) (Condition (e.ConditionName) (e.Result) (e.Pattern)) e.Tail
    = (
        Condition (e.ConditionName)
        (<ApplyAssigns e.Result (e.Assigns)>)
        (<ApplyAssigns e.Pattern (e.Assigns)>)
      )
      <ApplySubst-Tail (e.Assigns) e.Tail>;

  (e.Assigns) (e.Result) = (<ApplyAssigns e.Result (e.Assigns)>);
}

WrapVars {
  e.Arg
    = <ExtractVariables-Expr e.Arg> : e.UsedVars
    = <OrderUniqueVars e.UsedVars> : e.UsedVars^
    = <Map
        { (s.Mode e.Index) = <WrapVar s.Mode (Var s.Mode e.Index)> }
        e.UsedVars
      >
    : e.UsedVars^
    = <RemoveLastGhostBracket e.UsedVars>
}

WrapVar {
  'e' e.Expr = (GhostBrackets e.Expr);
  s.Mode e.Expr = e.Expr
}

RemoveLastGhostBracket {
  e.NewArgOrPattern (GhostBrackets e.LastEValue)
    = <Map
        {
          (GhostBrackets e.Expr) = (Brackets e.Expr);
          t.STValue = t.STValue;
        }
        e.NewArgOrPattern
      >
      e.LastEValue;

  e.NewArgOrPattern t.STValue
    = <RemoveLastGhostBracket e.NewArgOrPattern> t.STValue;

  /* пусто */ = /* пусто */;
}

IsTrivialSignature {
  e.Arg (e.Body), <IsHardExpr e.Arg> : False = False;
  e.Arg (e.Body t.GuardSentence) = <DoIsTrivialSignature e.Arg (e.Body)>;
}

DoIsTrivialSignature {
  e.Arg (/* кончились предложения */) = True;

  e.Arg (((e.Pattern) e.Tail) e.Sentences)
    , <GenericMatch (e.Pattern) (e.Arg)> : Clear e._
    = <DoIsTrivialSignature e.Arg (e.Sentences)>;

  e.Arg (e.Sentences) = False;
}

OrderUniqueVars {
  e.Vars-B t.Var e.Vars-M t.Var e.Vars-E
    = e.Vars-B <OrderUniqueVars t.Var e.Vars-M e.Vars-E>;

  e.Variables = e.Variables;
}

/**
  <HasStopRelation (e.Name) (e.Signature) e.History>
    == True (e.History-B) ((e.HistoryName) e.HistorySignature) (e.History-E)
    == False
*/

HasStopRelation {
  (e.Name) (e.Signature) e.History
    = <DoHasStopRelation (e.Name) (e.Signature) e.History (/* scanned */)>
}

DoHasStopRelation {
  (e.Name) (e.Signature) e.History-B ((e.InstanceName) e.HistorySignature)
  (e.History-E)
    , <SourceNameOfInstance e.InstanceName> : e.Name
    , <OptTree-CheckExprStopRelation
        (e.Signature) <OptTree-CanonizeExpr e.HistorySignature>
      >
    : True
    = True (e.History-B) ((e.InstanceName) e.HistorySignature) (e.History-E);

  (e.Name) (e.Signature) e.History-B t.HistoryItem (e.History-E)
    = <DoHasStopRelation
        (e.Name) (e.Signature) e.History-B (t.HistoryItem e.History-E)
      >;

  (e.Name) (e.Signature) /* пустая история */ (e.History-E) = False;
}

SourceNameOfInstance {
  e.Name SUF '@' s._ = e.Name;
  e.Name '@' s._ = e.Name;
}

/*
  Назначает имена переменным в сигнатуре,
  отличные от тех, что есть в t.State.
*/

NameSignatureVars-Expr {
  t.State e.Expr = <MapAccum &NameSignatureVars-Term t.State e.Expr>;
}

NameSignatureVars-Term {
  (e.KnownVars) (Var s.Mode)
    = <NewVarName (e.KnownVars) s.Mode 'X'> : (e.KnownVars^) e.Index
    = (e.KnownVars)
      (Var e.Index);

  t.State (s.BracketsTag e.Expr)
    , <OneOf s.BracketsTag CallBrackets ClosureBrackets Brackets> : True
    = <NameSignatureVars-Expr t.State e.Expr> : t.State^ e.Expr^
    = t.State (s.BracketsTag e.Expr);

  t.State (ADT-Brackets (e.Name) e.Expr)
    = <NameSignatureVars-Expr t.State e.Expr> : t.State^ e.Expr^
    = t.State (ADT-Brackets (e.Name) e.Expr);

  t.State t.OtherTerm = t.State t.OtherTerm;
}
