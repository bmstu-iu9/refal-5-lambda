$INCLUDE "LibraryEx";

*$FROM HighLevelRASL-Common
$EXTERN CollectStrings, IncVarOffset, PrintVar;


/**
  <GenResult-Simple
    s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.Result
  >
    == s.ContextOffset^ e.ResultCommands

  e.MarkedPattern — не используется
*/
$ENTRY GenResult-Simple {
  s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.Result
    = /* e.MarkedPattern не используется */
      <GenResult s.ContextOffset &MakeVarTable-Simple (e.PatternVars) e.Result>
    : {
        s.ContextOffset^ (e.CommonVars) /* нет команд генерации результата */ =
          s.ContextOffset
          <MakeVariableCommentTable e.CommonVars>
          (CmdSpliceToFreeList)
          (CmdNextStep);

        s.ContextOffset^ (e.CommonVars) e.ResultCommands =
          s.ContextOffset
          <MakeVariableCommentTable e.CommonVars>
          (CmdResetAllocator)
          (CmdSetRes ARG-BEGIN)
          e.ResultCommands
          (CmdUseRes)
          (CmdSpliceToFreeList)
          (CmdNextStep);
      };
}

/**
  <GenResult-Condition
    s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.Result
  >
    == s.ContextOffset^ e.ResultCommands
*/

$ENTRY GenResult-Condition {
  s.ContextOffset (e.PatternVars) e.CondResult
    = <GenResult
        s.ContextOffset &MakeVarTable-Conditions (e.PatternVars) e.CondResult
      >
    : s.ContextOffset^ (e.CommonVars) e.ResultCommands
    = s.ContextOffset
      <MakeVariableCommentTable e.CommonVars>
      (CmdResetAllocator)
      (CmdSetRes 1)
      e.ResultCommands
      (CmdUseRes);
}

MakeVarTable-Simple {
  (s.Mode (e.Index) e.Offsets) = (s.Mode (e.Index) () e.Offsets);
}

MakeVarTable-Conditions {
  (s.Mode (e.Index) e.Offsets) = (s.Mode (e.Index) (e.Offsets));
}

GenResult {
  s.ContextOffset s.FnMakeVarTable (e.PatternVars) e.Result
    = <Map s.FnMakeVarTable e.PatternVars> : e.PatternVars^
    = <DoGenResult
        (e.PatternVars)
        (/* alloc commands */) (/* other commands */)
        s.ContextOffset /* счётчик новых элементов */
        <CollectStrings e.Result>
      >;
}

*$NOOPT DoGenResult

DoGenResult {
 (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkOpenCallCond s.Offset) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Offset ElOpenCall))
      ((CmdInsertElem s.Offset) e.Commands)
      s.Counter e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkCloseCallCond s.Offset) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Offset ElCloseCall))
      (
        (CmdPushStack s.Offset)
        (CmdPushStack <Dec s.Offset>)
        (CmdInsertElem s.Offset)
        e.Commands
      )
      s.Counter e.Result
    >;

  /* Создаём литералы */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (Symbol Char s.Value) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElChar s.Value))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (Symbol Name e.Name) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElName e.Name))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (Symbol Number s.Number) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElNumber s.Number))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (Symbol Identifier e.Name) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElIdent e.Name))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkString e.Chars) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElString e.Chars))
      ((CmdInsertRange s.Counter) e.Commands)
      <Add s.Counter 2> e.Result
    >;

  /*
    Обработка открывающих скобок всех трёх типов осуществляется похоже.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (Brackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElOpenBracket))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (TkCloseBracket s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (CallBrackets e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElOpenCall))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter> e.InBrackets (TkCloseCall s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (ADT-Brackets (e.Name) e.InBrackets) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElOpenADT))
      ((CmdInsertElem s.Counter) e.Commands)
      <Inc s.Counter>
      (Symbol Name e.Name) e.InBrackets (TkCloseADT s.Counter) e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (ClosureBrackets e.InBrackets) e.Result
    = <DoGenResult
        (e.Vars)
        (e.AllocCommands (CmdCreateElem Allocate s.Counter ElClosureHead))
        ((CmdInsertElem s.Counter) e.Commands)
        <Inc s.Counter> e.InBrackets (TkUnwrappedClosure s.Counter) e.Result
      >;

  /*
    Закрывающие скобки надо обрабатывать особым образом.
    Круглые скобки и АТД -- слинковать, угловые -- добавить в стек.
  */
  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkCloseBracket s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElCloseBracket))
      (
        (CmdLinkBrackets s.OpenCounter s.Counter)
        (CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkCloseADT s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElCloseADT))
      (
        (CmdLinkBrackets s.OpenCounter s.Counter)
        (CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkCloseCall s.OpenCounter) e.Result =
    <DoGenResult
      (e.Vars)
      (e.AllocCommands (CmdCreateElem Allocate s.Counter ElCloseCall))
      (
        (CmdPushStack s.Counter)
        (CmdPushStack s.OpenCounter)
        (CmdInsertElem s.Counter)
        e.Commands
      )
      <Inc s.Counter> e.Result
    >;

  (e.Vars) (e.AllocCommands) (e.Commands)
  s.Counter (TkUnwrappedClosure s.HeadCounter) e.Result
    = <DoGenResult
        (e.Vars)
        (
          e.AllocCommands
          (CmdCreateElem Allocate s.Counter ElUnwrappedClosure s.HeadCounter)
        )
        (
          (CmdInsertElem s.Counter)
          e.Commands
          (CmdWrapClosure s.Counter)
        )
        <Inc s.Counter> e.Result
      >;

  /* Обработка переменных */
  (
    e.Vars-B
    (s.Mode (e.Index) (e.ResultVars) s.NextPatternVar e.PatternVars)
    e.Vars-E
  )
  (e.AllocCommands) (e.Commands)
  s.Counter (Var s.Mode e.Index) e.Result =
    <DoGenResult
      (
        e.Vars-B
        (s.Mode (e.Index) (e.ResultVars s.NextPatternVar) e.PatternVars)
        e.Vars-E
      )
      (e.AllocCommands)
      ((CmdInsertVar s.Mode s.NextPatternVar) e.Commands)
      s.Counter e.Result
    >;

  (e.Vars-B (s.Mode (e.Index) (e.ResultVars s.Sample)) e.Vars-E)
  (e.AllocCommands) (e.Commands)
  s.Counter (Var s.Mode e.Index) e.Result =
    <DoGenResult
      (e.Vars-B (s.Mode (e.Index) (e.ResultVars s.Sample s.Counter)) e.Vars-E)
      (e.AllocCommands (CmdCopyVar s.Mode s.Counter s.Sample))
      ((CmdInsertVar s.Mode s.Counter) e.Commands)
      <IncVarOffset s.Counter s.Mode> e.Result
    >;

  /* Завершение просмотра */
  (e.Vars) (e.AllocCommands) (e.Commands) s.Counter =
    s.Counter (e.Vars) e.AllocCommands e.Commands;
}

$ENTRY MakeVariableCommentTable {
  e.Vars =
    <Fetch
      e.Vars
      <Pipe
        (&Map &ReplicateVar)
        &Sort
        (&Map &MakeVariableComment)
      >
    >;
}

ReplicateVar {
  (s.Mode (e.Index) (e.ResultOccurences) e.PatternOccurences) =
    <Map
      {
        s.ContextOffset = (s.ContextOffset s.Mode e.Index);
      }
      e.ResultOccurences e.PatternOccurences
    >;
}

MakeVariableComment {
  (s.Offset s.Mode e.Index)
    = (CmdComment { = <Symb s.Offset> ': ' <PrintVar s.Mode e.Index> });
}
