$INCLUDE "LibraryEx";

*$FROM GenericMatch
$EXTERN GenericMatch;

*$FROM Desugaring
$EXTERN CreateContext, RemovePos-Expr, ExtractVariables-Expr,
        Pass-EnumerateVariables, Pass-RemovePos;

/*
  <CheckScreening (t.WarningId*) (e.AST)
    == t.Warning*

  CheckScreening осуществляет попарную проверку экранирования образцов.
*/
$ENTRY CheckScreening {
 (e._ screening e._) (e.AST)
   = <FindFunctionsPosInAST e.AST> : (e.FunctionsPos) e.AST^
   = <Pass-RemovePos e.AST> : e.AST^
   = <Pass-EnumerateVariables e.AST> : e.AST^
   = <Zip (e.AST) (e.FunctionsPos)> : e.FunctionsWithPos
   = <Map &CheckFunction e.FunctionsWithPos>;

 (e._) (e.AST) = /* пусто */
}

/*
  <FindFunctionsPosInAST e.AST>
    == (t.SrcPos*) t.Function*

  FindFunctionsPosInAST достает из AST-дерева функции
  и их расположение в исходном файле.
*/
FindFunctionsPosInAST {
  e.AST
    = <MapAccum
        {
          (e.Positions)
          (Function t.SrcPos s.ScopeClass (e.Name) Sentences e.Sentences)
            = (e.Positions t.SrcPos)
             (Function t.SrcPos s.ScopeClass (e.Name) Sentences e.Sentences);

          (e.Positions) t.Other = (e.Positions) /* пусто */
        }
        () e.AST
      >;
}

/*
  <MakePairs (t.Pattern s.Num)*>
    == ((t.Pattern1 s.Num1) (t.Pattern2 s.Num2))*

  MakePairs создает "декартовы" пары предложений
  для дальнейшей попарной проверки экранирования.
*/
MakePairs {
  t.NumberedSentence e.Tail
    = <Map
        {
          t.NumberedSentenceTail = (t.NumberedSentenceTail t.NumberedSentence);
        }
        e.Tail
      >
      <MakePairs e.Tail>;

  /* пусто */ = /* пусто */;
}

/*
  <CheckFunction t.Function>
    == t.Warning*

  CheckFunction проверяет тело функции на экранирование.
*/
CheckFunction {
  ((Function s.ScopeClass (e.Name) Sentences e.Sentences) t.SrcPos)
    = <CheckSentences t.SrcPos (e.Name) (<gen_e__>) (<gen_e__>) (e.Sentences)>
}

/*
  <CheckSentences t.SrcPos (e.FuncName) (e.Prefix) (e.CtxVars) (e.Sentences)>
    == t.Warning*

  CheckSentences проверяет тело функции на экранирование.
  t.SrcPos, e.FuncName и e.Prefix используются для генерации
  сообщения предупрждения с указанием экранируемых предложений.

  Алгоритм:
  - предложения нумеруются с помощью Enumerate
  - создаются пары предложений (MakePairs)
  - отсеиваются предложения с условиями (FilterConditions)
  - проверяются созданные пары предложений (CheckPatternPairs)
  - обрабатываются условия, блоки, правая часть с обновлением контекста
*/
CheckSentences {
  t.SrcPos (e.FuncName) (e.Prefix) (e.ContextVars) (e.Sentences)
    = <Enumerate e.Sentences> : e.NumberedSentences
    = <MakePairs e.NumberedSentences> : e.NumberedSentencesPairs
    = <FilterConditions e.NumberedSentencesPairs> : e.NumberedSentencesPairs^
    = <CheckPatternPairs
        t.SrcPos
        (e.FuncName)
        (e.Prefix)
        (e.ContextVars)
        (e.NumberedSentencesPairs)
      >
      <DelAccumulator
        <MapAccum
          {
            s.Num ((e.Pattern) e.AssignsOrConds (e.Result) (e.Blocks))
              = <gen_e__ e.Prefix '$' <Symb s.Num>> : e.Prefix^
              = <gen_e__ e.ContextVars e.Pattern> : e.ContextVars^
              = <Map
                  {
                    (s.AssignOrCond (e.Result^) (e.Blocks^) (e.Pattern^))
                      = e.Pattern;
                  }
                  e.AssignsOrConds
                >
              : e.ContextAllAssignsOrConds
              = <Inc s.Num>
                <CheckSentenceAssignsAndConditions
                  t.SrcPos
                  (e.FuncName)
                  (e.Prefix)
                  (e.ContextVars)
                  ((e.Pattern) e.AssignsOrConds (e.Result) (e.Blocks))
                >
                <CheckSentenceResult
                  t.SrcPos
                  (e.FuncName)
                  (e.Prefix)
                  (<gen_e__ e.ContextVars e.ContextAllAssignsOrConds>)
                  ((e.Pattern) e.AssignsOrConds (e.Result) (e.Blocks))
                >
                <CheckSentenceBlocks
                  t.SrcPos
                  (e.FuncName)
                  (e.Prefix)
                  (<gen_e__ e.ContextVars e.ContextAllAssignsOrConds>)
                  ((e.Pattern) e.AssignsOrConds (e.Result) (e.Blocks))
                >
          }
          1 e.Sentences
        >
      >
}

/*
  <FilterConditions t.NumberedSentencePair*>
    == t.NumberedSentencePair*

  FilterConditions отсеивает пары предложений, где потенциальное экранирующее
  предложение содержит условия, или есть вызовы функций.
*/
FilterConditions {
  e.NumberedSentencesPairs
    = <Map
        {
          (
            t.NumberedSentence-L
            ((t.Pattern (Condition e._) e.SentenceTail) s.Num)
          )
            = /* пусто */;

          (
            t.NumberedSentence-L
            ((t.Pattern e._ (e._ (CallBrackets e.1) e._) ((Sentences e.2) e._)) s.Num)

          )
            = /* пусто */;

          (t.NumberedSentence-L t.NumberedSentence-R)
            = (t.NumberedSentence-L t.NumberedSentence-R);
        }
        e.NumberedSentencesPairs
      >;
}

/*
  <CheckSentenceBlocks t.SrcPos (e.FuncName) (e.Prefix) (e.Ctx) (e.Sentences)>
    == t.Warning*

  CheckSentenceBlocks обрабатывает блоки предложения.
*/
CheckSentenceBlocks {
  t.SrcPos
  (e.FuncName)
  (e.Prefix)
  (e.ContextVars)
  ((e.SentencePattern) e._ (e._) (e.Blocks))
    = <CheckBlocks
        t.SrcPos
        (e.FuncName)
        (e.Prefix)
        (e.ContextVars)
        (e.Blocks)
      >;
}

/*
  <CheckBlocks t.SrcPos (e.FuncName) (e.Prefix) (e.Ctx) (e.Blocks)>
    == t.Warning*

  CheckBlocks обрабатывает блоки.
*/
CheckBlocks {
  t.SrcPos (e.FuncName) (e.Prefix) (e.ContextVars) (e.Blocks)
    = <DelAccumulator
        <MapAccum
          {
            s.Num (Sentences e.Sentences)
              = <Inc s.Num>
                <CheckSentences
                  t.SrcPos
                  (e.FuncName)
                  (<gen_e__ e.Prefix ':' <Symb s.Num>>)
                  (e.ContextVars)
                  (e.Sentences)
                >;

            s.Num t.OtherBlock = s.Num /* пусто */;
          }
          1 e.Blocks
        >
      >;
}

gen_e__ { e.Arg = e.Arg }

/*
  <CheckSentenceAssignsAndConditions
    t.SrcPos (e.FuncName) (e.Prefix) (e.Ctx) (e.Blocks)
  >
    == t.Warning*

  CheckBlocks обрабатывает присваивания и условия.
*/
CheckSentenceAssignsAndConditions {
  t.SrcPos
  (e.FuncName)
  (e.Prefix)
  (e.ContextVars)
  ((e._) e.AssignsOrConditions (e._) (e._))
    = <DelAccumulator
        <MapAccum
          {
            (s.Num e.ContextVars^)
            (s.AssignOrCondition (e.Result) (e.Blocks) (e.Pattern))
              , s.AssignOrCondition
              : {
                  Assign = '=';
                  Condition = '?'
                }
              : s.AssignOrCondition^
              = <gen_e__ e.Prefix s.AssignOrCondition <Symb s.Num>> : e.Prefix^
              = (<Inc s.Num> e.ContextVars e.Pattern)
                <CheckBlocks
                  t.SrcPos
                  (e.FuncName)
                  (e.Prefix)
                  (e.ContextVars)
                  (e.Blocks)
                >
                <CheckExpression
                  t.SrcPos
                  (e.FuncName)
                  (e.Prefix)
                  (e.ContextVars)
                  (e.Result)
                >;

            (s.Num e.ContextVars^) t.Other = (s.Num e.ContextVars) /* пусто */;
          }
          (1 e.ContextVars) e.AssignsOrConditions
        >
      >;
}

/*
  <CheckSentenceResult
    t.SrcPos (e.FuncName) (e.Prefix) (e.Ctx) (e.Sentence)
  >
    == t.Warning*

  CheckSentenceResult обрабатывает правую часть предложения (результат).
*/
CheckSentenceResult {
  t.SrcPos (e.FuncName) (e.Prefix) (e.ContextVars) ((e._) e._ (e.Result) (e._))
    = <CheckExpression
        t.SrcPos
        (e.FuncName)
        (e.Prefix)
        (e.ContextVars)
        (e.Result)
      >
}

/*
  <CheckSentencePattern
    t.SrcPos (e.FuncName) (e.Prefix) (e.Ctx) (e.Sentence)
  >
    == t.Warning*

  CheckSentencePattern обрабатывает выражение в предложении.
*/
CheckSentencePattern {
  t.SrcPos (e.FuncName) (e.Prefix) (e.ContextVars) ((e.Pattern) e._ (e._) (e._))
    = <CheckExpression
        t.SrcPos
        (e.FuncName)
        (e.Prefix)
        (e.ContextVars)
        (e.Pattern)
      >
}

/*
  <CheckExpression
    t.SrcPos (e.FuncName) (e.Prefix) (e.Ctx) (e.Expression)
  >
    == t.Warning*

  CheckExpression обрабатывает выражение.
*/
CheckExpression {
  t.SrcPos (e.FuncName) (e.Prefix) (e.ContextVars) (e.Expression)
    = <DelAccumulator
        <MapAccum
          {
            s.Num (Brackets e.Expr)
              = s.Num
                <CheckExpression
                  t.SrcPos
                  (e.FuncName)
                  (e.Prefix)
                  (e.ContextVars)
                  (e.Expr)
                >;
            s.Num (ADT-Brackets t._ (e._) e.Expr)
              = s.Num
                <CheckExpression
                  t.SrcPos
                  (e.FuncName)
                  (e.Prefix)
                  (e.ContextVars)
                  (e.Expr)
                >;
            s.Num (CallBrackets e.Expr)
              = s.Num
                <CheckExpression
                  t.SrcPos
                  (e.FuncName)
                  (e.Prefix)
                  (e.ContextVars)
                  (e.Expr)
                >;
            s.Num (Closure Sentences e.Sentences)
              = <Inc s.Num>
                <CheckSentences
                  t.SrcPos
                  (e.FuncName)
                  (<gen_e__ e.Prefix '\\' <Symb s.Num>>)
                  (e.ContextVars)
                  (e.Sentences)
                >;

            s.Num t.Other = s.Num /* пусто */
          }
          1 e.Expression
        >
      >
}

/*
  <CheckPatternPairs t.SrcPos (e.FuncName) (e.Prefix) (e.ContextVars) (e.Pairs)
    == t.Warning*

  CheckPatternPairs проверяет экранирование каждой пары образцов из e.Pairs
  1) алгоритмом обобщенного сопоставления GenericMatch
  2) алгоритмом, основанном на теории языков образцов

  t.SroPos - позиция функции, телу которой принадлежит пара образцов
  e.FuncName - имя функции
  e.Prefix - префикс, указывающий путь к экранирумым предложениям,
             например, $5:1\1
  e.ContextVars - контекст, содержащий связанные переменные
*/
CheckPatternPairs {
  t.SrcPos (e.FuncName) (e.Prefix) (e.ContextVars) (e.Pairs)
    = <Unique <ExtractVariables-Expr e.ContextVars>> : e.ContextVars^
    = <CreateContext NoMarkupContext e.ContextVars> : e.ContextVars^
    = <Map
      {
        (
          (((e.Pattern-L) e._ (e._) (e._)) s.Num-L)
          (((e.Pattern-R) e._ (e._) (e._)) s.Num-R)
        )
          = <GenericMatch
              (e.ContextVars e.Pattern-L)
              (e.ContextVars e.Pattern-R)
            >
          : {
              e._, (e.Pattern-L) (e.Pattern-R) : () ()
                = <CreateScreeningWarning
                    t.SrcPos
                    (e.FuncName)
                    (e.Prefix '$' <Symb s.Num-R>)
                    (e.Prefix '$' <Symb s.Num-L>)
                  >;
              Clear e._
                = <CreateScreeningWarning
                    t.SrcPos
                    (e.FuncName)
                    (e.Prefix '$' <Symb s.Num-R>)
                    (e.Prefix '$' <Symb s.Num-L>)
                  >;

              e._ = <PatternLanguagesCheck
                      (e.ContextVars e.Pattern-L)
                      (e.ContextVars e.Pattern-R)
                    >
                  : {
                      True e.Other
                        = <CreateScreeningWarning
                            t.SrcPos
                            (e.FuncName)
                            (e.Prefix '$' <Symb s.Num-R>)
                            (e.Prefix '$' <Symb s.Num-L>)
                          >;

                      False = /* пусто */;
                  }
            }
      }
      e.Pairs
    >;

  /* пусто */ = /* пусто */;
}

/*
  <PatternLanguagesCheck (e.ContextVars) (e.Pattern-L) (e.Pattern-R)>
    == t.Warning*

  PatternLanguagesCheck проверяет пару предложений
  на экранирование алгоритмом, основанном на языках образцов.
*/
PatternLanguagesCheck {
  (e.Pattern-L) (e.Pattern-R)
    , <FlattenPattern e.Pattern-R> : e.FlattenedPattern-R
    , <IsPatternLinear e.FlattenedPattern-R> : True
    = <Normalize e.Pattern-R> : e.Pattern-R^
    = <ScreenVars e.Pattern-L> : e.Pattern-L^
    = <GenericMatch (e.Pattern-L) (e.Pattern-R)>
    : {
        Clear e._ = True;
        e._ = False;
      };

  (e.Pattern-L) (e.Pattern-R)
    = False;
}

ScreenVars {
  e.Expression
    = <Map
        {
          (Var s.Mode e.Index) = (ScrVar s.Mode e.Index);

          (Brackets e.Nested) = (Brackets <ScreenVars e.Nested>);

          (ADT-Brackets (e.Name) e.Nested)
            = (ADT-Brackets (e.Name) <ScreenVars e.Nested>);

          t.Other = t.Other;
        }
        e.Expression
      >;
}

/*
  <Normalize e.Pattern>
    == e.NormalizedPattern

  Normalize строит нормальную форму образца.
  Если в предложении нет e-переменных, предложение не изменится.

  Алгоритм:
  - разметка t-переменных кратности >=2 (1-ая часть определения)
  - нахождение других якорных t-переменных (2-ая часть определения)
  - "плавающие" t-переменные обрамляются новыми e-переменными
*/
Normalize {
  e.Pattern
    = <FlattenPattern e.Pattern> : e.FlatPattern
    = <CountTVarsMultiplicity e.FlatPattern> : t.Multiplicity
    = <MarkupMultipleAnchorTVars (e.Pattern) t.Multiplicity> : e.MarkedPattern
    = <MarkupNeighbourAnchorTVars e.MarkedPattern> : e.MarkedPattern^
    = <InsertFakeEVars e.MarkedPattern> : e.NormalizedPattern
    = <DeleteMarkup e.NormalizedPattern>
}

/*
  <DeleteMarkup e.MarkedPattern>
    == e.Pattern

  DeleteMarkup удаляет разметку Anchor/Float с t-переменных.
*/
DeleteMarkup {
  e.MarkedPattern
    = <Map
        {
          (Float t.Item) = t.Item;
          (Anchor t.Item) = t.Item;
          (MarkedBrackets e.Brackets) = (Brackets <DeleteMarkup e.Brackets>);
          (MarkedADTBrackets (e.Name) e.Brackets)
            = (ADT-Brackets (e.Name) <DeleteMarkup e.Brackets>);

          t.Item = t.Item;
        }
        e.MarkedPattern
      >;
}

/*
  <InsertFakeEVars e.MarkedPattern>
    == e.MarkedPattern

  InsertFakeEVars добавляет новые e-переменные вокруг плавающих t-переменных.
*/
InsertFakeEVars {
  e.Prefix
  (Var 'e' e.Index1) (Var 't' e.Index2) (Var 'e' e.Index3)
  e.Suffix
    = <InsertFakeEVars
        e.Prefix
        (Var 'e' e.Index1)
        (Float (Var 't' e.Index2))
        (Var 'e' e.Index3)
        e.Suffix
      >;

  e.Prefix
  (Var 'e' e.Index1) (Var 't' e.Index2)
  e.Suffix
    = <InsertFakeEVars
        e.Prefix
        (Var 'e' e.Index1)
        (Float (Var 't' e.Index2))
        (Var 'e' e.Index2 'fake')
        e.Suffix
      >;

  e.Prefix
  (Var 't' e.Index2) (Var 'e' e.Index3)
  e.Suffix
    = <InsertFakeEVars
        e.Prefix
        (Var 'e' e.Index2 'fake')
        (Float (Var 't' e.Index2))
        (Var 'e' e.Index3)
        e.Suffix
      >;

  e.Prefix
  (Var 't' e.Index2)
  e.Suffix
    = <InsertFakeEVars
        e.Prefix
        (Var 'e' e.Index2 'fake1')
        (Float (Var 't' e.Index2))
        (Var 'e' e.Index2 'fake2')
        e.Suffix
      >;

  e.Prefix
  (Brackets e.Brackets)
  e.Suffix
    = <InsertFakeEVars
        e.Prefix
        (MarkedBrackets <InsertFakeEVars e.Brackets>)
        e.Suffix
      >;

  e.Prefix
  (ADT-Brackets (e.Name) e.Brackets)
  e.Suffix
    = <InsertFakeEVars
        e.Prefix
        (MarkedADTBrackets (e.Name) <InsertFakeEVars e.Brackets>)
        e.Suffix
      >;

   e.Other = e.Other;
}

/*
  <MarkupNeighbourAnchorTVars e.MarkedPattern>
    == e.MarkedPattern

  MarkupNeighbourAnchorTVars размечает якорные t-переменные
  (2-ая часть определения)
*/
MarkupNeighbourAnchorTVars {
  e.MarkedPattern
    = <MarkupNeighbourHelper () (e.MarkedPattern)>;
}

MarkupNeighbourHelper {
  (e.Prefix) ((Var 't' e.Index) e.Suffix)
    , <HasAnchorsPrefix e.Prefix> : True
    , <HasAnchorsSuffix e.Suffix> : True
    = <MarkupNeighbourHelper
        (e.Prefix (Anchor (Var 't' e.Index)))
        (e.Suffix)
      >;

  (e.Prefix) ((Brackets e.Brackets) e.Suffix)
    = <MarkupNeighbourHelper
        (
          e.Prefix
          (Brackets <MarkupNeighbourHelper () (e.Brackets)>)
        )
        (e.Suffix)
      >;

  (e.Prefix) ((ADT-Brackets (e.Name) e.Brackets) e.Suffix)
    = <MarkupNeighbourHelper
        (
          e.Prefix
          (ADT-Brackets (e.Name) <MarkupNeighbourHelper () (e.Brackets)>)
        )
        (e.Suffix)
      >;

  (e.Prefix) (t.Item e.Suffix)
    = <MarkupNeighbourHelper
        (e.Prefix t.Item)
        (e.Suffix)
      >;

  (e.Prefix) ()
    = e.Prefix;
}

/*
  <HasAnchorsPrefix e.MarkedPattern>
    == False
    == True

  HasAnchorsPrefix осуществляет поиск слева
  от проверяемой на якорность t-переменной
  (2-ая часть определения)
*/
HasAnchorsPrefix {
  e.Prefix (Anchor (Var 't' e.Index))
    = True;

  e.Prefix (Symbol s.Mode e.Index)
    = True;

  e.Prefix (Var 'e' e.Index)
    = False;

  e.Prefix (Brackets e._)
    = True;

  e.Prefix t.Other
    = <HasAnchorsPrefix e.Prefix>;

  /* пусто */ = True;
}

/*
  <HasAnchorsSuffix e.MarkedPattern>
    == False
    == True

  HasAnchorsSuffix осуществляет поиск справа
  от проверяемой на якорность t-переменной
  (2-ая часть определения)
*/
HasAnchorsSuffix {
  (Anchor (Var 't' e.Index)) e.Suffix
    = True;

  (Symbol s.Mode e.Index) e.Suffix
    = True;

  (Var 'e' e.Index) e.Suffix
    = False;

  (Brackets e._) e.Suffix
    = True;

  t.Other e.Suffix
    = <HasAnchorsSuffix e.Suffix>;

  /* пусто */ = True;
}

/*
  <MarkupMultipleAnchorTVars (e.Pattern) t.Multiplicity>
    == e.MarkedPattern

  MarkupMultipleAnchorTVars размечает якорные t-переменные
  (1-ая часть определения)
*/
MarkupMultipleAnchorTVars {
  (e.Pattern) t.Multiplicity
    = <Map
        {
          (Var 't' e.Index)
            , <HasMultiplicity (Var 't' e.Index) t.Multiplicity> : True
            = (Anchor (Var 't' e.Index));

          (Brackets e.Brackets)
            = (Brackets
                <MarkupMultipleAnchorTVars (e.Brackets) t.Multiplicity>
              );

          (ADT-Brackets (e.Name) e.Brackets)
            = (ADT-Brackets (e.Name)
                <MarkupMultipleAnchorTVars (e.Brackets) t.Multiplicity>
              );

          t.Other = t.Other;
        }
        e.Pattern
      >;
}

/*
  <CountTVarsMultiplicity e.FlatPattern>
    == (t.Var s.Count)*

  CountTVarsMultiplicity осуществляет подсчет кратности t-переменных
  в плоском(!) образце.
*/
CountTVarsMultiplicity {
  e.FlatPattern
    = <MapAccum
        {
          (e.Accum) (Var 't' e.Index)
            = <IncMultiplicity
                (Var 't' e.Index)
                (e.Accum)
              >
              /* пусто */;

          (e.Accum) t._ = (e.Accum) /* пусто */;
        }
        () e.FlatPattern
      >
    : {
        t.Accum e._ = t.Accum;
      }
}

/*
  <HasMultiplicity t.Var1 ((t.Var s.Count)*)>
    == False
    == True

  HasMultiplicity возвращает True, если кратность t-переменной >= 2,
  иначе False.
*/
HasMultiplicity {
  (Var 't' e.Index)
  (
    e.Accum-L
    ((Var 't' e.Index) s.Count)
    e.Accum-R
  )
    = s.Count
    : {
        1 = False;
        s._ = True;
      };
}

/*
  <IncMultiplicity t.Var1 ((t.Var s.Count)*)>
    == ((t.Var1 1)*)
    == ((t.Var1 <Inc s.Count>)*)

  IncMultiplicity увеличивает кратность t-переменной
  в списке на 1.
*/
IncMultiplicity {
  (Var 't' e.Index)
  (
    e.Accum-L
    ((Var 't' e.Index) s.Count)
    e.Accum-R
  )
    = (e.Accum-L ((Var 't' e.Index) <Inc s.Count>) e.Accum-R);

  (Var 't' e.Index)
  (e.Accum)
    = (e.Accum ((Var 't' e.Index) 1));
}

/*
  <HasPatternTVars (e.Pattern)>
    == True
    == False

  HasPatternTVars возвращает True, если e.Pattern содержит t-переменные,
  иначе False.
*/
HasPatternTVars {
  (e._ (Var 't' e._) e._)
    = True;
  (e._)
    = False;
}

/*
  <IsPatternLinear (e.Pattern)>
    == True
    == False

  IsPatternLinear возвращает True, если образец e.Pattern линеен
  (не имеет повторных e-переменных), иначе False.
*/
IsPatternLinear {
  e._ (Var 'e' e.VarName) e._ (Var 'e' e.VarName) e._
    = False;
  e._
    = True;
}

/*
  <FlattenPattern (e.Pattern)>
    == (e.FlatPattern)

  FlattenPattern "расплющивает" образец.
*/
FlattenPattern {
  e.Pattern
    = <Map
        {
          (Brackets e.Inner)
            = <FlattenPattern e.Inner>;

          (ADT-Brackets (e.Name) e.Inner) = <FlattenPattern e.Inner>;

          t.Other = t.Other;
        }
        e.Pattern
      >
}

/*
  <CreateScreeningWarning t.SrcPos (e.FunName) (e.Screening) (e.Screened)>
    == t.Warning

  CreateScreeningWarning создает объект предупреждения.

  t.SrcPos - позиция в исходном коде
  (e.FunName) - имя функции
  e.Screening - экранирующее предложение
  e.Screened - экранируемое предложение
*/
CreateScreeningWarning {
  t.SrcPos (e.FunName) (e.Screening) (e.Screened)
    = (Warning
        screening
        t.SrcPos
        Screening
        (e.FunName)
        (e.Screening)
        (e.Screened)
      )
}

/*
  <Enumerate t.Item*>
    == (t.Item-1 1) (t.Item-2 2) ... (t.Item-N N)
*/
Enumerate {
  e.Items
    = <MapAccum
        {
          s.Count t.Item = <Inc s.Count> (t.Item s.Count);
        }
        1 e.Items
      >
    : s._ e.NumberedItems = e.NumberedItems
}

/*
  <Zip (t.L1 t.L2 ...) (t.R1 t.R2 ...)>
    ==  (t.L1 t.R1) (t.L2 t.R2) ...
*/
Zip {
  (t.L e.L) (t.R e.R) = (t.L t.R) <Zip (e.L) (e.R)>;
  () () = /* пусто */;
}
