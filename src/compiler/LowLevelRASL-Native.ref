$INCLUDE "LibraryEx";


/**
  <LowLevelRASL-Native s.Hash1 s.Hash2 t.Tables e.Items>
    == t.NativeModule?

  s.Hash1, s.Hash2 ::= s.NUMBER

  t.Tables ::= (t.FuncTable t.IdentTable)
  t.FuncTable, t.IdentTable ::= (s.NextId (s.Id e.Name)*)

  In e.Items is used (Function-ToRASL …) and (Function-ToNative …)
  instead (Function …).
*/
$ENTRY LowLevelRASL-Native {
  s.Hash1 s.Hash2 (t.FuncTable t.IdentTable) e.Items
    = <GetEntries e.Items> : (e.Entries) e.Items^
    = <Map (&SetCookies e.Entries s.Hash1 s.Hash2) e.Items>
    : {
        /* нет нативных определений */ = /* нет нативного RASL’а */;

        e.Definitions
          = <Map &PrepareFunctionsRASL e.Definitions> : e.DefinitionsRASL
          = (
              (CmdCookieNS s.Hash1 s.Hash2)
              <PrepareTable 'efunc' t.FuncTable>
              <PrepareTable 'ident' t.IdentTable>
              e.DefinitionsRASL
            );
      };
}

GetEntries {
  e.Items-B (Entries e.Entries) e.Items-E = (e.Entries) e.Items-B e.Items-E
}

PrepareTable {
  e.Prefix (0 /* пусто */) = /* пусто */;

  e.Prefix (s.Count e.Items)
    = (CmdCEnum-Start e.Prefix)
      <Map { (s.Id e.Name) = (CmdCEnum-Item (e.Prefix) e.Name s.Id) } e.Items>
      (CmdCEnum-End);
}

SetCookies {
  e.Entries s.Hash1 s.Hash2 (UnitName e.SrcName) = /* пропускаем */;

  e.Entries s.Hash1 s.Hash2
  (Function-ToRASL (e.Name) e.Commands) =
    /* пропускаем */;

  e.Entries s.Hash1 s.Hash2
  (Function-ToNative (e.Name) e.Commands) =
    (Function-ToNative
      (<MingleName (e.Entries) e.Name s.Hash1 s.Hash2>)
      e.Commands
    );

  e.Entries s.Hash1 s.Hash2
  (CmdNativeFunction (e.Name) t.SrcPos e.Code) =
    (CmdNativeFunction
      (<MingleName (e.Entries) e.Name s.Hash1 s.Hash2>)
      t.SrcPos e.Code
    );

  e.Entries s.Hash1 s.Hash2
  (CmdMetatable (e.Name) e.Metatable) =
    /* пропускаем */;

  e.Entries s.Hash1 s.Hash2 (CmdEnum e.Name) =
    /* пропускаем */;

  e.Entries s.Hash1 s.Hash2 (CmdSwap e.Name) =
    /* пропускаем */;

  e.Entries s.Hash1 s.Hash2
  (CmdConditionFunc-ToRASL e.Name) =
    /* пропускаем */;

  e.Entries s.Hash1 s.Hash2
  (CmdConditionFunc-ToNative e.Name) =
    /* пропускаем */;

  e.Entries s.Hash1 s.Hash2 (CmdDeclaration e.Name) =
    /* пропускаем */;

  e.Entries s.Hash1 s.Hash2 (CmdEmitNativeCode t.SrcPos e.Code) =
    (CmdEmitNativeCode t.SrcPos e.Code);
}

MingleName {
  (e._ (e.Name) e._) e.Name s.Hash1 s.Hash2 = e.Name Hash 0 0;
  (e.Entries) e.Name s.Hash1 s.Hash2 = e.Name Hash s.Hash1 s.Hash2;
}

PrepareFunctionsRASL {
  (Function-ToNative (e.Name) e.Body)
    = (CmdFnStart e.Name)
      (CmdProfileFunction)
      (CmdLoadConstants)
      <ConvertDirectCommands e.Body>
      (CmdFnEnd)
      (CmdNativeFuncDescr e.Name);

  (CmdNativeFunction (e.Name) t.SrcPos e.Code)
    = (CmdFnStart e.Name)
      (CmdLoadConstants)
      (CmdEmitNativeCode t.SrcPos e.Code)
      (CmdFnEnd)
      (CmdNativeFuncDescr e.Name);

  (CmdEmitNativeCode t.SrcPos e.Code)
    = (CmdEmitNativeCode t.SrcPos e.Code);
}

ConvertDirectCommands {
  (CmdSentence e.SubCommands) e.Tail
    = (CmdStartSentence)
      <ConvertDirectCommands e.SubCommands>
      (CmdEndSentence)
      <ConvertDirectCommands e.Tail>;

  (CmdOpenELoop AlgLeft s.BracketNum s.VarNumber e.SubCommands) e.Tail
    = (CmdOpenedE-Start AlgLeft s.BracketNum s.VarNumber)
      <ConvertDirectCommands e.SubCommands>
      (CmdOpenedE-End AlgLeft s.BracketNum s.VarNumber)
      <ConvertDirectCommands e.Tail>;

  (CmdVariableDebugTable s.Mode e.Index s.Offset) e.Tail
    = (CmdComment { = 'DEBUG: ' s.Mode '.' e.Index ': ' <Symb s.Offset> })
      <ConvertDirectCommands e.Tail>;

  t.Command e.Tail
    = t.Command <ConvertDirectCommands e.Tail>;

  /* пусто */ = /* пусто */;
}
