$INCLUDE "LibraryEx";

*$FROM GlobalGen
$EXTERN GlobalGen;

*$FROM GenericMatch
$EXTERN GenericMatch;

*$FROM TreeUtils
$EXTERN ExtractVariables-Expr;


/**
  <OptTree-AutoMarkup-Spec e.AST> == e.AST
*/

$ENTRY OptTree-AutoMarkup-Spec {
  e.AST
    = <ForbiddenToSpecFunctions e.AST> : (e.Forbidden) e.AST^
    = <Map
        {
          (Function (e.Name) Sentences /* нет предложений */)
            = /* пусто */;

          (Function (e.Name) Sentences e.Body)
            = <Map
                {
                  ((e.Pattern) e.Conditions (e.Result)) = (e.Pattern);
                }
                e.Body
              >
              : e.ExtractedPatterns
            = <GetSpecifiedPattern (e.Name) e.ExtractedPatterns>;

          t.Other = /* пусто */;
        }
        e.AST
      >
    : e.SpecPatterns
    = <MapAccum
        {
          (Specs e.Specs) (Specs e.KnownNames) = (Specs e.Specs e.KnownNames);
          (Specs e.Specs) (Spec (e.Name) e._Pattern) = (Specs e.Specs (e.Name));

          (Specs e.Specs) t.Other = (Specs e.Specs) t.Other;
        }
        (Specs /* пусто */)
        e.AST
        <FilterSpecPatterns e.SpecPatterns (e.Forbidden)>
      >
}

ForbiddenToSpecFunctions {
  e.AST
    = <MapAccum
        {
          (e.Forbidden) (Specs e.Names) = (e.Forbidden e.Names) (Specs e.Names);

          /* экземпляры повторно не специализируем */
          (e.Forbidden)
          (Function (e.FuncName) Sentences e.Body)
            , (e.FuncName) : (e._ SUF e._ '@' s._ e._)
            = (e.Forbidden (e.FuncName))
              (Function (e.FuncName) Sentences e.Body);

          (e.Forbidden) t.OtherItem = (e.Forbidden) t.OtherItem;
        }
        (/* forbidden */) e.AST
      >
}

GetSpecifiedPattern {
  (e.Name) e.ExtractedPatterns
    = <GetIndexedGlobalGen e.ExtractedPatterns> : e.IndexedGlobalGen
    = <Map
        {
          (e.ConcretePattern)
            = <GenericMatch (e.ConcretePattern) (e.IndexedGlobalGen)>
              : Clear e.GenericMatch
            = (e.GenericMatch);
        }
        e.ExtractedPatterns
      >
      : e.GenericMatches
    = <GetVariableMatches e.GenericMatches (e.IndexedGlobalGen)>
      : e.VariableMatchesDict
    = <StaticCandidates e.VariableMatchesDict> : e.StaticCandidates
    = <FilterUnrepeatedStaticParams e.StaticCandidates (e.GenericMatches)>
    : {
        /* пусто */ = /* нет статических переменных, пропускаем */;

        e.StaticParams
          = <MarkupVarsInPattern (e.StaticParams) e.IndexedGlobalGen> : e.Pattern
          = ((e.Name) e.Pattern);
      };
}

GetIndexedGlobalGen {
  e.Patterns
    = <GlobalGen e.Patterns> : e.GlobalGen
    = <FillIndexes (e.GlobalGen) 't'> : e.GlobalGen^
    = <FillIndexes (e.GlobalGen) 'e'> : e.GlobalGen^
    = <FillIndexes (e.GlobalGen) 's'> : e.GlobalGen^
    = e.GlobalGen;
}

FillIndexes {
  (e.GlobalGen) s.Type
    = <FillIndexesRec (0) (e.GlobalGen) s.Type>
      : (e._) e.IndexedTypeGlobalGens
    = e.IndexedTypeGlobalGens;
}

FillIndexesRec {
  (e.StartIndex) (e.GlobalGen) s.Type
    = <MapAccum
        {
          (e.CurrentIndex) (Var s.Type)
            = Var s.Type e.CurrentIndex
              : e.IndexedVariable
            = <Add e.CurrentIndex 1>
              : e.NewIndex
            = (e.NewIndex) (e.IndexedVariable);

          (e.CurrentIndex) (Var e.Other)
            = (e.CurrentIndex) (Var e.Other);

          (e.CurrentIndex) (Brackets e.Nested)
            = <FillIndexesRec
                (e.CurrentIndex)
                (e.Nested)
                s.Type
              >
              : (e.NextIndex) e.IndexedTypeGlobalGens
            = (e.NextIndex) (Brackets e.IndexedTypeGlobalGens);

          (e.CurrentIndex) (ADT-Brackets (e.Name) e.Nested)
            = <FillIndexesRec
                (e.CurrentIndex)
                (e.Nested)
                s.Type
              >
              : (e.NextIndex) e.IndexedTypeGlobalGens
            = (e.NextIndex) (ADT-Brackets (e.Name) e.IndexedTypeGlobalGens);

          (e.CurrentIndex) (Symbol e.Info) = (e.CurrentIndex) (Symbol e.Info);
        }
        (e.StartIndex) e.GlobalGen
      >
}

GetVariableMatches {
  e.GenericMatches (e.IndexedGlobalGen)
    = <Unique <ExtractVariables-Expr e.IndexedGlobalGen>> : e.Variables

    = <Map
        {
          (s.Mode e.Index) = ((s.Mode e.Index) ':' /* matches */);
        }
        e.Variables
      >
    : e.VariableBags

    = <Reduce
        &GetVariableMatches-FillBag
        (e.VariableBags) e.GenericMatches
      >
    : (e.VariableBags^)

    = e.VariableBags;
}

GetVariableMatches-FillBag {
  (e.VariableBags) (e.Subst)
    = <Reduce
        {
          (e.Bag-B (t.Var ':' e.Matches) e.Bag-E) (e.Val ':' t.Var)
            = (e.Bag-B (t.Var ':' e.Matches (e.Val)) e.Bag-E);
        }
        (e.VariableBags) e.Subst
      >;
}

VarsSameIndex {
  s.Mode ((Var s.Mode e._)) e.Matches = <VarsSameIndex s.Mode e.Matches>;
  s.Mode /* пусто */ = True;
  s.Mode e._ = False;
}

StaticCandidates {
  e.VariableMatchesDict
    = <Map
        {
          ((s.Mode s.Index) ':' e.Matches)
            , <VarsSameIndex s.Mode e.Matches> : True
            = (s.Mode s.Index);

          t.VarMatches = /* пропускаем */;
        }
        e.VariableMatchesDict
      >
}

MarkupVarsInPattern {
  (e.StaticParams) e.Pattern
    = <Map
        {
          (Var s.Mode s.Index)
            , e.StaticParams : e._ (s.Mode s.Index) e._
            = (Var s.Mode 'STAT' <Symb s.Index>);

          (Var s.Mode s.Index) = (Var s.Mode 'dyn' <Symb s.Index>);

          (Symbol e.Info) = (Symbol e.Info);

          (Brackets e.Expr)
            = (Brackets <MarkupVarsInPattern (e.StaticParams) e.Expr>);

          (ADT-Brackets (e.Name) e.Expr)
            = (ADT-Brackets
                (e.Name) <MarkupVarsInPattern (e.StaticParams) e.Expr>
              );
        }
        e.Pattern
      >;
}

FilterUnrepeatedStaticParams {
  e.StaticCandidates (e.GenericMatches)
    = <Map
        (&FilterUnrepeatedStaticParams-CleanupMatch e.StaticCandidates)
        e.GenericMatches
      >
    : e.GenericMatches^
    = <FilterUnrepeatedStaticParams-RemoveBad
        e.StaticCandidates (e.GenericMatches)
      >;
}

FilterUnrepeatedStaticParams-CleanupMatch {
  e.StaticCandidates (e.Substitution)
    = <Map
        {
          (t.MappedVar ':' t.StaticParam)
            , e.StaticCandidates : e._ t.StaticParam e._
            = (t.MappedVar ':' t.StaticParam);

          t._other_mapping = /* пропускаем его */;
        }
        e.Substitution
      >
    : e.Substitution^
    = (e.Substitution);
}

FilterUnrepeatedStaticParams-RemoveBad {
  e.StaticCandidates-B t.BadParam e.StaticCandidates-E (e.GenericMatches)
    , e.GenericMatches : e._ (e.Subst) e._
    , e.Subst : e._ (t.MappedVar ':' t.BadParam) e._ (t.MappedVar ':' t._) e._
    = <FilterUnrepeatedStaticParams
        e.StaticCandidates-B e.StaticCandidates-E (e.GenericMatches)
      >;

  e.StaticCandidates (e.GenericMatches) = e.StaticCandidates;
}

FilterSpecPatterns {
  e.SpecializableDict (e.Forbidden)
    = <MapAccum
        {
          (e.Forbidden-B (e.Name) e.Forbidden-E)
          ((e.Name) e.Pattern)
            = (e.Forbidden-B (e.Name) e.Forbidden-E)
              /* пропускаем */;

          (e.Forbidden^) ((e.Name) e.Pattern)
            = (e.Forbidden) (Spec (e.Name) e.Pattern);
        }
        (e.Forbidden)
        e.SpecializableDict
      >
    : (e._) e.SpecDirectives
    = e.SpecDirectives
}
