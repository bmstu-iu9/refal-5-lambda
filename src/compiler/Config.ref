/*
  Внутреннее представление:

  [Config (s.Option e.Value)*]
*/
$ENUM Config;

/**
  <Config-Create> == t.Config
*/
$ENTRY Config-Create {
  /* пусто */
    = [Config
        (CppCompiler
          NoCppCompilerExe NoCppCompilerLib
          /* флаги */
          (/* конец командной строки для exe */)
          (/* конец командной строки для библиотек */)
        )
        (Optimize /* пусто */)
        (WarningIds
          nul-in-compound pseudofunctions repeated deprecated intrinsic
          pseudocomment
        )
        (WarningIdsAsErrors /* пусто */)
        (ErrorFile /* пусто */)
        (DebugMode NoMarkupContext NoDebugInfo)
        (GrammarCheck NormalRun)
        (TargetFileName DefaultTargetFileName)
        (TargetMode DefaultEXE)
        (TargetSuffix ('.EXE') ('.DLL'))
        (Folders /* пусто */)
        (Prefix /* пусто */)
        (References /* пусто */)
        (Incorporateds /* пусто */)
        (ChmodXCommand /* пусто */)
        (Prelude /* пусто */)
        (Refal5Mode Extended)
        (LogFile /* пусто */)
        (TreeOptCycles 100)
        (KeepRasls False)
        (TempDir /* пусто */)
        (OverwriteExistRasls True)
        (NoSources False)
        (Verbose 0)
      ];
}

/**
  <Config-GetCppCompiler t.Config s.CompilerVariant>
    == NoCppCompiler
    == (e.CppCompiler) e.Flags (e.CommandLineSuffix)

  s.CompileVariant ::= EXE | LIB
*/
$ENTRY Config-GetCppCompiler {
  [Config
    e.Params-B
    (CppCompiler
      NoCppCompilerExe t.CppCompilerLib e.Flags (e.ExeSuf) (e.LibSuf)
    )
    e.Params-E
  ]
  EXE
    = NoCppCompiler;

  [Config
    e.Params-B
    (CppCompiler
      (e.CppCompilerExe) t.CppCompilerLib e.Flags (e.ExeSuf) (e.LibSuf)
    )
    e.Params-E
  ]
  EXE
    = (e.CppCompilerExe) e.Flags (e.ExeSuf);

  [Config
    e.Params-B
    (CppCompiler
      t.CppCompilerExe NoCppCompilerLib e.Flags (e.ExeSuf) (e.LibSuf)
    )
    e.Params-E
  ]
  LIB
    = NoCppCompiler;

  [Config
    e.Params-B
    (CppCompiler
      t.CppCompilerExe (e.CppCompilerLib) e.Flags (e.ExeSuf) (e.LibSuf)
    )
    e.Params-E
  ]
  LIB
    = (e.CppCompilerLib) e.Flags (e.LibSuf);
}

/**
  <Config-SetCppCompiler t.Config s.CompileVariant e.CppCompiler>
    == Success t.Config
*/
$ENTRY Config-SetCppCompiler {
  [Config
    e.Params-B
    (CppCompiler t.OldCompilerExe t.CppCompilerLib e.Flags) e.Params-E
  ]
  EXE e.CppCompilerExe
    = Success
      [Config
        e.Params-B
        (CppCompiler (e.CppCompilerExe) t.CppCompilerLib e.Flags)
        e.Params-E
      ];

  [Config
    e.Params-B
    (CppCompiler t.CppCompilerExe t.OldCompilerLib e.Flags) e.Params-E
  ]
  LIB e.CppCompilerLib
    = Success
      [Config
        e.Params-B
        (CppCompiler t.CppCompilerExe (e.CppCompilerLib) e.Flags)
        e.Params-E
      ];
}

/**
  <Config-SetCppCompilerSuf t.Config s.CompileVariant e.CppCompilerSuf>
    == Success t.Config
*/
$ENTRY Config-SetCppCompilerSuf {
  [Config
    e.Params-B
    (CppCompiler
      t.CppCompilerExe t.CppCompilerLib e.Flags (e.OldExeSuf) (e.LibSuf)
    )
    e.Params-E
  ]
  EXE e.ExeSuf
    = Success
      [Config
        e.Params-B
        (CppCompiler
           t.CppCompilerExe t.CppCompilerLib e.Flags (e.ExeSuf) (e.LibSuf)
        )
        e.Params-E
      ];

  [Config
    e.Params-B
    (CppCompiler
      t.CppCompilerExe t.CppCompilerLib e.Flags (e.ExeSuf) (e.OldLibSuf)
    )
    e.Params-E
  ]
  LIB e.LibSuf
    = Success
      [Config
        e.Params-B
        (CppCompiler
           t.CppCompilerExe t.CppCompilerLib e.Flags (e.ExeSuf) (e.LibSuf)
        )
        e.Params-E
      ];
}

/**
  <Config-SetCompilerFlags t.Config e.Flags> == Success t.Config
*/
$ENTRY Config-SetCompilerFlags {
  [Config
    e.Params-B
    (CppCompiler t.CppCompiler e.Flags (e.ExeSuf) (e.LibSuf))
    e.Params-E
  ]
  e.NewFlags
    = Success
      [Config
        e.Params-B
        (CppCompiler t.CppCompiler e.Flags e.NewFlags (e.ExeSuf) (e.LibSuf))
        e.Params-E
      ];
}

/**
  <Config-GetGenMode t.Config>
    == OnlyDirect
    == OnlyInterpret
*/
$ENTRY Config-GetGenMode {
  [Config e.Params-B (Optimize e.Opt-B OptDirect e.Opt-E) e.Params-E]
    = OnlyDirect;

  [Config e.Params] = OnlyInterpret;
}

/**
  <Config-GetOptPattern t.Config>
    == Disjoint
    == Conjoint
*/
$ENTRY Config-GetOptPattern {
  /*
    Заглушка оставлена на случай будущих новых экспериментов с алгоритмом
    совместного сопоставления с образцом.
  */
  [Config e.Params-B (Optimize e.Opt-B OptPatternExt e.Opt-E) e.Params-E]
    = Conjoint;

  [Config e.Params-B (Optimize e.Opt-B OptPattern e.Opt-E) e.Params-E]
    = Conjoint;

  [Config e.Params] = Disjoint;
}

/**
  <Config-GetOptResult t.Config>
    == NoOpt
    == OptResult
*/
$ENTRY Config-GetOptResult {
  [Config e.Params-B (Optimize e.Opt-B OptResult e.Opt-E) e.Params-E]
    = OptResult;

  [Config e.Params] = NoOpt;
}

/**
  <Config-GetConditionsMode t.Config>
    == Conditions-Native
    == Conditions-Transform
*/
$ENTRY Config-GetConditionsMode {
  [Config e.Params-B (Optimize e.Opt-B OptConditions e.Opt-E) e.Params-E]
    = Conditions-Native;

  [Config e.Params] = Conditions-Transform;
}

/**
  <Config-GetOptTree t.Config>
    == NoOpt
    == OptTree
*/
$ENTRY Config-GetOptTree {
  [Config e.Params-B (Optimize e.Opt-B OptTree e.Opt-E) e.Params-E]
    = OptTree;

  [Config e.Params] = NoOpt;
}

/**
  <Config-GetOptDrive t.Config>
    == NoOpt
    == OptInline
    == OptDrive
*/
$ENTRY Config-GetOptDrive {
  [Config e.Params-B (Optimize e.Opt-B OptDrive e.Opt-E) e.Params-E]
    = OptDrive;

  [Config e.Params-B (Optimize e.Opt-B OptInline e.Opt-E) e.Params-E]
    = OptInline;

  [Config e.Params] = NoOpt;
}

/**
  <Config-GetOptAutoMarkup t.Config>
    == NoOpt
    == OptAutoMarkup
*/
$ENTRY Config-GetOptAutoMarkup {
  [Config e.Params-B (Optimize e.Opt-B OptAutoMarkup e.Opt-E) e.Params-E]
    = OptAutoMarkup;

  [Config e.Params] = NoOpt;
}

/**
  <Config-GetOptIntrinsic t.Config>
    == NoOpt
    == OptIntrinsic
*/
$ENTRY Config-GetOptIntrinsic {
  [Config e.Params-B (Optimize e.Opt-B OptIntrinsic e.Opt-E) e.Params-E]
    = OptIntrinsic;

  [Config e.Params] = NoOpt;
}

/**
  <Config-GetOptSpec t.Config>
    == NoOpt
    == OptSpec
*/
$ENTRY Config-GetOptSpec {
  [Config e.Params-B (Optimize e.Opt-B OptSpec e.Opt-E) e.Params-E]
    = OptSpec;

  [Config e.Params] = NoOpt;
}

/**
  <Config-GetOptGlobal t.Config>
    == NoOpt
    == OptGlobal
*/
$ENTRY Config-GetOptGlobal {
  [Config e.Params-B (Optimize e.Opt-B OptGlobal e.Opt-E) e.Params-E]
    = OptGlobal;

  [Config e.Params] = NoOpt;
}

/**
  <Config-SetOptFlags t.Config e.Flags>
    == Success t.Config
    == Fails BadValue-Opt e.Letters

  e.Flags ::= s.Letter* s.Change?
  s.Letter ::= 'd' | 'i' | 'A' | 'C' | 'D' | 'G' | 'I' | 'P' | 'R' | 'S' | 'T'
  s.Change ::= '+' | '-' | '='
*/
$ENTRY Config-SetOptFlags {
  [Config e.Params-B (Optimize e.OldFlags) e.Params-E] e.NewFlags
    = <ParseOptFlags e.NewFlags>
    : {
        Success e.NewFlags^ s.FnChange
          = Success
            [Config
              e.Params-B
              (Optimize <s.FnChange (e.OldFlags) e.NewFlags>)
              e.Params-E
            ];

        Fails e.NotParsed s.FnChange
          = Fails BadValue-Opt e.NotParsed;
      };
}

ParseOptFlags {
  e.Flags '+' = <ParseOptLetters () e.Flags> &Opt-Add;
  e.Flags '-' = <ParseOptLetters () e.Flags> &Opt-Remove;
  e.Flags '=' = <ParseOptLetters () e.Flags> &Opt-Assign;
  e.Flags /* по умолчанию */ = <ParseOptLetters () e.Flags> &Opt-Add;
}

ParseOptLetters {
  (e.Scanned) s.Flag e.Flags
     , <ValidFlag s.Flag> : True e.FlagNames
     = <ParseOptLetters (e.Scanned e.FlagNames) e.Flags>;

  (e.Scanned) /* пусто */ = Success <Flags-Unique e.Scanned>;

  (e.Scanned) e.Unparsed = Fails e.Unparsed;
}

ValidFlag {
  /* См. Config-GetOptPattern */
  'Q' = True OptPatternExt;
  'P' = True OptPattern;
  'R' = True OptResult;
  'd' = True OptDirect;
  'C' = True OptConditions;
  'T' = True OptTree;
  'D' = True OptTree OptDrive;
  'I' = True OptTree OptInline;
  'S' = True OptTree OptSpec;
  'A' = True OptTree OptAutoMarkup;
  'i' = True OptTree OptIntrinsic;
  'G' = True OptGlobal;

  'x' = True /* пусто */;
  'y' = True /* пусто */;
  'z' = True /* пусто */;

  s.Other = False;
}

Flags-Unique {
  e.Flags-B s.Repeated e.Flags-M s.Repeated e.Flags-E
    = <Flags-Unique e.Flags-B s.Repeated e.Flags-M e.Flags-E>;

  e.Flags = e.Flags;
}

Opt-Add {
  (e.OldFlags-B s.Repeated e.OldFlags-E) s.Repeated e.NewFlags
    = <Opt-Add (e.OldFlags-B s.Repeated e.OldFlags-E) e.NewFlags>;

  (e.OldFlags) s.NextNewFlag e.NewFlags
    = <Opt-Add (e.OldFlags s.NextNewFlag) e.NewFlags>;

  (e.OldFlags) /* пусто */ = e.OldFlags;
}

Opt-Remove {
  (e.OldFlags-B s.Repeated e.OldFlags-E) s.Repeated e.NewFlags
    = <Opt-Remove (e.OldFlags-B e.OldFlags-E) e.NewFlags>;

  (e.OldFlags) s.NextNewFlag e.NewFlags = <Opt-Remove (e.OldFlags) e.NewFlags>;

  (e.OldFlags) /* пусто */ = e.OldFlags;
}

Opt-Assign {
  (e.OldFlags) e.NewFlags = e.NewFlags;
}

/**
  <Config-GetWarningIdsAsErrors t.Config>
    == WarningId*
*/
$ENTRY Config-GetWarningIdsAsErrors {
  [Config e._ (WarningIdsAsErrors e.WarningIds) e._]
    = e.WarningIds;
}

/**
  <Config-GetWarningIds t.Config>
    == WarningId*
*/
$ENTRY Config-GetWarningIds {
  [Config e._ (WarningIds e.WarningIds) e._]
    = e.WarningIds;
}

/**
  <Config-SetWarning t.Config e.WarningName>
    == Success t.Config
    == Fails BadValue-Warning e.WarningName

  e.WarningName ::= 'no-'? e.Error | 'no-'? e.WarningIdName | 'all'
  e.Error ::= 'error' ('=' e.WarningName)?
  e.WarningIdName ::= s.CHAR*

*/
$ENTRY Config-SetWarning {
  [Config
    e.Params-B
    (WarningIds e.OldIds)
    (WarningIdsAsErrors e.OldIdsAsErrors)
    e.Params-E
  ]
  e.WarningName
    = <ParseWarningNames e.WarningName>
    : {
        Success WarningIds e.NewIds s.FnChange
          = Success
            [Config
              e.Params-B
              (WarningIds <s.FnChange (e.OldIds) e.NewIds>)
              (WarningIdsAsErrors e.OldIdsAsErrors)
              e.Params-E
            ];
        Success WarningIdsAsErrors s.NewIdAsError s.FnChange EnableWarning
          = Success
            [Config
              e.Params-B
              (WarningIds
                <s.FnChange
                  (e.OldIds)
                  s.NewIdAsError
                >
              )
              (WarningIdsAsErrors
                <s.FnChange
                  (e.OldIdsAsErrors)
                  s.NewIdAsError
                >
              )
              e.Params-E
            ];
        Success WarningIdsAsErrors e.NewIdsAsErrors s.FnChange Nop
          = Success
            [Config
              e.Params-B
              (WarningIds e.OldIds)
              (WarningIdsAsErrors
                <s.FnChange
                  (e.OldIdsAsErrors)
                  e.NewIdsAsErrors
                >
              )
              e.Params-E
            ];
        Fails e.NotParsed
          = Fails BadValue-Warning e.NotParsed;
      };
}

ParseWarningNames {
  e.Warning, <ValidWarningId e.Warning>
    : True (e.WarningIds) s.FnChange
    = Success WarningIds e.WarningIds s.FnChange;
  e.Warning, <ValidWarningIdAsError e.Warning>
    : True (e.WarningIdsAsErrors) s.FnChange s.Action
    = Success WarningIdsAsErrors e.WarningIdsAsErrors s.FnChange s.Action;

  e.Unparsed = Fails e.Unparsed;
}

ValidWarningIdAsError{
  'no-' e.Name, <ValidWarningAsId e.Name> : True (e.Ids) s.Action
    = True (e.Ids) &WarningIds-Remove s.Action;
  e.Name, <ValidWarningAsId e.Name> : True (e.Ids) s.Action
    = True (e.Ids) &WarningIds-Add s.Action;

  e.Other = False;
}

ValidWarningAsId {
  'error'
    = True <Config-AllWarningIds> Nop;
  'error=' e.Name, <WarningForName e.Name> : True s.Id
    = True (s.Id) EnableWarning;

  e.Other = False;
}

ValidWarningId {
  'all'
    = True <Config-AllWarningIds> &WarningIds-Add;
  'no-' e.Name, <WarningForName e.Name> : True s.Id
    = True (s.Id) &WarningIds-Remove;
  e.Name, <WarningForName e.Name> : True s.Id
    = True (s.Id) &WarningIds-Add;

  e.Other = False;
}

WarningForName {
  'screening' = True screening;
  'multiscreening' = True multiscreening;
  'multiscreening5' = True multiscreening5;
  'nul-in-compound' = True nul-in-compound;
  'pseudocomments' = True pseudocomment;        /* синоним */
  'pseudocomment' = True pseudocomment;
  'pseudofunctions' = True pseudofunctions;
  'pseudofunction' = True pseudofunctions;      /* синоним */
  'repeated' = True repeated;
  'deprecated' = True deprecated;
  'intrinsic' = True intrinsic;

  e.Other = False
}

$ENTRY Config-AllWarningIds {
  /* пусто */
    = (
        screening nul-in-compound pseudocomment pseudofunctions repeated
        deprecated intrinsic
      )
}

WarningIds-Add {
  (e.OldIds-B s.Repeated e.OldIds-E) s.Repeated e.NewIds
    = <WarningIds-Add (e.OldIds-B s.Repeated e.OldIds-E) e.NewIds>;
  (e.OldIds) s.NextNewId e.NewIds
    = <WarningIds-Add (e.OldIds s.NextNewId) e.NewIds>;

  (e.OldIds) /* пусто */ = e.OldIds;
}

WarningIds-Remove {
  (e.OldIds-B s.Repeated e.OldIds-E) s.Repeated e.NewIds
    = <WarningIds-Remove (e.OldIds-B e.OldIds-E) e.NewIds>;
  (e.OldIds) s.NextNewId e.NewIds
    = <WarningIds-Remove (e.OldIds) e.NewIds>;

  (e.OldIds) /* пусто */ = e.OldIds;
}

/**
  <Config-GetErrorFile t.Config>
    == NoErrorFile
    == ErrorFile e.ErrorFile
*/
$ENTRY Config-GetErrorFile {
  [Config e.Params-B (ErrorFile) e.Params-E] = NoErrorFile;

  [Config e.Params-B (ErrorFile e.ErrorFile) e.Params-E]
    = ErrorFile e.ErrorFile;
}

/**
  <Config-SetErrorFile t.Cofnig e.ErrorFile>
    == Success t.Config
    == Fails EmptyErrorFileName
*/
$ENTRY Config-SetErrorFile {
  [Config e.Params] /* пусто */ = Fails EmptyErrorFileName;

  [Config e.Params-B (ErrorFile e.OldErrorFile) e.Params-E]
  e.NewErrorFile
    = Success [Config e.Params-B (ErrorFile e.NewErrorFile) e.Params-E];
}

/**
  <Config-GetDebugMode t.Config>
    == s.MarkupContext s.DebuggerInfo

  s.MarkupContext ::= MarkupContext | NoMarkupContext
  s.DebuggerInfo ::= DebugInfo | NoDebugInfo
*/
$ENTRY Config-GetDebugMode {
  [Config e.Params-B (DebugMode s.MarkupContext s.DebuggerInfo) e.Params-E]
    = s.MarkupContext s.DebuggerInfo;
}

/**
  <Config-SetMarkupContext t.Config>
    == Success t.Config
*/
$ENTRY Config-SetMarkupContext {
  [Config e.Params-B (DebugMode s.MarkupContext s.DebuggerInfo) e.Params-E]
    = Success
      [Config e.Params-B (DebugMode MarkupContext s.DebuggerInfo) e.Params-E];
}

/**
  <Config-SetDebuggerInfo t.Context>
    == Success t.Config
*/
$ENTRY Config-SetDebugInfo {
  [Config e.Params-B (DebugMode s.MarkupContext s.DebuggerInfo) e.Params-E]
    = Success
      [Config e.Params-B (DebugMode s.MarkupContext DebugInfo) e.Params-E];
}

/**
  <Config-GetGrammarCheck t.Config>
    == s.GrammarCheck

  s.GrammarCheck ::= NormalRun | GrammarCheck
*/
$ENTRY Config-GetGrammarCheck {
  [Config e.Params-B (GrammarCheck s.GrammarCheck) e.Params-E]
    = s.GrammarCheck;
}

/**
  <Config-SetGrammarCheck t.Config>
    == Success t.Config
*/
$ENTRY Config-SetGrammarCheck {
  [Config e.Params-B (GrammarCheck s.GrammarCheck) e.Params-E]
    = Success [Config e.Params-B (GrammarCheck GrammarCheck) e.Params-E];
}

/**
  <Config-GetTargetFileName t.Config>
    == DefaultTargetFileName
    == e.TargetFileName
*/
$ENTRY Config-GetTargetFileName {
  [Config e.Params-B (TargetFileName DefaultTargetFileName) e.Params-E]
    = DefaultTargetFileName;

  [Config e.Params-B (TargetFileName e.TargetFileName) e.Params-E]
    = e.TargetFileName;
}

/**
  <Config-SetTargetFileName t.Config e.FileName>
    == Success t.Config
*/
$ENTRY Config-SetTargetFileName {
  [Config e.Params-B (TargetFileName e.OldTargetFileName) e.Params-E]
  e.NewTargetFileName
    = Success
      [Config
        e.Params-B (TargetFileName e.NewTargetFileName) e.Params-E
      ];
}

/**
  <Config-GetTargetSuffix t.Config s.TargetMode>
    == e.TargetSuffix
*/
$ENTRY Config-GetTargetSuffix {
  [Config
    e.Params-B
    (TargetSuffix (e.TargetSuffixExe) (e.TargetSuffixLib))
    e.Params-E
  ]
  EXE
    = e.TargetSuffixExe;

  [Config
    e.Params-B
    (TargetSuffix (e.TargetSuffixExe) (e.TargetSuffixLib))
    e.Params-E
  ]
  LIB
    = e.TargetSuffixLib;

  [Config e.Params] R = '.rasl-module';

  [Config e.Params] CompileOnly = /* пусто, потому что не важно */;
}

/**
  <Config-SetTargetSuffix t.Config s.CompileVariant e.Suffix>
    == Success t.Config
*/
$ENTRY Config-SetTargetSuffix {
  [Config
    e.Params-B
    (TargetSuffix (e.OldTargetSuffixExe) (e.TargetSuffixLib))
    e.Params-E
  ]
  EXE e.NewTargetSuffixExe
    = Success
      [Config
        e.Params-B
        (TargetSuffix (e.NewTargetSuffixExe) (e.TargetSuffixLib))
        e.Params-E
      ];

  [Config
    e.Params-B
    (TargetSuffix (e.TargetSuffixExe) (e.OldTargetSuffixLib))
    e.Params-E
  ]
  LIB e.NewTargetSuffixLib
    = Success
      [Config
        e.Params-B
        (TargetSuffix (e.TargetSuffixExe) (e.NewTargetSuffixLib))
        e.Params-E
      ];
}

/**
  <Config-GetSearchFolders t.Config>
    == (e.Folder)*
*/
$ENTRY Config-GetSearchFolders {
  [Config e.Params-B (Folders e.Folders) e.Params-E] = e.Folders;
}

/**
  <Config-SetSearchFolder t.Config e.Folder> == t.Config
*/
$ENTRY Config-SetSearchFolder {
  [Config e.Params-B (Folders e.Folders) e.Params-E] REF5RSL
    = [Config e.Params-B (Folders e.Folders REF5RSL) e.Params-E];

  [Config e.Params-B (Folders e.Folders) e.Params-E] e.NewFolder
    = [Config e.Params-B (Folders e.Folders (e.NewFolder)) e.Params-E];
}

/**
  <Config-GetPrefix t.Config>
    == e.Prefix

  При этом пустое значение префикса является допустимым — это означает,
  что пользователь его не указал.
*/
$ENTRY Config-GetPrefix {
  [Config e.Params-B (Prefix e.Prefix) e.Params-E]
    = e.Prefix;
}

/**
  <Config-SetPrefix t.Config e.Prefix>
    == Success t.Config
*/
$ENTRY Config-SetPrefix {
  [Config e.Params-B (Prefix e.OldPrefix) e.Params-E] e.NewPrefix
    = Success [Config e.Params-B (Prefix e.NewPrefix) e.Params-E];
}

/**
  <Config-GetReferences t.Config>
    == (e.Reference)*
*/
$ENTRY Config-GetReferences {
  [Config e.Params-B (References e.References) e.Params-E]
    = e.References;
}

/**
  <Config-AddReference t.Config e.Reference>
    = Success t.Config
*/
$ENTRY Config-AddReference {
  [Config e.Params-B (References e.References) e.Params-E] e.NewReference
    = Success
      [Config
        e.Params-B (References e.References (e.NewReference)) e.Params-E
      ];
}

/**
  <Config-GetTargetMode t.Config>
    == s.TargetMode

  s.TargetMode ::= EXE | LIB | R | CompileOnly
*/
$ENTRY Config-GetTargetMode {
  [Config e.Params-B (TargetMode DefaultEXE) e.Params-E]
    = EXE;

  [Config e.Params-B (TargetMode s.TargetMode) e.Params-E]
    = s.TargetMode;
}

/**
  <Config-SetTargetMode t.Config s.TargetMode>
    == Success t.Config
    == Fails TargetModeAlreadySet
*/
$ENTRY Config-SetTargetMode {
  [Config e.Params-B (TargetMode DefaultEXE) e.Params-E] s.NewTargetMode
    = Success
      [Config e.Params-B (TargetMode s.NewTargetMode) e.Params-E];

  /* Допускаем повторное определение того же режима */
  [Config e.Params-B (TargetMode s.TargetMode) e.Params-E] s.TargetMode
    = Success [Config e.Params-B (TargetMode s.TargetMode) e.Params-E];

  [Config e.Params-B (TargetMode s.OldTargetMode) e.Params-E] e.NewTargetMode
    = Fails TargetModeAlreadySet;
}

/**
  <Config-GetIncorporateds t.Config>
    == (e.IncorporatedName)*
*/
$ENTRY Config-GetIncorporateds {
  [Config e.Params-B (Incorporateds e.Incorporateds) e.Params-E]
    = e.Incorporateds;
}

/**
  <Config-AddIncorporated t.Config e.IncorporatedName>
    == Success t.Config
*/
$ENTRY Config-AddIncorporated {
  [Config e.Params-B (Incorporateds e.Incorporateds) e.Params-E]
  e.IncorporatedName
    = Success
      [Config
        e.Params-B
        (Incorporateds e.Incorporateds (e.IncorporatedName))
        e.Params-E
      ];
}

/**
  <Config-GetChmodXCommand t.Config>
    == e.ChmodXCommand
*/
$ENTRY Config-GetChmodXCommand {
  [Config e.Params-B (ChmodXCommand e.Command) e.Params-E]
    = e.Command;
}

/**
  <Config-SetChmodXCommand t.Config>
    == Success t.Config
*/
$ENTRY Config-SetChmodXCommand {
  [Config e.Params-B (ChmodXCommand e.OldCommand) e.Params-E]
  e.NewCommand
    = Success [Config e.Params-B (ChmodXCommand e.NewCommand) e.Params-E];
}

/**
  <Config-GetPrelude t.Config> == e.Prelude

  Пустое значение является допустимым — означает, что стандартное вступление
  подключать не надо.
*/
$ENTRY Config-GetPrelude {
  [Config e.Params-B (Prelude e.Prelude) e.Params-E] = e.Prelude;
}

/**
  <Config-SetPrelude t.Config e.Prelude>
    == Success t.Config
*/
$ENTRY Config-SetPrelude {
  [Config e.Params-B (Prelude e.OldPrelude) e.Params-E] e.NewPrelude
    = Success [Config e.Params-B (Prelude e.NewPrelude) e.Params-E];
}

/**
  <Config-GetR5Mode t.Config> == s.Refal5Mode
  s.Refal5Mode ::= Classic | Extended
*/
$ENTRY Config-GetR5Mode {
  [Config e.Params-B (Refal5Mode s.Mode) e.Params-E] = s.Mode;
}

/**
  <Config-SetR5Mode t.Config s.Refal5Mode> == Success t.Config
*/
$ENTRY Config-SetR5Mode {
  [Config e.Params-B (Refal5Mode s.OldMode) e.Params-E] s.NewMode
    = Success [Config e.Params-B (Refal5Mode s.NewMode) e.Params-E];
}

/**
  <Config-GetLogFile t.Config> == e.LogFile
*/
$ENTRY Config-GetLogFile {
  [Config e.Params-B (LogFile e.LogFile) e.Params-E] = e.LogFile;
}

/**
  <Config-SetLogFile t.Config e.LogFile>
    == Success t.Config
*/
$ENTRY Config-SetLogFile {
  [Config e.Params-B (LogFile e.OldLogFile) e.Params-E] e.NewLogFile
    = Success [Config e.Params-B (LogFile e.NewLogFile) e.Params-E];
}

/**
  <Config-GetTreeOptCycles t.Config> == s.TreeOptCycles
  s.TreeOptCycles ::= s.NUMBER
*/
$ENTRY Config-GetTreeOptCycles {
  [Config e.Params-B (TreeOptCycles s.Cycles) e.Params-E] = s.Cycles;
}

/**
  <Config-SetTreeOptCycles t.Config e.Cycles>
    == Success t.Config
    == Fails BadValue-MustBeNumber e.Cycles
*/
$ENTRY Config-SetTreeOptCycles {
  [Config e.Params-B (TreeOptCycles s.OldCycles) e.Params-E] e.NewCycles
    = <ParseNumber e.NewCycles>
    : {
        Success s.NewCycles
          = Success
            [Config e.Params-B (TreeOptCycles s.NewCycles) e.Params-E];

        e.OtherResult = Fails BadValue-MustBeNumber e.NewCycles;
      };
}

ParseNumber {
  /* пусто */ = Fails;

  e.String-B s.NotADigit e.String-E
    , <IsDigit s.NotADigit> : False
    = Fails;

  e.Digits
    , <Numb e.Digits>
    : {
        s.Number = Success s.Number;
        e.BigNumber = Fails;
      };
}

IsDigit {
  s.Digit, <Type s.Digit> : 'D0' s._ = True;
  s.Digit = False;
}

/**
  <Config-GetKeepRasls t.Config> == s.Bool
*/
$ENTRY Config-GetKeepRasls {
  [Config e.Params-B (KeepRasls s.Value) e.Params-E] = s.Value;
}

/**
  <Config-SetKeepRasls t.Config s.Bool> == Success t.Config
*/
$ENTRY Config-SetKeepRasls {
  [Config e.Params-B (KeepRasls s.OldValue) e.Params-E] s.NewValue
    = Success [Config e.Params-B (KeepRasls s.NewValue) e.Params-E];
}

/**
  <Config-GetTempDir t.Config> == e.TempDir
  e.TempDir ::= Current | s.CHAR+
*/
$ENTRY Config-GetTempDir {
  [Config e.Params-B (TempDir e.DirName) e.Params-E]
    , e.DirName
    : {
        /* пусто */ = Current;
        e.DirName^ = e.DirName;
      }
}

/**
  <Config-SetTempDir t.Config e.DirName> == Success t.Config
*/
$ENTRY Config-SetTempDir {
  [Config e.Params-B (TempDir e.OldDirName) e.Params-E] e.NewDirName
    = Success [Config e.Params-B (TempDir e.NewDirName) e.Params-E];
}

/**
  <Config-GetOverwriteExistRasls t.Config> == s.Bool
*/
$ENTRY Config-GetOverwriteExistRasls {
  [Config e.Params-B (OverwriteExistRasls s.Value) e.Params-E] = s.Value
}

/**
  <Config-SetOverwriteExistRasls t.Config s.Bool> == Success t.Config
*/
$ENTRY Config-SetOverwriteExistRasls {
  [Config e.Params-B (OverwriteExistRasls s.OldValue) e.Params-E] s.NewValue
    = Success [Config e.Params-B (OverwriteExistRasls s.NewValue) e.Params-E];
}

/**
  <Config-GetNoSources t.Config> == s.Bool
*/
$ENTRY Config-GetNoSources {
  [Config e.Params-B (NoSources s.Value) e.Params-E] = s.Value
}

/**
  <Config-SetNoSources t.Config s.Bool> == Success t.Config
*/
$ENTRY Config-SetNoSources {
  [Config e.Params-B (NoSources s.OldValue) e.Params-E] s.NewValue
    = Success [Config e.Params-B (NoSources s.NewValue) e.Params-E];
}


/**
  <Config-GetVerbose t.Config> == s.NUMBER
*/
$ENTRY Config-GetVerbose {
  [Config e.Params-B (Verbose s.Level) e.Params-E] = s.Level
}

/**
  <Config-IncVerbose t.Config> == Success t.Config
*/
$ENTRY Config-IncVerbose {
  [Config e.Params-B (Verbose s.Level) e.Params-E]
    = Success [Config e.Params-B (Verbose <+1 s.Level>) e.Params-E];
}

/**
  <Config-SetVerbose t.Config e.VerboseLevel>
    == Success t.Config
    == Fails BadValue-MustBeNumber e.VerboseLevel
*/
$ENTRY Config-SetVerbose {
  [Config e.Params-B (Verbose s.Level) e.Params-E] e.NewLevel
    , <ParseNumber e.NewLevel> : Success s.NewLevel
    = Success [Config e.Params-B (Verbose s.NewLevel) e.Params-E];

  t.Config e.BadLevel = Fails BadValue-MustBeNumber e.BadLevel;
}
