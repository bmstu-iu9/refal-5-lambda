$INCLUDE "LibraryEx";

*$FROM GST
$EXTERN GST;

*$FROM HighLevelRASL-Common
$EXTERN TextFromExpr, Inc2, CollectStrings;


/**
  <GenResult-Opt
    s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.Result
  >
    == s.ContextOffset^ e.ResultCommands

  e.MarkedPattern — не используется
*/
$ENTRY GenResult-Opt {
  s.ContextOffset (e.PatternVars) (e.MarkedPattern) e.Result

    = <GST
        ((LEFT-EDGE) e.MarkedPattern (RIGHT-EDGE))
        ((LEFT-EDGE) <FlatResult e.Result> (RIGHT-EDGE))
      >
    : (e.Trash) (e.MarkedResult)

    = <AddOffsets s.ContextOffset (e.PatternVars) e.MarkedResult>
    : s.ContextOffset^ e.MarkedResult^

    = s.ContextOffset
      (CmdResetAllocator)
      <GenResult-Aux (e.Trash) (e.MarkedResult)>
      (CmdNextStep);
}

FlatResult {
  e.Range-B (CallBrackets e.SubRange) e.Range-E
    = <FlatResult e.Range-B>
      (TkOpenCall)
      <FlatResult e.SubRange>
      (TkCloseCall)
      <FlatResult e.Range-E>;

  e.Range-B (Brackets e.SubRange) e.Range-E
    = <FlatResult e.Range-B>
      (TkOpenBracket)
      <FlatResult e.SubRange>
      (TkCloseBracket)
      <FlatResult e.Range-E>;

  e.Range-B (ADT-Brackets (e.Name) e.SubRange) e.Range-E
    = <FlatResult e.Range-B>
      (TkOpenADT)
      (Symbol Name e.Name)
      <FlatResult e.SubRange>
      (TkCloseADT)
      <FlatResult e.Range-E>;

  e.Range-B (ClosureBrackets e.SubRange) e.Range-E
    = e.Range-B
      (TkClosureHead)
      <FlatResult e.SubRange>
      (TkUnwrappedClosure)
      <FlatResult e.Range-E>;

  e.Range = e.Range;
}

/*
  Основные команды работы с результатом
   (CmdCreateElem Allocate s.Number s.ElType e.Info)
   (CmdLinkBrackets s.Left s.Right)
   (CmdPushStack s.Number)
   (CmdInsertElem s.Number)
   (CmdInsertVar s.Mode s.Number)
*/

/*
  Порядок выполнения команд.
  1. Все выделения памяти (в порядке перечисления)
  2. Связывание крулых и угловых скобок и
  построение результата (в обратном порядке)
*/

GenResult-Aux {
  (e.Trash) (e.MarkedResult)

    = (CmdComment { = 'TRASH:' <TextFromExpr e.Trash> })
      (CmdComment { = 'RESULT:' <TextFromExpr e.MarkedResult> })

      /* Генерируем команды аллокаций */
      <GenResult-Allocations e.MarkedResult>

      /* Генерируем команды reinit/update */
      <GenResult-ReinitUpdate e.MarkedResult>

      /* Генерируем команды связывания скобок */
      <GenPushLink
        <FlatTilesInResult e.MarkedResult>
      >

      /* Генерируем команды переноса из списка свободных узлов */
      <GenSplices (e.Trash) e.MarkedResult>
    : e.Commands

      /*
        Исправляем логику построения замыканий: они должны сворачиваться
        в самом конце, а также правильно проставляем смещения.
      */
    = <PatchClosureLogic e.Commands>;
}

GenResult-Allocations {
  e.MarkedResult =
    <Map
      {
        (Tile e.Tile) = ;

        (VarCopy 't' e.Index s.SampleOffset s.Offset) =
          (CmdCopyVar 'e' s.Offset s.SampleOffset);

        (VarCopy s.Mode e.Index s.SampleOffset s.Offset) =
          (CmdCopyVar s.Mode s.Offset s.SampleOffset);

        (TkString e.String s.Offset) =
          (CmdCreateElem Allocate s.Offset ElString e.String);

        (e.Elem) = (CmdCreateElem Allocate <CreateElemParam e.Elem>);
      }
      e.MarkedResult
    >;
}

GenResult-ReinitUpdate {
  e.MarkedResult =
    <Map
      {
        (Tile e.Tile) =
          <Map
            {
              (AsIs t.Item) = /* пусто */;

              (HalfReuse (Var 's' e.Index s.SampleOffset s.Offset)) =
                (CmdReinitSVar s.Offset s.SampleOffset);

              (HalfReuse (e.Elem)) =
                (CmdCreateElem Reinit <CreateElemParam e.Elem>);

              (Reuse (e.Elem)) =
                (CmdCreateElem Update <CreateElemParam e.Elem>);

              (LEFT-EDGE) = /* пусто */;
              (RIGHT-EDGE) = /* пусто */;
            }
            e.Tile
          >;

        t.Other = /* пусто */;
      }
      e.MarkedResult
    >;
}

CreateElemParam {
  Symbol Char s.Char s.Offset = s.Offset ElChar s.Char;
  Symbol Number s.Number s.Offset = s.Offset ElNumber s.Number;
  TkOpenBracket s.Offset = s.Offset ElOpenBracket;
  TkCloseBracket s.Offset = s.Offset ElCloseBracket;
  TkOpenADT s.Offset = s.Offset ElOpenADT;
  TkCloseADT s.Offset = s.Offset ElCloseADT;
  TkOpenCall s.Offset = s.Offset ElOpenCall;
  TkCloseCall s.Offset = s.Offset ElCloseCall;
  Symbol Name e.Name s.Offset = s.Offset ElName e.Name;
  Symbol Identifier e.Name s.Offset = s.Offset ElIdent e.Name;
  TkClosureHead s.Offset = s.Offset ElClosureHead;
  TkUnwrappedClosure s.Offset = s.Offset ElUnwrappedClosure;
}

GenPushLink {
  e.MarkedResult
    = <MapAccum
        {
          (e.Stack) (TkOpenCall s.Offset) = (e.Stack s.Offset);
          (e.Stack) (TkOpenADT s.Offset) = (e.Stack s.Offset);
          (e.Stack) (TkOpenBracket s.Offset) = (e.Stack s.Offset);
          (e.Stack) (TkClosureHead s.Offset) = (e.Stack s.Offset);

          (e.Stack s.OpenOffset) (TkCloseCall s.Offset) =
            (e.Stack)
            (CmdPushStack s.OpenOffset)
            (CmdPushStack s.Offset);
          (e.Stack s.OpenOffset) (TkCloseADT s.Offset) =
            (e.Stack) (CmdLinkBrackets s.OpenOffset s.Offset);
          (e.Stack s.OpenOffset) (TkCloseBracket s.Offset) =
            (e.Stack) (CmdLinkBrackets s.OpenOffset s.Offset);
          (e.Stack s.HeadOffset) (TkUnwrappedClosure s.Offset)
            = (e.Stack)
              (PatchCreateUnwrappedClosure s.HeadOffset s.Offset)
              (CmdWrapClosure s.Offset);

          (e.Stack) (s.tag e.Info) = (e.Stack) ;
        }
        (/* стек */)
        e.MarkedResult
      >
    : () e.Commands
    = <Reverse e.Commands>;
}

PatchClosureLogic {
  e.Commands-B (CmdWrapClosure s.Offset) e.Commands-E
    = <PatchClosureLogic e.Commands-B e.Commands-E>
      (CmdWrapClosure s.Offset);

  e.Commands-B
  (CmdCreateElem s.CreateMode s.Offset ElUnwrappedClosure)
  e.Commands-E
  (PatchCreateUnwrappedClosure s.HeadOffset s.Offset)
    = <PatchClosureLogic
        e.Commands-B
        (CmdCreateElem s.CreateMode s.Offset ElUnwrappedClosure s.HeadOffset)
        e.Commands-E
      >;

  e.Commands t.OtherCommand
    = <PatchClosureLogic e.Commands> t.OtherCommand;

  /* empty */ = /* empty */;
}

Reverse {
  e.Items t.Last = t.Last <Reverse e.Items>;

  /* empty */ = /* empty */;
}

FlatTilesInResult {
  e.Result
    = <Map
        {
          (Tile e.Tile)
            = <Map
                {
                  (RIGHT-EDGE) = ;
                  (LEFT-EDGE) = ;
                  (AsIs t.Item) = t.Item;
                  (HalfReuse t.Item) = t.Item;
                  (Reuse t.Item) = t.Item;
                }
                e.Tile
              >;

          (s.tag e.info) = (s.tag e.info);
        }
        e.Result
      >;
}

GenSplices {
  (e.Trash) (Tile e.LeftTile) e.Result (Tile e.RightTile) =
    (CmdSetRes <CalcRes e.RightTile>)
    <Map
      {
        ((AsIs (Var 'e' e.Index s.Offset))) = (CmdInsertVar 'e' s.Offset);

        (t.OneItem) =
          (CmdInsertTile
            <BeginOffset t.OneItem> <EndOffset t.OneItem>
          );

        (t.Begin e.Inner t.End) =
          (CmdInsertTile <BeginOffset t.Begin> <EndOffset t.End>);
      }
      <CollectTiles e.Result>
    >
    <GenTrash (e.LeftTile) e.Trash>;

  (RemovedTile) (Tile e.OneTile) = /* do nothing */;
}

CalcRes {
  (RIGHT-EDGE) = RIGHT-EDGE;

  t.First e.Tile = <BeginOffset t.First>;
}

CollectTiles {
  (Tile e.Tile) e.Other =
    <CollectTiles e.Other> (e.Tile);

  e.Allocated (Tile e.Tile) e.Other =
    <CollectTiles e.Other> (e.Tile) <CollectTiles-Alloc e.Allocated>;

  /* пусто */ = /* пусто */;

  e.Allocated = <CollectTiles-Alloc e.Allocated>;
}

CollectTiles-Alloc {
  (VarCopy 'e' e.Index s.Sample s.Offset) e.Alloc =
    <CollectTiles-Alloc e.Alloc>
    ((VarCopy 'e' e.Index s.Sample s.Offset));

  e.Alloc (VarCopy 'e' e.Index s.Sample s.Offset) =
    ((VarCopy 'e' e.Index s.Sample s.Offset))
    <CollectTiles-Alloc e.Alloc>;

  /* пусто */ = /* пусто */;

  e.Alloc = (e.Alloc);
}

GenTrash {
  (e.LeftTile) e.Trash-B RemovedTile e.Trash-E =
    <GenTrash (e.LeftTile) e.Trash-B e.Trash-E>;

  (e.LeftTile) /* пусто */ =
    (CmdUseRes);

  ((LEFT-EDGE)) e.Trash =
    (CmdTrash LEFT-EDGE);

  (e.LeftTile t.Last) e.Trash =
    (CmdTrash <EndOffset t.Last>);
}

BeginOffset {
  (AsIs t.Item) = <BeginOffset t.Item>;
  (HalfReuse t.Item) = <BeginOffset t.Item>;
  (Reuse t.Item) = <BeginOffset t.Item>;

  (s.Tag e.Info s.Offset) = s.Offset;
}

EndOffset {
  (AsIs t.Item) = <EndOffset t.Item>;
  (HalfReuse t.Item) = <EndOffset t.Item>;
  (Reuse t.Item) = <EndOffset t.Item>;

  (Var 's' e.Index s.Offset) = s.Offset;
  (VarCopy 's' e.Index s.Sample s.Offset) = s.Offset;

  (Var s.Mode e.Index s.Offset) = <Inc s.Offset>;
  (VarCopy s.Mode e.Index s.Sample s.Offset) = <Inc s.Offset>;

  (TkString e.String s.Offset) = <Inc s.Offset>;

  (s.Tag e.Info s.Offset) = s.Offset;
}

/*
  e.PatternVars ::= (s.Mode (e.Index) s.Offset*)*
*/
AddOffsets {
  s.ContextOffset (e.PatternVars) e.MarkedResult =
    /*
      Для переменных смещение брать из e.PatternVars + добавляем смещение
      для копии (+1 для s-переменных, +2 для t и e),
      для остальных элементов --- смещение s.ContextOffset.
    */
    <MapAccum
      {
        s.Offset (Tile e.Tile) =
          s.Offset
          (Tile
            <Map
              {
                (HalfReuse (Var 's' e.Index s.Offset^)) =
                  (HalfReuse
                    (Var
                      <GetSampleOffset e.PatternVars ('s' e.Index)>
                      s.Offset
                    )
                  );

                t.Other = t.Other;
              }
              e.Tile
            >
          );

        s.Offset (Var 's' e.Index) =
          <Add s.Offset 1>
          (VarCopy
            <GetSampleOffset e.PatternVars ('s' e.Index)> s.Offset
          );

        s.Offset (Var 't' e.Index) =
          <Add s.Offset 2>
          (VarCopy
            <GetSampleOffset e.PatternVars ('t' e.Index)> s.Offset
          );

        s.Offset (Var 'e' e.Index) =
          <Add s.Offset 2>
          (VarCopy
            <GetSampleOffset e.PatternVars ('e' e.Index)> s.Offset
          );

        s.Offset (TkString e.String) =
          <Inc2 s.Offset> (TkString e.String s.Offset);

        s.Offset (s.Tag e.Info) = <Inc s.Offset> (s.Tag e.Info s.Offset);
      }
      s.ContextOffset <CollectStrings e.MarkedResult>
    >;
}

GetSampleOffset {
  e._ (s.Mode (e.Index) e.Offsets s.SampleOffset) e._ (s.Mode e.Index)
    = s.Mode e.Index s.SampleOffset;
}
