$INCLUDE "LibraryEx";

//FROM Library
$EXTERN Chr, Symb;

//FROM Escape
$EXTERN EscapeChar, EscapeString, CharFromNum, UnEscapeString-SR;

$ENTRY SR-Scan {
  e.SrcName = <LexFolding <LoadSource e.SrcName>>;
}

LoadSource {
  e.FileName
    = <Map
        {
          (e.Line) = e.Line '\n';
        }
        <LoadFile e.FileName>
      >
    : {
        // Игнорируем метку порядка байт для UTF-8
        '\xEF\xBB\xBF' e.Content = e.Content;

        e.Content = e.Content;
      };
}

LexFolding {
  e.SourceText =
    <NormalizeTokens
      <Root () e.SourceText>
    >;
}

StrDirective {
  #EEnum = 'EENUM';
  #Entry = 'ENTRY';
  #Enum = 'ENUM';
  #Extern = 'EXTERN';
  #Forward = 'FORWARD';
  #Swap = 'SWAP';
  #ESwap = 'ESWAP';
  #Ident = 'LABEL';
  #Include = 'INCLUDE';
  #Spec = 'SPEC';
  #Meta = 'META';
}

$ENTRY SR-StrFromToken {
  #TkChar s.Char = '' <EscapeChar s.Char> '';
  #TkCompound e.Chars = '"' <EscapeString e.Chars> '"';
  #TkCloseADT = '"]"';
  #TkCloseCall = '">"';
  #TkCloseBlock = '"}"';
  #TkCloseBracket = '")"';
  #TkComma = '","';
  #TkDirective s.Directive = '"$' <StrDirective s.Directive> '"';
  #TkEOF = 'end-of-file';
  #TkError e.Message = 'LEXER ERROR: ' e.Message;
  #TkIdentMarker = '"#"';
  #TkName e.Name = 'Name ' e.Name;
  #TkNumber #Cookie1 = 'Number <Cookie1>';
  #TkNumber #Cookie2 = 'Number <Cookie2>';
  #TkNumber s.Number = 'Number ' <Symb s.Number>;
  #TkOpenADT = '"["';
  #TkOpenCall = '"<"';
  #TkOpenBlock = '"{"';
  #TkOpenBracket = '"("';
  #TkReplace = '"="';
  #TkSemicolon = '";"';
  #TkColon = '":"';
  #TkUnexpected e.Unexpected = 'Unexpected characters <' e.Unexpected '>';
  #TkVariable s.Mode e.Index = s.Mode '.' e.Index;
  #TkRedefinition = '"^"';
  #TkNativeBlock e.Block = 'native code insertion';

  # Open s.OpenBracket = <SR-StrFromToken s.OpenBracket>;
  # Close s.CloseBracket = <SR-StrFromToken s.CloseBracket>;
}

NormalizeToken {
  (#TkDirective e.Directive) =
    <ValidDirective e.Directive>;

  (#TkEOF) = (#TkEOF);

  (#TkLiteral-Char s.Char) = (#TkChar s.Char);

  (#TkLiteral-Code s.1 s.2 s.3 e.Overflow) =
    (#TkChar <Chr <Numb-Overflow s.1 s.2 s.3>>)
    <Map { s.Char = (#TkChar s.Char); } e.Overflow>;

  (#TkLiteral-Code e.DecCode) =
    (#TkChar <Chr <Numb-Overflow e.DecCode>>);

  (#TkLiteral-OCode s.1 s.2 s.3 e.Overflow) =
    (#TkChar <CharFromNum 8 s.1 s.2 s.3>)
    <Map { s.Char = (#TkChar s.Char); } e.Overflow>;

  (#TkLiteral-OCode e.OctCode) =
    (#TkChar <CharFromNum 8 e.OctCode>);

  (#TkLiteral-XCode e.HexCode) =
    (#TkChar <CharFromNum 16 e.HexCode>);

  (#TkLiteral-NewLine 'n') = (#TkChar '\n');
  (#TkLiteral-CarriageReturn 'r') = (#TkChar '\r');
  (#TkLiteral-Tab 't') = (#TkChar '\t');
  (#TkLiteral-Bell 'a') = (#TkChar '\x07');
  (#TkLiteral-BS 'b') = (#TkChar '\x08');
  (#TkLiteral-FF 'f') = (#TkChar '\x0C');
  (#TkLiteral-VT 'v') = (#TkChar '\x0b');

  (#TkCompound '"' e.CompoundRep '"')
    // Всегда успешно, это гарантируется конечным автоматом
    = <UnEscapeString-SR e.CompoundRep> : #Success e.Compound
    = e.Compound
    : {
      e.Compound-B '\x00' e.Compound-E
        = (#TkWarning #nul-in-compound 'Zero byte in compound symbol')
          (#TkCompound e.Compound-B);

      e.Compound^ = (#TkCompound e.Compound);
    };

  (#TkName e.Name) = (#TkName e.Name);

  (#TkNewLine e.Accumulated) = (#TkNewLine);

  (#TkNumber e.Digits) = (#TkNumber <Numb-Overflow e.Digits>);

  (#TkPunctuation s.Punctuation) = (<SwPunctuation s.Punctuation>);

  (#TkVariable s.Type '.' e.Index)
    = (#TkVariable s.Type e.Index)
      <Fetch
        e.Index
        {
          '-' e._ = (#TkError 'Variable index can\'t start from \'-\'');
          e._ = /* пусто */;
        }
      >;

  (#TkNativeLine e.Line) = (#TkNativeLine <Trim-R e.Line>);

  (#TkUnexpected e.Unexpected) = (#TkUnexpected e.Unexpected);

  (TokenError e.Message) = (#TkError e.Message);
}

Numb-Overflow {
  e.Digits
    = <Numb e.Digits> : e.HighMacrodigits s.LastMacrodigit
    = s.LastMacrodigit;
}

ValidDirective {
  'ENUM' = (#TkDirective #Enum);
  'EENUM' = (#TkDirective #EEnum);
  'ENTRY' = (#TkDirective #Entry);
  'EXTERN' = (#TkDirective #Extern);
  'FORWARD' = (#TkDirective #Forward);
  'SWAP' = (#TkDirective #Swap);
  'ESWAP' = (#TkDirective #ESwap);
  'LABEL' = (#TkDirective #Ident);
  'INCLUDE' = (#TkDirective #Include);
  'EASTEREGG' = <Map { s.Char = (#TkChar s.Char); } <gen_e__ $EASTEREGG>>;
  'SCOPEID'
     = (#TkNumber #Cookie1) (#TkNumber #Cookie2)
       (#TkWarning #deprecated '$SCOPEID is deprecated');
  'SPEC' = (#TkDirective #Spec);
  'META' = (#TkDirective #Meta);
  e.Other = (#TkError 'Unknown directive $' e.Other);
}

SwPunctuation {
  '<' = #TkOpenCall; '>' = #TkCloseCall;
  '{' = #TkOpenBlock; '}' = #TkCloseBlock;
  '(' = #TkOpenBracket; ')' = #TkCloseBracket;
  '=' = #TkReplace; ',' = #TkComma; ';' = #TkSemicolon; ':' = #TkColon;
  '[' = #TkOpenADT; ']' = #TkCloseADT;
  '#' = #TkIdentMarker; '^' = #TkRedefinition;
}

AddLineNumber {
  s.LineNumber (#TkNewLine) =
    <Inc s.LineNumber>;

  s.LineNumber (#TkNativeLine e.Line) =
    <Inc s.LineNumber> (#TkNativeLine s.LineNumber e.Line);

  s.LineNumber (s.TokType e.Info) =
    s.LineNumber (s.TokType s.LineNumber e.Info);
}

NormalizeTokens {
  e.Tokens =
    <Fetch
      e.Tokens
      <Pipe
        (Map NormalizeToken)
        (MapAccum AddLineNumber 1)
        DelAccumulator
        CollectNativeLines
      >
    >;
}

CollectNativeLines {
  e.SimpleTokens (#TkNativeLine s.LineNumber e.Line) e.Tail =
    e.SimpleTokens
    <CollectNativeLines-Aux s.LineNumber ((e.Line)) e.Tail>;

  e.SimpleTokens = e.SimpleTokens;
}

CollectNativeLines-Aux {
  s.StartLineNumber (e.Block)
  (#TkNativeLine s.LineNumber e.Line) e.Tail =
    <CollectNativeLines-Aux
      s.StartLineNumber (e.Block (e.Line)) e.Tail
    >;

  s.StartLineNumber (e.Block) e.Tail =
    (#TkNativeBlock s.StartLineNumber e.Block)
    <CollectNativeLines e.Tail>;
}

$ENUM TokenError;

/*GEN:TOKENS

  :UpLetter: = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
  :LoLetter: = 'abcdefghijklmnopqrstuvwxyz'.
  :Digit: = '0123456789'.
  :ODigit: = '01234567' .
  :XDigit: = '0123456789ABCDEFabcdef' .
  :Punctuation: = '<>(){}[]=;:,#^'.

  :StartIdentifier: = :UpLetter: :LoLetter: '_'.
  :TailIdentifier: = :UpLetter: :LoLetter: :Digit: '_-'.
  :VarName: = :TailIdentifier:.
  :VarMode: = 'set'.
  :DirectiveBody: = :UpLetter:.
  :Space: = ' \t\r'.
  :CompoundOneCharEscape: = 'nrtabfv\\\'"' :ODigit:.

  :Other: = :Any:.


  Root =
    '%'     !-                                  StartNative-Percent       |
                                                Main                      .

  Main =
    :Space:               !-                    Main                      |
    :Punctuation:         !#TkPunctuation       Main                      |
    :VarMode:                                   VariableStart             |
    :StartIdentifier:                           Name                      |
    :Digit:                                     Number                    |
    '$'                   !-                    Directive                 |
    '\''                  !-                    StringLiteral-Start       |
    '"'                                         CompoundSymbol            |
    '/'                                         StartComment              |
    '\n'                  !#TkNewLine           Root                      |
                          !#TkEOF                                         |
    :Other:               !#TkUnexpected        Main                      .

  Name =
    :TailIdentifier:                            Name                      |
            !#TkName                            Main                      .

  Number =
    :Digit:                                     Number                    |
            !#TkNumber                          Main                      .

  VariableStart =
    '.'                                         VariableIndex             |
                                                Name                      .

  VariableIndex =
    :VarName:                                   VariableIndexTail         |
            !"Expected variable name"           Main                      .

  VariableIndexTail =
    :VarName:                                   VariableIndexTail         |
            !#TkVariable                        Main                      .

  Directive =
    :DirectiveBody:                             DirectiveTail             |
            !"Expected directive name"          Main                      .

  DirectiveTail =
    :DirectiveBody:                             DirectiveTail             |
            !#TkDirective                       Main                      .

  StringLiteral-Start =
    '\''    !#TkLiteral-Char                    Main                      |
                                                StringLiteral             .

  StringLiteral =
    '\\'    !-                                  StringLiteral-Escape      |
    '\''    !-                                  StringLiteral-Quote       |
    '\n'    !"Unclosed quote"                   Main                      |
            !"Unexpected EOF in string literal"                           |
    :Any:   !#TkLiteral-Char                    StringLiteral             .

  StringLiteral-Escape =
    'n'     !#TkLiteral-NewLine                 StringLiteral             |
    'r'     !#TkLiteral-CarriageReturn          StringLiteral             |
    't'     !#TkLiteral-Tab                     StringLiteral             |
    'a'     !#TkLiteral-Bell                    StringLiteral             |
    'b'     !#TkLiteral-BS                      StringLiteral             |
    'f'     !#TkLiteral-FF                      StringLiteral             |
    'v'     !#TkLiteral-VT                      StringLiteral             |
    '\\'    !#TkLiteral-Char                    StringLiteral             |
    '\''    !#TkLiteral-Char                    StringLiteral             |
    '"'     !#TkLiteral-Char                    StringLiteral             |
    'd'     !-                                  StringLiteral-Escape-DCode|
    'D'     !-                                  StringLiteral-Escape-DCode|
    :ODigit:                                    StringLiteral-Escape-OCode|
    'x'     !-                                  StringLiteral-Escape-XCode|
    'X'     !-                                  StringLiteral-Escape-XCode|
    '\n'    !"Unclosed quote"                   Main                      |
            !"Unexpected escape sequence"       StringLiteral             .

  StringLiteral-Escape-DCode =
    :Digit:                                     StringLiteral-Escape-DNext|
            !"Expected decimal digit"           StringLiteral             .

  StringLiteral-Escape-DNext =
    :Digit:                                     StringLiteral-Escape-DNext|
            !#TkLiteral-Code                    StringLiteral             .

  StringLiteral-Escape-OCode =
    :ODigit:                                    StringLiteral-Escape-OCode|
            !#TkLiteral-OCode                   StringLiteral             .

  StringLiteral-Escape-XCode =
    :XDigit:                                    StringLiteral-Escape-Xnext|
            !"Expected hexadecimal digit"       StringLiteral             .

  StringLiteral-Escape-Xnext =
    :XDigit:                                    StringLiteral-Escape-Xnext|
            !#TkLiteral-XCode                   StringLiteral             .

  StringLiteral-Quote =
    '\''    !#TkLiteral-Char                    StringLiteral             |
                                                Main                      .

  CompoundSymbol =
    '"'     !#TkCompound                        Main                      |
    '\\'                                        Compound-Escape           |
    '\n'    !"Unclosed quote"                   Main                      |
            !"Unexpected EOF in compound symbol"                          |
    :Any:                                       CompoundSymbol            .

  Compound-Escape =
    :CompoundOneCharEscape:                     CompoundSymbol            |
    'd'                                         Compound-Escape-Dec       |
    'D'                                         Compound-Escape-Dec       |
    'x'                                         Compound-Escape-Hex       |
    'X'                                         Compound-Escape-Hex       |
    '\n'    !"Unclosed quote"                   Main                      |
            !"Unexpected escape sequence"       CompoundSymbol            .

  Compound-Escape-Dec =
    :Digit:                                     CompoundSymbol            |
            !"Expected decimal digit"           CompoundSymbol            .

  Compound-Escape-Hex =
    :XDigit:                                    CompoundSymbol            |
            !"Expected hexadecimal digit"       CompoundSymbol            .

  StartComment =
    '*'     !-                                  CComment                  |
    '/'     !-                                  CppComment                |
            !#TkUnexpected                      Main                      .

  CComment =
    '/'     !-                                  CComment-CheckNested      |
    '*'     !-                                  CComment-CheckEnd         |
    '\n'    !#TkNewLine                         CComment                  |
    :Any:   !-                                  CComment                  |
            !"Unexpected EOF: unclosed comment" Main                      .

  CComment-CheckNested =
    '*'     !"Nested comments is disabled"      CComment                  |
                                                CComment                  .

  CComment-CheckEnd =
    '/'     !-                                  Main                      |
                                                CComment                  .

  CppComment =
    '\n'    !#TkNewLine                         Root                      |
            !#TkEOF                                                       |
    :Any:   !-                                  CppComment                .

  StartNative-Percent =
    '%'     !-                                  StartNative-NewLine       |
            !"Native inlines expects two percents"
                                                Main                      .

  StartNative-NewLine =
    '\r'    !-                                  StartNative-NewLine       |
    '\n'    !#TkNewLine                         Native-Begin              |
            !"Native inlines expects new line after two percents"
                                                Main                      .

  Native-Begin =
    '%'                                         Native-CheckEnd           |
                                                Native                    .

  Native =
    '\n'    !#TkNativeLine                      Native-Begin              |
    :Any:                                       Native                    |
            !"Unexpected EOF: unclosed native insertion"
                                                Main                      .

  Native-CheckEnd =
    '%'                                         Native-CheckEnd2          |
                                                Native                    .

  Native-CheckEnd2 =
    '\r'                                        Native-CheckEnd2          |
    '\n'    !#TkNewLine                         Main                      |
                                                Native                    .
GEN:END*/

Root {
  (e.Accum) '%' e.Text = <StartNative-Percent (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = <Main (<gen_e__ e.Accum>) e.Text>;
}

StartNative-Percent {
  (e.Accum) '%' e.Text = <StartNative-NewLine (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (TokenError 'Native inlines expects two percents') <Main (<gen_e__ >) e.Text>;
}

Main {
  (e.Accum) ' ' e.Text = <Main (<gen_e__ >) e.Text>;
  (e.Accum) '\t' e.Text = <Main (<gen_e__ >) e.Text>;
  (e.Accum) '\r' e.Text = <Main (<gen_e__ >) e.Text>;
  (e.Accum) '<' e.Text = (#TkPunctuation e.Accum '<') <Main (<gen_e__ >) e.Text>;
  (e.Accum) '>' e.Text = (#TkPunctuation e.Accum '>') <Main (<gen_e__ >) e.Text>;
  (e.Accum) '(' e.Text = (#TkPunctuation e.Accum '(') <Main (<gen_e__ >) e.Text>;
  (e.Accum) ')' e.Text = (#TkPunctuation e.Accum ')') <Main (<gen_e__ >) e.Text>;
  (e.Accum) '{' e.Text = (#TkPunctuation e.Accum '{') <Main (<gen_e__ >) e.Text>;
  (e.Accum) '}' e.Text = (#TkPunctuation e.Accum '}') <Main (<gen_e__ >) e.Text>;
  (e.Accum) '[' e.Text = (#TkPunctuation e.Accum '[') <Main (<gen_e__ >) e.Text>;
  (e.Accum) ']' e.Text = (#TkPunctuation e.Accum ']') <Main (<gen_e__ >) e.Text>;
  (e.Accum) '=' e.Text = (#TkPunctuation e.Accum '=') <Main (<gen_e__ >) e.Text>;
  (e.Accum) ';' e.Text = (#TkPunctuation e.Accum ';') <Main (<gen_e__ >) e.Text>;
  (e.Accum) ':' e.Text = (#TkPunctuation e.Accum ':') <Main (<gen_e__ >) e.Text>;
  (e.Accum) ',' e.Text = (#TkPunctuation e.Accum ',') <Main (<gen_e__ >) e.Text>;
  (e.Accum) '#' e.Text = (#TkPunctuation e.Accum '#') <Main (<gen_e__ >) e.Text>;
  (e.Accum) '^' e.Text = (#TkPunctuation e.Accum '^') <Main (<gen_e__ >) e.Text>;
  (e.Accum) 's' e.Text = <VariableStart (<gen_e__ e.Accum 's'>) e.Text>;
  (e.Accum) 'e' e.Text = <VariableStart (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 't' e.Text = <VariableStart (<gen_e__ e.Accum 't'>) e.Text>;
  (e.Accum) 'a' e.Text = <Name (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <Name (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <Name (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <Name (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'f' e.Text = <Name (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) 'g' e.Text = <Name (<gen_e__ e.Accum 'g'>) e.Text>;
  (e.Accum) 'h' e.Text = <Name (<gen_e__ e.Accum 'h'>) e.Text>;
  (e.Accum) 'i' e.Text = <Name (<gen_e__ e.Accum 'i'>) e.Text>;
  (e.Accum) 'j' e.Text = <Name (<gen_e__ e.Accum 'j'>) e.Text>;
  (e.Accum) 'k' e.Text = <Name (<gen_e__ e.Accum 'k'>) e.Text>;
  (e.Accum) 'l' e.Text = <Name (<gen_e__ e.Accum 'l'>) e.Text>;
  (e.Accum) 'm' e.Text = <Name (<gen_e__ e.Accum 'm'>) e.Text>;
  (e.Accum) 'n' e.Text = <Name (<gen_e__ e.Accum 'n'>) e.Text>;
  (e.Accum) 'o' e.Text = <Name (<gen_e__ e.Accum 'o'>) e.Text>;
  (e.Accum) 'p' e.Text = <Name (<gen_e__ e.Accum 'p'>) e.Text>;
  (e.Accum) 'q' e.Text = <Name (<gen_e__ e.Accum 'q'>) e.Text>;
  (e.Accum) 'r' e.Text = <Name (<gen_e__ e.Accum 'r'>) e.Text>;
  (e.Accum) 'u' e.Text = <Name (<gen_e__ e.Accum 'u'>) e.Text>;
  (e.Accum) 'v' e.Text = <Name (<gen_e__ e.Accum 'v'>) e.Text>;
  (e.Accum) 'w' e.Text = <Name (<gen_e__ e.Accum 'w'>) e.Text>;
  (e.Accum) 'x' e.Text = <Name (<gen_e__ e.Accum 'x'>) e.Text>;
  (e.Accum) 'y' e.Text = <Name (<gen_e__ e.Accum 'y'>) e.Text>;
  (e.Accum) 'z' e.Text = <Name (<gen_e__ e.Accum 'z'>) e.Text>;
  (e.Accum) 'A' e.Text = <Name (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <Name (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <Name (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <Name (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <Name (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <Name (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <Name (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <Name (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <Name (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <Name (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <Name (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <Name (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <Name (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <Name (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <Name (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <Name (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <Name (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <Name (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <Name (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <Name (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <Name (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <Name (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <Name (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <Name (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <Name (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <Name (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) '_' e.Text = <Name (<gen_e__ e.Accum '_'>) e.Text>;
  (e.Accum) '0' e.Text = <Number (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <Number (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <Number (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <Number (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <Number (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <Number (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <Number (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <Number (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <Number (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <Number (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) '$' e.Text = <Directive (<gen_e__ >) e.Text>;
  (e.Accum) '\'' e.Text = <StringLiteral-Start (<gen_e__ >) e.Text>;
  (e.Accum) '\"' e.Text = <CompoundSymbol (<gen_e__ e.Accum '\"'>) e.Text>;
  (e.Accum) '/' e.Text = <StartComment (<gen_e__ e.Accum '/'>) e.Text>;
  (e.Accum) '\n' e.Text = (#TkNewLine e.Accum '\n') <Root (<gen_e__ >) e.Text>;
  (e.Accum) = (#TkEOF e.Accum);
  (e.Accum) s.Any e.Text = (#TkUnexpected e.Accum s.Any) <Main (<gen_e__ >) e.Text>;
}

StartNative-NewLine {
  (e.Accum) '\r' e.Text = <StartNative-NewLine (<gen_e__ >) e.Text>;
  (e.Accum) '\n' e.Text = (#TkNewLine e.Accum '\n') <Native-Begin (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (TokenError 'Native inlines expects new line after two percents') <Main (<gen_e__ >) e.Text>;
}

VariableStart {
  (e.Accum) '.' e.Text = <VariableIndex (<gen_e__ e.Accum '.'>) e.Text>;
  (e.Accum) e.Text = <Name (<gen_e__ e.Accum>) e.Text>;
}

Name {
  (e.Accum) '0' e.Text = <Name (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <Name (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <Name (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <Name (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <Name (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <Name (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <Name (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <Name (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <Name (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <Name (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'a' e.Text = <Name (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <Name (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <Name (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <Name (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <Name (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <Name (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) 'g' e.Text = <Name (<gen_e__ e.Accum 'g'>) e.Text>;
  (e.Accum) 'h' e.Text = <Name (<gen_e__ e.Accum 'h'>) e.Text>;
  (e.Accum) 'i' e.Text = <Name (<gen_e__ e.Accum 'i'>) e.Text>;
  (e.Accum) 'j' e.Text = <Name (<gen_e__ e.Accum 'j'>) e.Text>;
  (e.Accum) 'k' e.Text = <Name (<gen_e__ e.Accum 'k'>) e.Text>;
  (e.Accum) 'l' e.Text = <Name (<gen_e__ e.Accum 'l'>) e.Text>;
  (e.Accum) 'm' e.Text = <Name (<gen_e__ e.Accum 'm'>) e.Text>;
  (e.Accum) 'n' e.Text = <Name (<gen_e__ e.Accum 'n'>) e.Text>;
  (e.Accum) 'o' e.Text = <Name (<gen_e__ e.Accum 'o'>) e.Text>;
  (e.Accum) 'p' e.Text = <Name (<gen_e__ e.Accum 'p'>) e.Text>;
  (e.Accum) 'q' e.Text = <Name (<gen_e__ e.Accum 'q'>) e.Text>;
  (e.Accum) 'r' e.Text = <Name (<gen_e__ e.Accum 'r'>) e.Text>;
  (e.Accum) 's' e.Text = <Name (<gen_e__ e.Accum 's'>) e.Text>;
  (e.Accum) 't' e.Text = <Name (<gen_e__ e.Accum 't'>) e.Text>;
  (e.Accum) 'u' e.Text = <Name (<gen_e__ e.Accum 'u'>) e.Text>;
  (e.Accum) 'v' e.Text = <Name (<gen_e__ e.Accum 'v'>) e.Text>;
  (e.Accum) 'w' e.Text = <Name (<gen_e__ e.Accum 'w'>) e.Text>;
  (e.Accum) 'x' e.Text = <Name (<gen_e__ e.Accum 'x'>) e.Text>;
  (e.Accum) 'y' e.Text = <Name (<gen_e__ e.Accum 'y'>) e.Text>;
  (e.Accum) 'z' e.Text = <Name (<gen_e__ e.Accum 'z'>) e.Text>;
  (e.Accum) 'A' e.Text = <Name (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <Name (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <Name (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <Name (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <Name (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <Name (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <Name (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <Name (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <Name (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <Name (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <Name (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <Name (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <Name (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <Name (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <Name (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <Name (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <Name (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <Name (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <Name (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <Name (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <Name (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <Name (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <Name (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <Name (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <Name (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <Name (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) '_' e.Text = <Name (<gen_e__ e.Accum '_'>) e.Text>;
  (e.Accum) '-' e.Text = <Name (<gen_e__ e.Accum '-'>) e.Text>;
  (e.Accum) e.Text = (#TkName e.Accum) <Main (<gen_e__ >) e.Text>;
}

Number {
  (e.Accum) '0' e.Text = <Number (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <Number (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <Number (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <Number (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <Number (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <Number (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <Number (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <Number (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <Number (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <Number (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) e.Text = (#TkNumber e.Accum) <Main (<gen_e__ >) e.Text>;
}

Directive {
  (e.Accum) 'A' e.Text = <DirectiveTail (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <DirectiveTail (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <DirectiveTail (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <DirectiveTail (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <DirectiveTail (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <DirectiveTail (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <DirectiveTail (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <DirectiveTail (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <DirectiveTail (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <DirectiveTail (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <DirectiveTail (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <DirectiveTail (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <DirectiveTail (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <DirectiveTail (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <DirectiveTail (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <DirectiveTail (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <DirectiveTail (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <DirectiveTail (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <DirectiveTail (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <DirectiveTail (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <DirectiveTail (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <DirectiveTail (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <DirectiveTail (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <DirectiveTail (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <DirectiveTail (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <DirectiveTail (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) e.Text = (TokenError 'Expected directive name') <Main (<gen_e__ >) e.Text>;
}

StringLiteral-Start {
  (e.Accum) '\'' e.Text = (#TkLiteral-Char e.Accum '\'') <Main (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = <StringLiteral (<gen_e__ e.Accum>) e.Text>;
}

CompoundSymbol {
  (e.Accum) '\"' e.Text = (#TkCompound e.Accum '\"') <Main (<gen_e__ >) e.Text>;
  (e.Accum) '\\' e.Text = <Compound-Escape (<gen_e__ e.Accum '\\'>) e.Text>;
  (e.Accum) '\n' e.Text = (TokenError 'Unclosed quote') <Main (<gen_e__ >) e.Text>;
  (e.Accum) = (TokenError 'Unexpected EOF in compound symbol');
  (e.Accum) s.Any e.Text = <CompoundSymbol (<gen_e__ e.Accum s.Any>) e.Text>;
}

StartComment {
  (e.Accum) '*' e.Text = <CComment (<gen_e__ >) e.Text>;
  (e.Accum) '/' e.Text = <CppComment (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (#TkUnexpected e.Accum) <Main (<gen_e__ >) e.Text>;
}

Native-Begin {
  (e.Accum) '%' e.Text = <Native-CheckEnd (<gen_e__ e.Accum '%'>) e.Text>;
  (e.Accum) e.Text = <Native (<gen_e__ e.Accum>) e.Text>;
}

VariableIndex {
  (e.Accum) '0' e.Text = <VariableIndexTail (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <VariableIndexTail (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <VariableIndexTail (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <VariableIndexTail (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <VariableIndexTail (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <VariableIndexTail (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <VariableIndexTail (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <VariableIndexTail (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <VariableIndexTail (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <VariableIndexTail (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'a' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) 'g' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'g'>) e.Text>;
  (e.Accum) 'h' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'h'>) e.Text>;
  (e.Accum) 'i' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'i'>) e.Text>;
  (e.Accum) 'j' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'j'>) e.Text>;
  (e.Accum) 'k' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'k'>) e.Text>;
  (e.Accum) 'l' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'l'>) e.Text>;
  (e.Accum) 'm' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'm'>) e.Text>;
  (e.Accum) 'n' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'n'>) e.Text>;
  (e.Accum) 'o' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'o'>) e.Text>;
  (e.Accum) 'p' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'p'>) e.Text>;
  (e.Accum) 'q' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'q'>) e.Text>;
  (e.Accum) 'r' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'r'>) e.Text>;
  (e.Accum) 's' e.Text = <VariableIndexTail (<gen_e__ e.Accum 's'>) e.Text>;
  (e.Accum) 't' e.Text = <VariableIndexTail (<gen_e__ e.Accum 't'>) e.Text>;
  (e.Accum) 'u' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'u'>) e.Text>;
  (e.Accum) 'v' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'v'>) e.Text>;
  (e.Accum) 'w' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'w'>) e.Text>;
  (e.Accum) 'x' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'x'>) e.Text>;
  (e.Accum) 'y' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'y'>) e.Text>;
  (e.Accum) 'z' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'z'>) e.Text>;
  (e.Accum) 'A' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) '_' e.Text = <VariableIndexTail (<gen_e__ e.Accum '_'>) e.Text>;
  (e.Accum) '-' e.Text = <VariableIndexTail (<gen_e__ e.Accum '-'>) e.Text>;
  (e.Accum) e.Text = (TokenError 'Expected variable name') <Main (<gen_e__ >) e.Text>;
}

DirectiveTail {
  (e.Accum) 'A' e.Text = <DirectiveTail (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <DirectiveTail (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <DirectiveTail (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <DirectiveTail (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <DirectiveTail (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <DirectiveTail (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <DirectiveTail (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <DirectiveTail (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <DirectiveTail (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <DirectiveTail (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <DirectiveTail (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <DirectiveTail (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <DirectiveTail (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <DirectiveTail (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <DirectiveTail (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <DirectiveTail (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <DirectiveTail (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <DirectiveTail (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <DirectiveTail (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <DirectiveTail (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <DirectiveTail (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <DirectiveTail (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <DirectiveTail (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <DirectiveTail (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <DirectiveTail (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <DirectiveTail (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) e.Text = (#TkDirective e.Accum) <Main (<gen_e__ >) e.Text>;
}

StringLiteral {
  (e.Accum) '\\' e.Text = <StringLiteral-Escape (<gen_e__ >) e.Text>;
  (e.Accum) '\'' e.Text = <StringLiteral-Quote (<gen_e__ >) e.Text>;
  (e.Accum) '\n' e.Text = (TokenError 'Unclosed quote') <Main (<gen_e__ >) e.Text>;
  (e.Accum) = (TokenError 'Unexpected EOF in string literal');
  (e.Accum) s.Any e.Text = (#TkLiteral-Char e.Accum s.Any) <StringLiteral (<gen_e__ >) e.Text>;
}

Compound-Escape {
  (e.Accum) '0' e.Text = <CompoundSymbol (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <CompoundSymbol (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <CompoundSymbol (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <CompoundSymbol (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <CompoundSymbol (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <CompoundSymbol (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <CompoundSymbol (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <CompoundSymbol (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) 'n' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'n'>) e.Text>;
  (e.Accum) 'r' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'r'>) e.Text>;
  (e.Accum) 't' e.Text = <CompoundSymbol (<gen_e__ e.Accum 't'>) e.Text>;
  (e.Accum) 'a' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'f' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) 'v' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'v'>) e.Text>;
  (e.Accum) '\\' e.Text = <CompoundSymbol (<gen_e__ e.Accum '\\'>) e.Text>;
  (e.Accum) '\'' e.Text = <CompoundSymbol (<gen_e__ e.Accum '\''>) e.Text>;
  (e.Accum) '\"' e.Text = <CompoundSymbol (<gen_e__ e.Accum '\"'>) e.Text>;
  (e.Accum) 'd' e.Text = <Compound-Escape-Dec (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'D' e.Text = <Compound-Escape-Dec (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'x' e.Text = <Compound-Escape-Hex (<gen_e__ e.Accum 'x'>) e.Text>;
  (e.Accum) 'X' e.Text = <Compound-Escape-Hex (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) '\n' e.Text = (TokenError 'Unclosed quote') <Main (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (TokenError 'Unexpected escape sequence') <CompoundSymbol (<gen_e__ >) e.Text>;
}

CComment {
  (e.Accum) '/' e.Text = <CComment-CheckNested (<gen_e__ >) e.Text>;
  (e.Accum) '*' e.Text = <CComment-CheckEnd (<gen_e__ >) e.Text>;
  (e.Accum) '\n' e.Text = (#TkNewLine e.Accum '\n') <CComment (<gen_e__ >) e.Text>;
  (e.Accum) s.Any e.Text = <CComment (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (TokenError 'Unexpected EOF: unclosed comment') <Main (<gen_e__ >) e.Text>;
}

CppComment {
  (e.Accum) '\n' e.Text = (#TkNewLine e.Accum '\n') <Root (<gen_e__ >) e.Text>;
  (e.Accum) = (#TkEOF e.Accum);
  (e.Accum) s.Any e.Text = <CppComment (<gen_e__ >) e.Text>;
}

Native-CheckEnd {
  (e.Accum) '%' e.Text = <Native-CheckEnd2 (<gen_e__ e.Accum '%'>) e.Text>;
  (e.Accum) e.Text = <Native (<gen_e__ e.Accum>) e.Text>;
}

Native {
  (e.Accum) '\n' e.Text = (#TkNativeLine e.Accum '\n') <Native-Begin (<gen_e__ >) e.Text>;
  (e.Accum) s.Any e.Text = <Native (<gen_e__ e.Accum s.Any>) e.Text>;
  (e.Accum) e.Text = (TokenError 'Unexpected EOF: unclosed native insertion') <Main (<gen_e__ >) e.Text>;
}

VariableIndexTail {
  (e.Accum) '0' e.Text = <VariableIndexTail (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <VariableIndexTail (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <VariableIndexTail (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <VariableIndexTail (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <VariableIndexTail (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <VariableIndexTail (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <VariableIndexTail (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <VariableIndexTail (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <VariableIndexTail (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <VariableIndexTail (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'a' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) 'g' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'g'>) e.Text>;
  (e.Accum) 'h' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'h'>) e.Text>;
  (e.Accum) 'i' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'i'>) e.Text>;
  (e.Accum) 'j' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'j'>) e.Text>;
  (e.Accum) 'k' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'k'>) e.Text>;
  (e.Accum) 'l' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'l'>) e.Text>;
  (e.Accum) 'm' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'm'>) e.Text>;
  (e.Accum) 'n' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'n'>) e.Text>;
  (e.Accum) 'o' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'o'>) e.Text>;
  (e.Accum) 'p' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'p'>) e.Text>;
  (e.Accum) 'q' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'q'>) e.Text>;
  (e.Accum) 'r' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'r'>) e.Text>;
  (e.Accum) 's' e.Text = <VariableIndexTail (<gen_e__ e.Accum 's'>) e.Text>;
  (e.Accum) 't' e.Text = <VariableIndexTail (<gen_e__ e.Accum 't'>) e.Text>;
  (e.Accum) 'u' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'u'>) e.Text>;
  (e.Accum) 'v' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'v'>) e.Text>;
  (e.Accum) 'w' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'w'>) e.Text>;
  (e.Accum) 'x' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'x'>) e.Text>;
  (e.Accum) 'y' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'y'>) e.Text>;
  (e.Accum) 'z' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'z'>) e.Text>;
  (e.Accum) 'A' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <VariableIndexTail (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) '_' e.Text = <VariableIndexTail (<gen_e__ e.Accum '_'>) e.Text>;
  (e.Accum) '-' e.Text = <VariableIndexTail (<gen_e__ e.Accum '-'>) e.Text>;
  (e.Accum) e.Text = (#TkVariable e.Accum) <Main (<gen_e__ >) e.Text>;
}

StringLiteral-Escape {
  (e.Accum) 'n' e.Text = (#TkLiteral-NewLine e.Accum 'n') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) 'r' e.Text = (#TkLiteral-CarriageReturn e.Accum 'r') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) 't' e.Text = (#TkLiteral-Tab e.Accum 't') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) 'a' e.Text = (#TkLiteral-Bell e.Accum 'a') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) 'b' e.Text = (#TkLiteral-BS e.Accum 'b') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) 'f' e.Text = (#TkLiteral-FF e.Accum 'f') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) 'v' e.Text = (#TkLiteral-VT e.Accum 'v') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) '\\' e.Text = (#TkLiteral-Char e.Accum '\\') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) '\'' e.Text = (#TkLiteral-Char e.Accum '\'') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) '\"' e.Text = (#TkLiteral-Char e.Accum '\"') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) 'd' e.Text = <StringLiteral-Escape-DCode (<gen_e__ >) e.Text>;
  (e.Accum) 'D' e.Text = <StringLiteral-Escape-DCode (<gen_e__ >) e.Text>;
  (e.Accum) '0' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) 'x' e.Text = <StringLiteral-Escape-XCode (<gen_e__ >) e.Text>;
  (e.Accum) 'X' e.Text = <StringLiteral-Escape-XCode (<gen_e__ >) e.Text>;
  (e.Accum) '\n' e.Text = (TokenError 'Unclosed quote') <Main (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (TokenError 'Unexpected escape sequence') <StringLiteral (<gen_e__ >) e.Text>;
}

StringLiteral-Quote {
  (e.Accum) '\'' e.Text = (#TkLiteral-Char e.Accum '\'') <StringLiteral (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = <Main (<gen_e__ e.Accum>) e.Text>;
}

Compound-Escape-Dec {
  (e.Accum) '0' e.Text = <CompoundSymbol (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <CompoundSymbol (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <CompoundSymbol (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <CompoundSymbol (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <CompoundSymbol (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <CompoundSymbol (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <CompoundSymbol (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <CompoundSymbol (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <CompoundSymbol (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <CompoundSymbol (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) e.Text = (TokenError 'Expected decimal digit') <CompoundSymbol (<gen_e__ >) e.Text>;
}

Compound-Escape-Hex {
  (e.Accum) '0' e.Text = <CompoundSymbol (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <CompoundSymbol (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <CompoundSymbol (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <CompoundSymbol (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <CompoundSymbol (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <CompoundSymbol (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <CompoundSymbol (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <CompoundSymbol (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <CompoundSymbol (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <CompoundSymbol (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'A' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'a' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <CompoundSymbol (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) e.Text = (TokenError 'Expected hexadecimal digit') <CompoundSymbol (<gen_e__ >) e.Text>;
}

CComment-CheckNested {
  (e.Accum) '*' e.Text = (TokenError 'Nested comments is disabled') <CComment (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = <CComment (<gen_e__ e.Accum>) e.Text>;
}

CComment-CheckEnd {
  (e.Accum) '/' e.Text = <Main (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = <CComment (<gen_e__ e.Accum>) e.Text>;
}

Native-CheckEnd2 {
  (e.Accum) '\r' e.Text = <Native-CheckEnd2 (<gen_e__ e.Accum '\r'>) e.Text>;
  (e.Accum) '\n' e.Text = (#TkNewLine e.Accum '\n') <Main (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = <Native (<gen_e__ e.Accum>) e.Text>;
}

StringLiteral-Escape-DCode {
  (e.Accum) '0' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) e.Text = (TokenError 'Expected decimal digit') <StringLiteral (<gen_e__ >) e.Text>;
}

StringLiteral-Escape-OCode {
  (e.Accum) '0' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <StringLiteral-Escape-OCode (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) e.Text = (#TkLiteral-OCode e.Accum) <StringLiteral (<gen_e__ >) e.Text>;
}

StringLiteral-Escape-XCode {
  (e.Accum) '0' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'A' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'a' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) e.Text = (TokenError 'Expected hexadecimal digit') <StringLiteral (<gen_e__ >) e.Text>;
}

StringLiteral-Escape-DNext {
  (e.Accum) '0' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <StringLiteral-Escape-DNext (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) e.Text = (#TkLiteral-Code e.Accum) <StringLiteral (<gen_e__ >) e.Text>;
}

StringLiteral-Escape-Xnext {
  (e.Accum) '0' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'A' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'a' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <StringLiteral-Escape-Xnext (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) e.Text = (#TkLiteral-XCode e.Accum) <StringLiteral (<gen_e__ >) e.Text>;
}

gen_e__ { e.any = e.any; }
