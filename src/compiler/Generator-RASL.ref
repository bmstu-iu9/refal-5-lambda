$INCLUDE "LibraryEx";

*$FROM DisplayName
$EXTERN DisplayName;

*$FROM Error
$EXTERN PrintErr;

$INCLUDE "Opcodes";

$DRIVE NumberFromOpcode, NumberFromBracket, BlockTypeNumber;

$ENTRY GenProgram-RASL {
  (
    (ModuleID s.Cookie1 s.Cookie2)
    (CmdFuncArray s.FunctionCount e.FuncNames)
    (CmdIdentArray s.IdentCount e.Idents)
    (CmdStringArray s.StringCount e.Strings)
    (RASL e.RASL)
    (Items e.Items)
  )

    = <Lenw <BytesFromFunctionList e.FuncNames>>
    : s.ExternalSize e.FuncNamesAsBytes

    = <Lenw <BytesFromIdentList e.Idents>>
    : s.IdentSize e.IdentsAsBytes

    = <Lenw <BytesFromStringList e.Strings>>
    : s.StringSize e.StringsAsBytes

    = <Assemble e.RASL> : s.RaslLength (e.LabelOffsets) e.RASLAsWords

    = <PutBlockStart>
      <PutBlock
        ConstTable
        <PutWordLE s.Cookie1>
        <PutWordLE s.Cookie2>
        <PutWordLE s.FunctionCount>
        <PutWordLE s.IdentCount>
        <PutWordLE 0>
        <PutWordLE s.StringCount>
        <PutWordLE s.RaslLength>
        <PutWordLE s.ExternalSize>
        <PutWordLE s.IdentSize>
        <PutWordLE <Sub s.StringSize <Mul 4 s.StringCount>>>
        e.FuncNamesAsBytes
        e.IdentsAsBytes
        /* нет длинных чисел */
        e.StringsAsBytes
        <Map &UnBracket e.RASLAsWords>
      >
      <DelAccumulator
        <MapAccum &GenCommand-Globals (e.LabelOffsets) e.Items>
      >
}

BytesFromFunctionList {
  e.FuncNames =
    <Map
      {
        (s.ScopeClass e.FuncName) =
          <NameWithSign-Bytes s.ScopeClass e.FuncName>;
      }
      e.FuncNames
    >;
}

BytesFromIdentList {
  e.Idents =
    <Map
      {
        (s.IdentId e.Ident) = <Asciiz <DisplayName e.Ident>>;
      }
      e.Idents
    >;
}

BytesFromStringList {
  e.Strings =
    <Map
      {
        (s.StringId e.String) =
          <Fetch
            <Lenw e.String>
            {
              s.Length e.String^ =
                <PutWordLE s.Length> <BytesFromString e.String>;
            }
          >;
      }
      e.Strings
    >;
}

$INLINE BytesFromString;

BytesFromString {
  e.String = <Ord e.String>;
}

$INLINE Asciiz;

Asciiz {
  e.String = <BytesFromString e.String> 0;
}

$INLINE PutBlock;

PutBlock {
  s.Type e.Bytes =
    <BlockTypeNumber s.Type>
    <Fetch
      <Lenw e.Bytes>
      {
        s.Length e.Bytes^ = <PutWordLE s.Length> e.Bytes;
      }
    >;
}

PutWordLE {
  s.1 s.2 s.3 s.4 = s.1 s.2 s.3 s.4;

  e.Bytes s.Value
    = <Divmod s.Value 256> : (s.ValueHigh) s.ValueLow
    = <PutWordLE e.Bytes s.ValueLow s.ValueHigh>;
}

$DRIVE NameWithSign-Bytes;

NameWithSign-Bytes {
  GN-Entry e.Name = <Asciiz '*' <DisplayName e.Name>>;
  GN-Local e.Name = <Asciiz '#' <DisplayName e.Name>>;
}

GenCommand-Globals {
  (e.Labels) (UnitName e.SrcName)
    = (e.Labels) <PutBlock UnitName <Asciiz e.SrcName>>;

  (e.Labels) (CmdEnumDescr s.ScopeClass e.Name)
    = (e.Labels) <PutBlock EmptyFunction <NameWithSign-Bytes s.ScopeClass e.Name>>;

  (e.Labels-B (s.Label s.Offset) e.Labels-E)
  (CmdInterpretFuncDescr s.ScopeClass e.Name s.Label)
    = (e.Labels-B (s.Label s.Offset) e.Labels-E)
      <PutBlock
        RefalFunction
        <NameWithSign-Bytes s.ScopeClass e.Name>
        <PutWordLE s.Offset>
      >;

  (e.Labels) (CmdMetatable s.ScopeClass (e.Name) e.Table)
    = <Lenw e.Table> : s.Count e.Table^
    = (e.Labels)
      <PutBlock
        Metatable
        <NameWithSign-Bytes s.ScopeClass e.Name>
        <PutWordLE s.Count>
        <Map
          {
            (s.Ident s.Function)
              = <PutWordLE s.Ident> <PutWordLE s.Function>;
          }
          e.Table
        >
      >;

  (e.Labels) (CmdSwapDescr s.ScopeClass e.Name)
    = (e.Labels) <PutBlock Swap <NameWithSign-Bytes s.ScopeClass e.Name>>;

  (e.Labels) (CmdConditionFuncDecsrRasl  s.ScopeClass e.Name)
    = (e.Labels)
      <PutBlock ConditionRasl <NameWithSign-Bytes s.ScopeClass e.Name>>;

  (e.Labels) (CmdConditionFuncDecsrNative  s.ScopeClass e.Name)
    = (e.Labels)
      <PutBlock ConditionNative <NameWithSign-Bytes s.ScopeClass e.Name>>;

  (e.Labels) (CmdNativeFuncDescr s.ScopeClass e.Name)
    = (e.Labels)
      <PutBlock NativeFunction <NameWithSign-Bytes s.ScopeClass e.Name>>;
}

Assemble {
  e.RASL

    = <Map &GenCommand-RASL e.RASL> : e.RASLAsWords

    = <CalcLabelsOffsets e.RASLAsWords> : (s.RaslLength e.Labels) e.RASLAsWords^

    = <ResolveLabeledDestinations (e.Labels) e.RASLAsWords> : e.RASLAsWords^

    = s.RaslLength (e.Labels) e.RASLAsWords;
}

GenCommand-RASL {
  /* Labels */
  (LABEL s.Label) = (LABEL s.Label);

  /* ------------------------------------------------------------------------ */
  /* Создания глобальных объектов, общие команды */

  (CmdProfileFunction) =
    <PutCommand CmdProfileFunction>;

  (CmdLoadConstants) =
    <PutCommand CmdLoadConstants>;

  (CmdIssueMemory s.Memory) =
    <PutCommand CmdIssueMemory s.Memory 0 0>;

  (CmdReserveBacktrackStack s.Depth) =
    <PutCommand CmdReserveBacktrackStack s.Depth 0 0>;

  (CmdOnFailGoTo s.Offset "Func name:" e.FuncName) =
    (CmdOnFailGoTo s.Offset e.FuncName);

  (CmdProfilerStopSentence) =
    <PutCommand CmdProfilerStopSentence>;

  (CmdInitB0) =
    <PutCommand CmdInitB0>;

  (CmdInitB0-Lite) =
    <PutCommand CmdInitB0-Lite>;

  /* ------------------------------------------------------------------------ */
  /* Команды сопоставления с образцом (режим интерпретации) */

  (CmdChar s.Direction s.BracketNumber s.Char) =
    <PutCommand (CmdChar s.Direction) 0 <Ord s.Char> s.BracketNumber>;

  (CmdCharSave s.Direction s.BracketNumber s.SaveOffset s.Char) =
    <PutCommand
      (CmdCharSave s.Direction) s.SaveOffset <Ord s.Char> s.BracketNumber
    >;

  (CmdNumber s.Direction s.BracketNumber s.Number) =
    <PutCommand (CmdNumber s.Direction) 0 s.Number s.BracketNumber>;

  (CmdNumberSave s.Direction s.BracketNumber s.SaveOffset s.Number) =
    <PutCommand (CmdNumberSave s.Direction) s.SaveOffset s.Number s.BracketNumber>;

  (CmdName s.Direction s.BracketNumber s.NameId e.Name) =
    <PutCommand (CmdName s.Direction) 0 s.NameId s.BracketNumber>;

  (CmdNameSave s.Direction s.BracketNumber s.SaveOffset s.NameId e.Name) =
    <PutCommand (CmdNameSave s.Direction) s.SaveOffset s.NameId s.BracketNumber>;

  (CmdIdent s.Direction s.BracketNumber s.NameId e.Name) =
    <PutCommand (CmdIdent s.Direction) 0 s.NameId s.BracketNumber>;

  (CmdIdentSave s.Direction s.BracketNumber s.SaveOffset s.NameId e.Name) =
    <PutCommand
      (CmdIdentSave s.Direction) s.SaveOffset s.NameId s.BracketNumber
    >;

  (CmdBrackets s.Direction s.Num s.NumRanges) =
    <PutCommand (CmdBrackets s.Direction) 0 s.NumRanges s.Num>;

  (CmdBracketsSave s.Direction s.Num s.NumRanges) =
    <PutCommand (CmdBracketsSave s.Direction) 0 s.NumRanges s.Num>;

  (CmdADT s.Direction s.BracketNumber s.InnerBrackets s.NameId e.Name) =
    <PutCommand (CmdADT s.Direction) s.NameId s.InnerBrackets s.BracketNumber>;

  (CmdADTSave s.Direction s.BracketNumber s.InnerBrackets s.NameId e.Name) =
    <PutCommand
      (CmdADTSave s.Direction) s.NameId s.InnerBrackets s.BracketNumber
    >;

  (CmdCallSave s.Direction s.BracketNumber s.InnerBrackets) =
    <PutCommand (CmdCallSave s.Direction) 0 s.InnerBrackets s.BracketNumber>;

  (CmdEmpty s.Direction s.Num) =
    <PutCommand CmdEmpty 0 0 s.Num>;

  (CmdVar s.Direction s.BracketNumber s.Mode s.VarNumber) =
    <PutCommand (s.Mode CmdVar s.Direction) 0 s.VarNumber s.BracketNumber>;

  (CmdVarSave s.Direction s.BracketNumber s.Mode s.VarNumber) =
    <PutCommand (s.Mode CmdVarSave s.Direction) 0 s.VarNumber s.BracketNumber>;

  (CmdRepeated s.Direction s.BracketNumber s.Mode s.VarNumber s.SampleNumber) =
    <PutCommand
      (s.Mode CmdRepeated s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (CmdRepeatedTVarSave
    s.Direction s.BracketNumber s.VarNumber s.SampleNumber
  ) =
    <PutCommand
      ('t' CmdRepeatedSave s.Direction)
      s.VarNumber s.SampleNumber s.BracketNumber
    >;

  (CmdEPrepare s.BracketNumber s.VarNumber) =
    <PutCommand CmdEPrepare 0 s.VarNumber s.BracketNumber>;

  (CmdEStart s.BracketNumber s.VarNumber) =
    <PutCommand CmdEStart 0 s.VarNumber s.BracketNumber>;

  (CmdSave s.OldBracketNumber s.NewBracketNumber) =
    <PutCommand CmdSave 0 s.NewBracketNumber s.OldBracketNumber>;

  (CmdVariableDebugTable s.StringId s.Offset) =
    <PutCommand CmdVariableDebugOffset s.StringId 0 s.Offset>;

  /* ------------------------------------------------------------------------ */
  /* Команды построения результата (режим интерпретации) */

  (CmdResetAllocator) =
    <PutCommand CmdResetAllocator 0 0 0>;

  (CmdSetRes s.Offset) =
    <Fetch
      s.Offset
      {
        ARG-BEGIN = <PutCommand CmdSetResArgBegin>;
        RIGHT-EDGE = <PutCommand CmdSetResRightEdge>;

        s.Offset^ = <PutCommand CmdSetRes 0 0 s.Offset>;
      }
    >;

  (CmdCopyVar 'e' s.Target s.Sample) =
    <PutCommand CmdCopyEVar s.Target s.Sample 0>;

  (CmdCopyVar s.Mode s.Target s.Sample) =
    <PutCommand CmdCopySTVar s.Target s.Sample 0>;

  (CmdReinitSVar s.Offset s.Sample) =
    <PutCommand CmdReinitSVar 0 s.Sample s.Offset>;

  (CmdCreateElem s.CreateMode s.ElemNumber s.ElementType e.Info) =
    <PutCommand
      (s.CreateMode <CreateCommandTag s.ElementType>)
      0 <CreateCommandInfo s.ElementType e.Info> s.ElemNumber
    >;

  (CmdLinkBrackets s.Left s.Right) =
    <PutCommand CmdLinkBrackets s.Left s.Right 0>;

  (CmdPushStack s.ElemNumber) =
    <PutCommand CmdPushStack 0 0 s.ElemNumber>;

  (CmdPushState) =
    <PutCommand CmdPushState 0 0 0>;

  (CmdWrapClosure s.Offset)
    = <PutCommand CmdWrapClosure 0 0 s.Offset>;

  (CmdInsertElem s.ElemNumber) =
    <PutCommand CmdSpliceElem 0 0 s.ElemNumber>;

  (CmdInsertVar 'e' s.Offset) =
    <PutCommand CmdSpliceEVar 0 0 s.Offset>;

  (CmdInsertVar s.Mode s.Offset) =
    <PutCommand CmdSpliceSTVar 0 0 s.Offset>;

  (CmdInsertRange s.ElemNumber) =
    <PutCommand CmdSpliceRange 0 0 s.ElemNumber>;

  (CmdInsertTile s.BeginOffset s.EndOffset) =
    <PutCommand CmdSpliceTile s.BeginOffset s.EndOffset 0>;

  (CmdSpliceToFreeList) =
    <PutCommand CmdSpliceToFreeList 0 0 0>;

  (CmdSpliceToFreeList-Range s.Start s.End) =
    <PutCommand CmdSpliceToFreeList-Range s.Start s.End 0>;

  (CmdNextStep) =
    <PutCommand CmdNextStep>;

  (CmdTrash s.Offset) =
    <Fetch
      s.Offset
      {
        LEFT-EDGE = <PutCommand CmdTrashLeftEdge>;

        s.Offset^ = <PutCommand CmdTrash 0 0 s.Offset>;
      }
    >;

  (CmdFail) =
    <PutCommand CmdFail>;
}

$INLINE PutCommand;

PutCommand {
  s.Symbolic = (<NumberFromOpcode s.Symbolic> 0 0 0);

  s.Symbolic s.Arg1 s.Arg2 s.Arg3
    = <PutCommand (s.Symbolic) s.Arg1 s.Arg2 s.Arg3>;

  (e.Symbolic) s.Arg1 s.Arg2 s.Arg3
    = <NumberFromOpcode e.Symbolic> : s.OpCode
    = <Divmod s.Arg1 256> <Divmod s.Arg2 256> <Divmod s.Arg3 256>
    : {
        (0) s.LoArg1 (0) s.LoArg2 (0) s.LoArg3
          = (s.OpCode s.LoArg1 s.LoArg2 s.LoArg3);

        (s.HiArg1) s.LoArg1 (s.HiArg2) s.LoArg2 (s.HiArg3) s.LoArg3
          = <PutCommand (CmdScale) s.HiArg1 s.HiArg2 s.HiArg3>
            (s.OpCode s.LoArg1 s.LoArg2 s.LoArg3);
      };
}

$DRIVE CreateCommandTag;

CreateCommandTag {
  ElOpenBracket = ElBracket;
  ElOpenADT = ElBracket;
  ElOpenCall = ElBracket;
  ElCloseBracket = ElBracket;
  ElCloseADT = ElBracket;
  ElCloseCall = ElBracket;

  s.Other = s.Other;
}

$DRIVE CreateCommandInfo;

CreateCommandInfo {
  ElChar s.Char = <Ord s.Char>;

  ElName s.NameId e.Name = s.NameId;

  ElNumber s.Number = s.Number;

  ElIdent s.NameId e.Name = s.NameId;

  ElString s.StringId = s.StringId;

  ElClosureHead = 0;
  ElUnwrappedClosure s.HeadCounter = s.HeadCounter;

  s.Bracket = <NumberFromBracket s.Bracket>;
}

CalcLabelsOffsets {
  e.RASL
    = <MapAccum
        {
          (s.Offset e.Labels) (LABEL s.Label)
            = (s.Offset e.Labels (s.Label s.Offset));

          (s.Offset e.Labels)
          (CmdOnFailGoTo s.Destination e.FuncName)
            = (<Inc s.Offset> e.Labels)
              (CmdOnFailGoTo <Inc s.Offset> s.Destination e.FuncName);

          (s.Offset e.Labels) t.OtherCommand
            = (<Inc s.Offset> e.Labels) t.OtherCommand;
        }
        (0) e.RASL
      >;
}

ResolveLabeledDestinations {
  (e.Labels)
  e.ReadyRASL
  (CmdOnFailGoTo s.CommandOffset s.DestinationLabel e.FuncName)
  e.UnscannedRASL

    = e.Labels : e.Labels-B (s.DestinationLabel s.DestinationOffset) e.Labels-E

    = <Sub s.DestinationOffset s.CommandOffset> : s.RelativeJump

    = <Compare s.RelativeJump 65536>
    : {
        '-'
          = <Divmod s.RelativeJump 256> : (s.JumpHigh) s.JumpLow
          = e.ReadyRASL
            <PutCommand CmdOnFailGoTo s.JumpLow s.JumpHigh 0>
            <ResolveLabeledDestinations (e.Labels-B e.Labels-E) e.UnscannedRASL>;

        s.Other
          = <PrintErr
              'Compilation failure in the function ' <DisplayName e.FuncName> ':'
            >
            <PrintErr
              '  this function tries to jump over ' <Symb s.RelativeJump>
              ' commands, but the maximum jump length is 65535.'
            >
            <PrintErr '  Compilation aborted.'>
            <Exit 1>;
      };

  (e.Labels) e.ReadyRASL = e.ReadyRASL;
}

$ENTRY PutBlockStart {
  = <PutBlock Start <BytesFromString 'RASLCODE'>>
}

$ENTRY PutBlockReference {
  e.Reference = <PutBlock Reference <Asciiz e.Reference>>;
}

$ENTRY PutBlockIncorporated {
  e.LibName = <PutBlock Incorporated <Asciiz e.LibName>>;
}
