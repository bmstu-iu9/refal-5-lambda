*$FROM LibraryEx
$EXTERN Map, Fetch;

*$FROM Escape
$EXTERN EscapeChar;


/*
  <GenerateFromDFA e.Rules>
    == (e.Lines)*

  e.Rules ::= ((e.RuleName) t.Alternative*)
  t.Alternative ::= (s.Head t.Flush t.NextState)
  s.Head ::= Empty | Any | s.Char
  t.Flush ::= None | Unnamed | (Flush e.FlushName) | (FlushError e.Message)
  t.NextState ::= (e.NextStateName) | Finitive
*/
$ENTRY GenerateFromDFA {
  e.Rules =
    <Map &WriteFunction e.Rules>
    ()
    ('gen_e__ { e.any = e.any; }')
}

WriteFunction {
  ((e.NextRule) e.Alternatives) =
    ()
    (e.NextRule ' {')
    <Map &WriteAlternative e.Alternatives>
    ('}');
}

WriteAlternative {
  t.Alternative =
    ('  (e.Accum)' <WriteAlternative-Aux t.Alternative> ';');
}

WriteAlternative-Aux {
  (s.Head None t.NextState) =
    <Head s.Head>
    <NextState-L t.NextState>
    <NextState-R t.NextState 'e.Accum' <Head s.Head>>;

  (s.Head t.Flush t.NextState) =
    <Head s.Head>
    <NextState-L t.NextState>
    <Fetch
      <Flush s.Head t.Flush>
      <NextState-R t.NextState>
      {
        /* пусто */ = ' ';
        e.ResultNotEmpty = e.ResultNotEmpty;
      }
    >;
}

Head {
  Empty = /* пусто */;
  Any = ' s.Any';
  s.Other = ' \'' <EscapeChar s.Other> '\'';
}

Flush {
  s.Head Unnamed = /* пусто */;
  s.Head (Flush e.FlushName) = ' (' e.FlushName ' e.Accum' <Head s.Head> ')';
  s.Head (FlushError e.Message) = ' (TokenError \'' e.Message '\')';
}

NextState-L {
  Finitive = ' =';
  (e.NextStateName) = ' e.Text =';
}

NextState-R {
  Finitive e.NextStateAccum = /* пусто */;
  (e.NextStateName) e.NextStateAccum =
    ' <' e.NextStateName ' (<gen_e__ ' e.NextStateAccum '>) e.Text>';
}
