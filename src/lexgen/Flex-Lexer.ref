*$FROM LibraryEx
$EXTERN Fetch, Pipe, Reduce, Map, MapAccum, Inc;

*$FROM Escape
$EXTERN EscapeString;


$ENTRY Flex-TextFromToken {
  (TName t.Pos e.Name) = 'name ' e.Name;
  (TEquals t.Pos) = '"="';
  (TArrow t.Pos) = '"->"';
  (TSkip t.Pos) = '-';
  (TErrorMessage e.Message) = 'User error message "' e.Message '"';
  (TChar t.Pos s.Char) = '\'' <EscapeString s.Char> '\'';
  (TStartRegexp t.Pos) = '"/" (start)';
  (TEndRegexp t.Pos) = '"/" (end)';
  (TStartGroup t.Pos) = '"["';
  (TEndGroup t.Pos) = '"]"';

  (TInclude t.Pos e.Name) = '{' e.Name '}';
  (TAny t.Pos) = '"."';
  (TOpenBracket t.Pos) = '"("';
  (TCloseBracket t.Pos) = '")"';
  (TAlt t.Pos) = '"|"';
  (TBegin t.Pos) = '"^"';
  (TEnd t.Pos) = '"$"';
  (TOptional t.Pos) = '"?"';
  (TZeroMany t.Pos) = '"*"';
  (TOneMany t.Pos) = '"+"';

  (TInvertGroup t.Pos) = '"^"';
  (TGroupRange t.Pos) = '"-"';
  (TError t.Pos e.Message) = 'token error ' e.Message;
  (TStateStart t.Pos) = '"<"';
  (TComma t.Pos) = '","';
  (TStateEnd t.Pos) = '">"';
  (TEOF t.Pos) = 'EOF';
}

$ENTRY Flex-Tokens {
  s.FirstLineNumber e.DescriptionLines =
    <Fetch
      e.DescriptionLines
      <Pipe
        (&Map
          {
            (e.Line) = e.Line '\n';
          }
        )
        &LowLevelTokens
        (&Map &SecondPass)
        {
          e.Tokens (TEOF) = e.Tokens (TEOF);
          e.Tokens = e.Tokens (TEOF);
        }
        (&MapAccum
          {
            s.LineNumber (TNewLine '\n') =
              <Inc s.LineNumber>
              /* пропускаем */;

            s.LineNumber (s.Type e.Info) =
              s.LineNumber (s.Type s.LineNumber e.Info);
          }
          <Inc s.FirstLineNumber>
        )
        {
          s.LineNumber e.Tokens =
            e.Tokens;
        }
      >
    >;
}

LowLevelTokens {
  e.Text = <Root () e.Text>;
}

SecondPass {
  (TNewLine '\n') = (TNewLine '\n');
  (TName e.Name) = (TName e.Name);
  (TEquals '=') = (TEquals);
  (TArrow '>') = (TArrow);
  (TGenericEscChar 'n') = (TChar '\n');
  (TGenericEscChar 't') = (TChar '\t');
  (TGenericEscChar 'r') = (TChar '\r');
  (TGenericEscChar '\\') = (TChar '\\');
  (TChar s.Char) = (TChar s.Char);
  (TStartRegexp '/') = (TStartRegexp);
  (TEndRegexp '/') = (TEndRegexp);
  (TStartGroup '[') = (TStartGroup);
  (TEndGroup ']') = (TEndGroup);
  (TInclude e.Name '}') = (TInclude e.Name);
  (TSpecChar '.') = (TAny);
  (TSpecChar '(') = (TOpenBracket);
  (TSpecChar ')') = (TCloseBracket);
  (TSpecChar '|') = (TAlt);
  (TSpecChar '^') = (TBegin);
  (TSpecChar '$') = (TEnd);
  (TQuantifier '?') = (TOptional);
  (TQuantifier '*') = (TZeroMany);
  (TQuantifier '+') = (TOneMany);
  (TInvertGroup '^') = (TInvertGroup);
  (TGroupRange '-') = (TGroupRange);
  (TUnexpecteChar s.Char) = (TError 'Unexpected char \'' <EscapeString s.Char> '\'');
  (TokenError e.Message) = (TError e.Message);
  (TStateStart '<') = (TStateStart);
  (TComma ',') = (TComma);
  (TStateEnd '>') = (TStateEnd);
  (TkHexNumber e.HexCode) = (TChar <CharFromNum 16 e.HexCode>);
  (TkOctNumber e.OctCode) = (TChar <CharFromNum 8 e.OctCode>);
  (TSkip) = (TSkip);
  (TErrorMessage e.Message '"') = (TErrorMessage e.Message);
  (TEOF) = (TEOF);
}

CharFromNum {
  s.Base e.Chars =
    <Chr
      <Reduce
        {
          s.Accum s.Next = <Add <Mul s.Accum s.Base> s.Next>;
        }
        0 <Map &DigitFromChar e.Chars>
      >
    >;
}

DigitFromChar {
  s.Char =
    <Fetch
      (0 '0') (1 '1') (2 '2') (3 '3')
      (4 '4') (5 '5') (6 '6') (7 '7')
      (8 '8') (9 '9') (10 'Aa') (11 'Bb')
      (12 'Cc') (13 'Dd') (14 'Ee') (15 'Ff')
      {
        e.Assoc-B (s.Digit e.Vars-B s.Char e.Vars-E) e.Assoc-E =
          s.Digit;
      }
    >;
}

/*
 *
 */

/*GEN:TOKENS
  :UpLetters: = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
  :DownLetters: = 'abcdefghijklmnopqrstuvwxyz'.
  :Digit: = '0123456789'.
  :ODigit: = '01234567' .
  :XDigit: = '0123456789ABCDEFabcdef' .
  :NameChars: = :UpLetters: :DownLetters: :Digit:.
  :Spaces: = ' \t\r'.
  :GenericEsc: = '\\ntr'.
  :Quantifier: = '?*+'.
  :SpecChar: = '.()|^$'.

  Root =
    :Spaces:        !-                      Root                |
    '\n'            !TNewLine               Root                |
    '/'             !TStartRegexp           ReadRegexp          |
    '-'             !-                      ReadArrow           |
    '='             !TEquals                Root                |
    :Digit:                                 Number              |
    :UpLetters:                             Name                |
    '<'             !TStateStart            Root                |
    ','             !TComma                 Root                |
    '>'             !TStateEnd              Root                |
    '"'             !-                      ErrorMessage        |
    :Any:           !TUnexpecteChar         Root                |
                    !TEOF                                       .
  ReadArrow =
    '>'             !TArrow                 Root                |
                    !TSkip                  Root                .

  ErrorMessage =
    '"'             !TErrorMessage          Root                |
    :Any:                                   ErrorMessage        |
                    !"Unclosed error message"                   .

  ReadRegexp =
    '/'             !TEndRegexp             Root                |
    '\n'            !TNewLine               Root                |
    '\\'            !-                      EscRegexp           |
    '['             !TStartGroup            StartGroup          |
    :Quantifier:    !TQuantifier            ReadRegexp          |
    :SpecChar:      !TSpecChar              ReadRegexp          |
    '{'             !-                      ReadInclude         |
    :Any:           !TChar                  ReadRegexp          |
                    !"Unexpected EOF in Regexp"                 .

  EscRegexp =
    :GenericEsc:    !TGenericEscChar        ReadRegexp          |
    '/'             !TChar                  ReadRegexp          |
    'x'             !-                      EscRegexp-XCode     |
    'X'             !-                      EscRegexp-XCode     |
    :ODigit:                                EscRegexp-OCode     |
    :SpecChar:      !TChar                  ReadRegexp          |
    :Any:           !"Bad escaped symbol"   ReadRegexp          |
                    !"Unexpected EOF in Regexp"                 .

  StartGroup =
    '^'             !TInvertGroup           ReadGroup           |
                                            ReadGroup           .

  ReadGroup =
    ']'             !TEndGroup              ReadRegexp          |
    '-'             !TGroupRange            ReadGroup           |
    '\\'            !-                      EscGroup            |
    :Any:           !TChar                  ReadGroup           |
                    !"Unexpected EOF in Regexp"                 .

  EscGroup =
    :GenericEsc:    !TGenericEscChar        ReadGroup           |
    ']'             !TChar                  ReadGroup           |
    '-'             !TChar                  ReadGroup           |
    'x'             !-                      EscGroup-XCode      |
    'X'             !-                      EscGroup-XCode      |
    :ODigit:                                EscGroup-OCode      |
    :Any:           !"Bad escaped symbol"   ReadGroup           |
                    !"Unexpected EOF in Regexp"                 .

  ReadInclude =
    :UpLetters:                             ReadBody            |
    :Any:           !"Expected Name in Include"
                                            ReadRegexp          |
                    !"Unexpected EOF in Include"                .

  ReadBody =
    :NameChars:                             ReadBody            |
    '}'             !TInclude               ReadRegexp          |
                    !"Unclused include"     ReadRegexp          .

  Name =
    :NameChars:                             Name                |
                    !TName                  Root                .

  Number =
    :Digit:                                 Number              |
                    !TkNumber               Root                .

  EscRegexp-XCode =
    :XDigit:                                EscRegexp-XCode     |
                    !TkHexNumber            ReadRegexp          .

  EscRegexp-OCode =
    :ODigit:                                EscRegexp-OCode-C1  |
                    !TkOctNumber            ReadRegexp          .

  EscRegexp-OCode-C1 =
    :ODigit:        !TkOctNumber            ReadRegexp          |
                    !TkOctNumber            ReadRegexp          .

  EscGroup-XCode =
    :XDigit:                                EscGroup-XCode      |
                    !TkHexNumber            ReadGroup           .

  EscGroup-OCode =
    :ODigit:                                EscGroup-OCode-C1   |
                    !TkOctNumber            ReadGroup           .

  EscGroup-OCode-C1 =
    :ODigit:        !TkOctNumber            ReadGroup           |
                    !TkOctNumber            ReadGroup           .

GEN:END*/

Root {
  (e.Accum) ' ' e.Text = <Root (<gen_e__ >) e.Text>;
  (e.Accum) '\t' e.Text = <Root (<gen_e__ >) e.Text>;
  (e.Accum) '\r' e.Text = <Root (<gen_e__ >) e.Text>;
  (e.Accum) '\n' e.Text = (TNewLine e.Accum '\n') <Root (<gen_e__ >) e.Text>;
  (e.Accum) '/' e.Text = (TStartRegexp e.Accum '/') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '-' e.Text = <ReadArrow (<gen_e__ >) e.Text>;
  (e.Accum) '=' e.Text = (TEquals e.Accum '=') <Root (<gen_e__ >) e.Text>;
  (e.Accum) '0' e.Text = <Number (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <Number (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <Number (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <Number (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <Number (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <Number (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <Number (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <Number (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <Number (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <Number (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'A' e.Text = <Name (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <Name (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <Name (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <Name (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <Name (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <Name (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <Name (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <Name (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <Name (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <Name (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <Name (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <Name (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <Name (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <Name (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <Name (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <Name (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <Name (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <Name (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <Name (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <Name (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <Name (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <Name (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <Name (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <Name (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <Name (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <Name (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) '<' e.Text = (TStateStart e.Accum '<') <Root (<gen_e__ >) e.Text>;
  (e.Accum) ',' e.Text = (TComma e.Accum ',') <Root (<gen_e__ >) e.Text>;
  (e.Accum) '>' e.Text = (TStateEnd e.Accum '>') <Root (<gen_e__ >) e.Text>;
  (e.Accum) '\"' e.Text = <ErrorMessage (<gen_e__ >) e.Text>;
  (e.Accum) s.Any e.Text = (TUnexpecteChar e.Accum s.Any) <Root (<gen_e__ >) e.Text>;
  (e.Accum) = (TEOF e.Accum);
}

ReadRegexp {
  (e.Accum) '/' e.Text = (TEndRegexp e.Accum '/') <Root (<gen_e__ >) e.Text>;
  (e.Accum) '\n' e.Text = (TNewLine e.Accum '\n') <Root (<gen_e__ >) e.Text>;
  (e.Accum) '\\' e.Text = <EscRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '[' e.Text = (TStartGroup e.Accum '[') <StartGroup (<gen_e__ >) e.Text>;
  (e.Accum) '?' e.Text = (TQuantifier e.Accum '?') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '*' e.Text = (TQuantifier e.Accum '*') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '+' e.Text = (TQuantifier e.Accum '+') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '.' e.Text = (TSpecChar e.Accum '.') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '(' e.Text = (TSpecChar e.Accum '(') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) ')' e.Text = (TSpecChar e.Accum ')') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '|' e.Text = (TSpecChar e.Accum '|') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '^' e.Text = (TSpecChar e.Accum '^') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '$' e.Text = (TSpecChar e.Accum '$') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '{' e.Text = <ReadInclude (<gen_e__ >) e.Text>;
  (e.Accum) s.Any e.Text = (TChar e.Accum s.Any) <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) = (TokenError 'Unexpected EOF in Regexp');
}

ReadArrow {
  (e.Accum) '>' e.Text = (TArrow e.Accum '>') <Root (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (TSkip e.Accum) <Root (<gen_e__ >) e.Text>;
}

Number {
  (e.Accum) '0' e.Text = <Number (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <Number (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <Number (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <Number (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <Number (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <Number (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <Number (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <Number (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <Number (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <Number (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) e.Text = (TkNumber e.Accum) <Root (<gen_e__ >) e.Text>;
}

Name {
  (e.Accum) '0' e.Text = <Name (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <Name (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <Name (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <Name (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <Name (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <Name (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <Name (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <Name (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <Name (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <Name (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'a' e.Text = <Name (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <Name (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <Name (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <Name (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <Name (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <Name (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) 'g' e.Text = <Name (<gen_e__ e.Accum 'g'>) e.Text>;
  (e.Accum) 'h' e.Text = <Name (<gen_e__ e.Accum 'h'>) e.Text>;
  (e.Accum) 'i' e.Text = <Name (<gen_e__ e.Accum 'i'>) e.Text>;
  (e.Accum) 'j' e.Text = <Name (<gen_e__ e.Accum 'j'>) e.Text>;
  (e.Accum) 'k' e.Text = <Name (<gen_e__ e.Accum 'k'>) e.Text>;
  (e.Accum) 'l' e.Text = <Name (<gen_e__ e.Accum 'l'>) e.Text>;
  (e.Accum) 'm' e.Text = <Name (<gen_e__ e.Accum 'm'>) e.Text>;
  (e.Accum) 'n' e.Text = <Name (<gen_e__ e.Accum 'n'>) e.Text>;
  (e.Accum) 'o' e.Text = <Name (<gen_e__ e.Accum 'o'>) e.Text>;
  (e.Accum) 'p' e.Text = <Name (<gen_e__ e.Accum 'p'>) e.Text>;
  (e.Accum) 'q' e.Text = <Name (<gen_e__ e.Accum 'q'>) e.Text>;
  (e.Accum) 'r' e.Text = <Name (<gen_e__ e.Accum 'r'>) e.Text>;
  (e.Accum) 's' e.Text = <Name (<gen_e__ e.Accum 's'>) e.Text>;
  (e.Accum) 't' e.Text = <Name (<gen_e__ e.Accum 't'>) e.Text>;
  (e.Accum) 'u' e.Text = <Name (<gen_e__ e.Accum 'u'>) e.Text>;
  (e.Accum) 'v' e.Text = <Name (<gen_e__ e.Accum 'v'>) e.Text>;
  (e.Accum) 'w' e.Text = <Name (<gen_e__ e.Accum 'w'>) e.Text>;
  (e.Accum) 'x' e.Text = <Name (<gen_e__ e.Accum 'x'>) e.Text>;
  (e.Accum) 'y' e.Text = <Name (<gen_e__ e.Accum 'y'>) e.Text>;
  (e.Accum) 'z' e.Text = <Name (<gen_e__ e.Accum 'z'>) e.Text>;
  (e.Accum) 'A' e.Text = <Name (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <Name (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <Name (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <Name (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <Name (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <Name (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <Name (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <Name (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <Name (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <Name (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <Name (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <Name (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <Name (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <Name (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <Name (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <Name (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <Name (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <Name (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <Name (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <Name (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <Name (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <Name (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <Name (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <Name (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <Name (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <Name (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) e.Text = (TName e.Accum) <Root (<gen_e__ >) e.Text>;
}

ErrorMessage {
  (e.Accum) '\"' e.Text = (TErrorMessage e.Accum '\"') <Root (<gen_e__ >) e.Text>;
  (e.Accum) s.Any e.Text = <ErrorMessage (<gen_e__ e.Accum s.Any>) e.Text>;
  (e.Accum) = (TokenError 'Unclosed error message');
}

EscRegexp {
  (e.Accum) '\\' e.Text = (TGenericEscChar e.Accum '\\') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) 'n' e.Text = (TGenericEscChar e.Accum 'n') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) 't' e.Text = (TGenericEscChar e.Accum 't') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) 'r' e.Text = (TGenericEscChar e.Accum 'r') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '/' e.Text = (TChar e.Accum '/') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) 'x' e.Text = <EscRegexp-XCode (<gen_e__ >) e.Text>;
  (e.Accum) 'X' e.Text = <EscRegexp-XCode (<gen_e__ >) e.Text>;
  (e.Accum) '0' e.Text = <EscRegexp-OCode (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <EscRegexp-OCode (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <EscRegexp-OCode (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <EscRegexp-OCode (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <EscRegexp-OCode (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <EscRegexp-OCode (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <EscRegexp-OCode (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <EscRegexp-OCode (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '.' e.Text = (TChar e.Accum '.') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '(' e.Text = (TChar e.Accum '(') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) ')' e.Text = (TChar e.Accum ')') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '|' e.Text = (TChar e.Accum '|') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '^' e.Text = (TChar e.Accum '^') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '$' e.Text = (TChar e.Accum '$') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) s.Any e.Text = (TokenError 'Bad escaped symbol') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) = (TokenError 'Unexpected EOF in Regexp');
}

StartGroup {
  (e.Accum) '^' e.Text = (TInvertGroup e.Accum '^') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = <ReadGroup (<gen_e__ e.Accum>) e.Text>;
}

ReadInclude {
  (e.Accum) 'A' e.Text = <ReadBody (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <ReadBody (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <ReadBody (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <ReadBody (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <ReadBody (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <ReadBody (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <ReadBody (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <ReadBody (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <ReadBody (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <ReadBody (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <ReadBody (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <ReadBody (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <ReadBody (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <ReadBody (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <ReadBody (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <ReadBody (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <ReadBody (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <ReadBody (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <ReadBody (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <ReadBody (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <ReadBody (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <ReadBody (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <ReadBody (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <ReadBody (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <ReadBody (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <ReadBody (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) s.Any e.Text = (TokenError 'Expected Name in Include') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) = (TokenError 'Unexpected EOF in Include');
}

EscRegexp-XCode {
  (e.Accum) '0' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'A' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'a' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <EscRegexp-XCode (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) e.Text = (TkHexNumber e.Accum) <ReadRegexp (<gen_e__ >) e.Text>;
}

EscRegexp-OCode {
  (e.Accum) '0' e.Text = <EscRegexp-OCode-C1 (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <EscRegexp-OCode-C1 (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <EscRegexp-OCode-C1 (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <EscRegexp-OCode-C1 (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <EscRegexp-OCode-C1 (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <EscRegexp-OCode-C1 (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <EscRegexp-OCode-C1 (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <EscRegexp-OCode-C1 (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) e.Text = (TkOctNumber e.Accum) <ReadRegexp (<gen_e__ >) e.Text>;
}

ReadGroup {
  (e.Accum) ']' e.Text = (TEndGroup e.Accum ']') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '-' e.Text = (TGroupRange e.Accum '-') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) '\\' e.Text = <EscGroup (<gen_e__ >) e.Text>;
  (e.Accum) s.Any e.Text = (TChar e.Accum s.Any) <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) = (TokenError 'Unexpected EOF in Regexp');
}

ReadBody {
  (e.Accum) '0' e.Text = <ReadBody (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <ReadBody (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <ReadBody (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <ReadBody (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <ReadBody (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <ReadBody (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <ReadBody (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <ReadBody (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <ReadBody (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <ReadBody (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'a' e.Text = <ReadBody (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <ReadBody (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <ReadBody (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <ReadBody (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <ReadBody (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <ReadBody (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) 'g' e.Text = <ReadBody (<gen_e__ e.Accum 'g'>) e.Text>;
  (e.Accum) 'h' e.Text = <ReadBody (<gen_e__ e.Accum 'h'>) e.Text>;
  (e.Accum) 'i' e.Text = <ReadBody (<gen_e__ e.Accum 'i'>) e.Text>;
  (e.Accum) 'j' e.Text = <ReadBody (<gen_e__ e.Accum 'j'>) e.Text>;
  (e.Accum) 'k' e.Text = <ReadBody (<gen_e__ e.Accum 'k'>) e.Text>;
  (e.Accum) 'l' e.Text = <ReadBody (<gen_e__ e.Accum 'l'>) e.Text>;
  (e.Accum) 'm' e.Text = <ReadBody (<gen_e__ e.Accum 'm'>) e.Text>;
  (e.Accum) 'n' e.Text = <ReadBody (<gen_e__ e.Accum 'n'>) e.Text>;
  (e.Accum) 'o' e.Text = <ReadBody (<gen_e__ e.Accum 'o'>) e.Text>;
  (e.Accum) 'p' e.Text = <ReadBody (<gen_e__ e.Accum 'p'>) e.Text>;
  (e.Accum) 'q' e.Text = <ReadBody (<gen_e__ e.Accum 'q'>) e.Text>;
  (e.Accum) 'r' e.Text = <ReadBody (<gen_e__ e.Accum 'r'>) e.Text>;
  (e.Accum) 's' e.Text = <ReadBody (<gen_e__ e.Accum 's'>) e.Text>;
  (e.Accum) 't' e.Text = <ReadBody (<gen_e__ e.Accum 't'>) e.Text>;
  (e.Accum) 'u' e.Text = <ReadBody (<gen_e__ e.Accum 'u'>) e.Text>;
  (e.Accum) 'v' e.Text = <ReadBody (<gen_e__ e.Accum 'v'>) e.Text>;
  (e.Accum) 'w' e.Text = <ReadBody (<gen_e__ e.Accum 'w'>) e.Text>;
  (e.Accum) 'x' e.Text = <ReadBody (<gen_e__ e.Accum 'x'>) e.Text>;
  (e.Accum) 'y' e.Text = <ReadBody (<gen_e__ e.Accum 'y'>) e.Text>;
  (e.Accum) 'z' e.Text = <ReadBody (<gen_e__ e.Accum 'z'>) e.Text>;
  (e.Accum) 'A' e.Text = <ReadBody (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <ReadBody (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <ReadBody (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <ReadBody (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <ReadBody (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <ReadBody (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'G' e.Text = <ReadBody (<gen_e__ e.Accum 'G'>) e.Text>;
  (e.Accum) 'H' e.Text = <ReadBody (<gen_e__ e.Accum 'H'>) e.Text>;
  (e.Accum) 'I' e.Text = <ReadBody (<gen_e__ e.Accum 'I'>) e.Text>;
  (e.Accum) 'J' e.Text = <ReadBody (<gen_e__ e.Accum 'J'>) e.Text>;
  (e.Accum) 'K' e.Text = <ReadBody (<gen_e__ e.Accum 'K'>) e.Text>;
  (e.Accum) 'L' e.Text = <ReadBody (<gen_e__ e.Accum 'L'>) e.Text>;
  (e.Accum) 'M' e.Text = <ReadBody (<gen_e__ e.Accum 'M'>) e.Text>;
  (e.Accum) 'N' e.Text = <ReadBody (<gen_e__ e.Accum 'N'>) e.Text>;
  (e.Accum) 'O' e.Text = <ReadBody (<gen_e__ e.Accum 'O'>) e.Text>;
  (e.Accum) 'P' e.Text = <ReadBody (<gen_e__ e.Accum 'P'>) e.Text>;
  (e.Accum) 'Q' e.Text = <ReadBody (<gen_e__ e.Accum 'Q'>) e.Text>;
  (e.Accum) 'R' e.Text = <ReadBody (<gen_e__ e.Accum 'R'>) e.Text>;
  (e.Accum) 'S' e.Text = <ReadBody (<gen_e__ e.Accum 'S'>) e.Text>;
  (e.Accum) 'T' e.Text = <ReadBody (<gen_e__ e.Accum 'T'>) e.Text>;
  (e.Accum) 'U' e.Text = <ReadBody (<gen_e__ e.Accum 'U'>) e.Text>;
  (e.Accum) 'V' e.Text = <ReadBody (<gen_e__ e.Accum 'V'>) e.Text>;
  (e.Accum) 'W' e.Text = <ReadBody (<gen_e__ e.Accum 'W'>) e.Text>;
  (e.Accum) 'X' e.Text = <ReadBody (<gen_e__ e.Accum 'X'>) e.Text>;
  (e.Accum) 'Y' e.Text = <ReadBody (<gen_e__ e.Accum 'Y'>) e.Text>;
  (e.Accum) 'Z' e.Text = <ReadBody (<gen_e__ e.Accum 'Z'>) e.Text>;
  (e.Accum) '}' e.Text = (TInclude e.Accum '}') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (TokenError 'Unclused include') <ReadRegexp (<gen_e__ >) e.Text>;
}

EscRegexp-OCode-C1 {
  (e.Accum) '0' e.Text = (TkOctNumber e.Accum '0') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '1' e.Text = (TkOctNumber e.Accum '1') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '2' e.Text = (TkOctNumber e.Accum '2') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '3' e.Text = (TkOctNumber e.Accum '3') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '4' e.Text = (TkOctNumber e.Accum '4') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '5' e.Text = (TkOctNumber e.Accum '5') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '6' e.Text = (TkOctNumber e.Accum '6') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) '7' e.Text = (TkOctNumber e.Accum '7') <ReadRegexp (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (TkOctNumber e.Accum) <ReadRegexp (<gen_e__ >) e.Text>;
}

EscGroup {
  (e.Accum) '\\' e.Text = (TGenericEscChar e.Accum '\\') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) 'n' e.Text = (TGenericEscChar e.Accum 'n') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) 't' e.Text = (TGenericEscChar e.Accum 't') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) 'r' e.Text = (TGenericEscChar e.Accum 'r') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) ']' e.Text = (TChar e.Accum ']') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) '-' e.Text = (TChar e.Accum '-') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) 'x' e.Text = <EscGroup-XCode (<gen_e__ >) e.Text>;
  (e.Accum) 'X' e.Text = <EscGroup-XCode (<gen_e__ >) e.Text>;
  (e.Accum) '0' e.Text = <EscGroup-OCode (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <EscGroup-OCode (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <EscGroup-OCode (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <EscGroup-OCode (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <EscGroup-OCode (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <EscGroup-OCode (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <EscGroup-OCode (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <EscGroup-OCode (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) s.Any e.Text = (TokenError 'Bad escaped symbol') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) = (TokenError 'Unexpected EOF in Regexp');
}

EscGroup-XCode {
  (e.Accum) '0' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) '8' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '8'>) e.Text>;
  (e.Accum) '9' e.Text = <EscGroup-XCode (<gen_e__ e.Accum '9'>) e.Text>;
  (e.Accum) 'A' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'A'>) e.Text>;
  (e.Accum) 'B' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'B'>) e.Text>;
  (e.Accum) 'C' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'C'>) e.Text>;
  (e.Accum) 'D' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'D'>) e.Text>;
  (e.Accum) 'E' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'E'>) e.Text>;
  (e.Accum) 'F' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'F'>) e.Text>;
  (e.Accum) 'a' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'a'>) e.Text>;
  (e.Accum) 'b' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'b'>) e.Text>;
  (e.Accum) 'c' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'c'>) e.Text>;
  (e.Accum) 'd' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'd'>) e.Text>;
  (e.Accum) 'e' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'e'>) e.Text>;
  (e.Accum) 'f' e.Text = <EscGroup-XCode (<gen_e__ e.Accum 'f'>) e.Text>;
  (e.Accum) e.Text = (TkHexNumber e.Accum) <ReadGroup (<gen_e__ >) e.Text>;
}

EscGroup-OCode {
  (e.Accum) '0' e.Text = <EscGroup-OCode-C1 (<gen_e__ e.Accum '0'>) e.Text>;
  (e.Accum) '1' e.Text = <EscGroup-OCode-C1 (<gen_e__ e.Accum '1'>) e.Text>;
  (e.Accum) '2' e.Text = <EscGroup-OCode-C1 (<gen_e__ e.Accum '2'>) e.Text>;
  (e.Accum) '3' e.Text = <EscGroup-OCode-C1 (<gen_e__ e.Accum '3'>) e.Text>;
  (e.Accum) '4' e.Text = <EscGroup-OCode-C1 (<gen_e__ e.Accum '4'>) e.Text>;
  (e.Accum) '5' e.Text = <EscGroup-OCode-C1 (<gen_e__ e.Accum '5'>) e.Text>;
  (e.Accum) '6' e.Text = <EscGroup-OCode-C1 (<gen_e__ e.Accum '6'>) e.Text>;
  (e.Accum) '7' e.Text = <EscGroup-OCode-C1 (<gen_e__ e.Accum '7'>) e.Text>;
  (e.Accum) e.Text = (TkOctNumber e.Accum) <ReadGroup (<gen_e__ >) e.Text>;
}

EscGroup-OCode-C1 {
  (e.Accum) '0' e.Text = (TkOctNumber e.Accum '0') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) '1' e.Text = (TkOctNumber e.Accum '1') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) '2' e.Text = (TkOctNumber e.Accum '2') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) '3' e.Text = (TkOctNumber e.Accum '3') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) '4' e.Text = (TkOctNumber e.Accum '4') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) '5' e.Text = (TkOctNumber e.Accum '5') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) '6' e.Text = (TkOctNumber e.Accum '6') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) '7' e.Text = (TkOctNumber e.Accum '7') <ReadGroup (<gen_e__ >) e.Text>;
  (e.Accum) e.Text = (TkOctNumber e.Accum) <ReadGroup (<gen_e__ >) e.Text>;
}

gen_e__ { e.any = e.any; }
