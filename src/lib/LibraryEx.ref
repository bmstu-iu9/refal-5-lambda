$INCLUDE "LibraryEx";

*$FROM Library
$EXTERN Open-Auto, Close, Get, Putout, Add, Sub, Arg,
  SymbCompare, ReadBytes, WriteBytes;

$ENTRY Apply;

$ENTRY Map;

$ENTRY Reduce;

$ENTRY Fetch;

$ENTRY MapAccum;

$ENTRY UnBracket;

$ENTRY DelAccumulator;

$ENTRY LoadFile {
  e.FileName
    = <Open-Auto 'r' e.FileName> : t.File
    = <DoLoadFile t.File <Get t.File>>;
}

DoLoadFile {
  t.File 0 = <Close t.File>;

  t.File e.Line 0 = (e.Line) <Close t.File>;

  t.File e.Line = (e.Line) <DoLoadFile t.File <Get t.File>>;
}

$ENTRY SaveFile {
  (e.FileName) e.Lines = <SaveFile-Handle <Open-Auto 'w' e.FileName> e.Lines>;
}

$ENTRY AppendFile {
  (e.FileName) e.Lines = <SaveFile-Handle <Open-Auto 'a' e.FileName> e.Lines>;
}

SaveFile-Handle {
  s.FileHandle e.Lines
    = <Map
        {
          (e.Line) = <Putout s.FileHandle e.Line>;
        }
        e.Lines
      >
      <Close s.FileHandle>;
}

$ENTRY LoadBytes {
  e.FileName = <DoLoadBytes <Open-Auto ('rb') e.FileName>>;
}

DoLoadBytes {
  s.FileHandle
    = <ReadBytes s.FileHandle 4096>
    : {
        /* пусто */ = <Close s.FileHandle>;
        e.Bytes = e.Bytes <DoLoadBytes s.FileHandle>;
      };
}

$ENTRY SaveBytes {
  (e.FileName) e.Bytes
    = <SaveBytes-Handle <Open-Auto ('wb') e.FileName> e.Bytes>;
}

$ENTRY AppendBytes {
  (e.FileName) e.Bytes
    = <SaveBytes-Handle <Open-Auto ('ab') e.FileName> e.Bytes>;
}

SaveBytes-Handle {
  s.FileHandle e.Bytes
    = <WriteBytes s.FileHandle e.Bytes>
      <Close s.FileHandle>;
}

$ENTRY Inc;
$ENTRY Dec;

/**
  <ArgList> == (e.Arg)+
  e.Arg ::= s.CHAR*
*/
$ENTRY ArgList {
  = <DoArgList 0>;
}

DoArgList {
  s.Next = <SwDoArgList <Inc s.Next> <Arg s.Next>>;
}

SwDoArgList {
  s.Next = ;

  s.Next e.Arg = (e.Arg) <DoArgList s.Next>;
}

$ENTRY TermCompare {
  (e.Left) (e.Right) = <Lexicon (e.Left) (e.Right)>;

  (e.Left) s.Right = '>';
  s.Left (e.Right) = '<';

  s.Left s.Right = <SymbCompare s.Left s.Right>;
}

Lexicon {
  (t.FirstLeft e.Left) (t.FirstRight e.Right)
    = <Lexicon-Aux
        <TermCompare t.FirstLeft t.FirstRight>
        (e.Left) (e.Right)
      >;

  () () = '=';

  () (e.Right) = '<';
  (e.Left) () = '>';
}

Lexicon-Aux {
  '<' (e.Left) (e.Right) = '<';
  '=' (e.Left) (e.Right) = <Lexicon (e.Left) (e.Right)>;
  '>' (e.Left) (e.Right) = '>';
}

$ENTRY TermCompare-T {
  (e.Left) (e.Right) = <Lexicon-T () (e.Left) () (e.Right)>;

  (e.Left) s.Right = '>' (e.Left) s.Right;
  s.Left (e.Right) = '<' s.Left (e.Right);

  s.Left s.Right = <SymbCompare s.Left s.Right> s.Left s.Right;
}

Lexicon-T {
  (e.ScannedLeft) (t.FirstLeft e.Left)
  (e.ScannedRight) (t.FirstRight e.Right)
    = <Lexicon-T-Aux
        (e.ScannedLeft) (e.ScannedRight)
        <TermCompare-T t.FirstLeft t.FirstRight>
        (e.Left) (e.Right)
      >;

  (e.ScannedLeft) () (e.ScannedRight) ()
    = '=' (e.ScannedLeft) (e.ScannedRight);

  (e.ScannedLeft) () (e.ScannedRight) (e.Right)
    = '<' (e.ScannedLeft) (e.ScannedRight e.Right);

  (e.ScannedLeft) (e.Left) (e.ScannedRight) ()
    = '>' (e.ScannedLeft e.Left) (e.ScannedRight);
}

Lexicon-T-Aux {
  (e.ScannedLeft) (e.ScannedRight)
  '<' t.NextLeft t.NextRight (e.Left) (e.Right)
    = '<'
      (e.ScannedLeft t.NextLeft e.Left)
      (e.ScannedRight t.NextRight e.Right);

  (e.ScannedLeft) (e.ScannedRight)
  '=' t.NextLeft t.NextRight (e.Left) (e.Right)
    = <Lexicon-T
        (e.ScannedLeft t.NextLeft) (e.Left)
        (e.ScannedRight t.NextRight) (e.Right)
      >;

  (e.ScannedLeft) (e.ScannedRight)
  '>' t.NextLeft t.NextRight (e.Left) (e.Right)
    = '>'
      (e.ScannedLeft t.NextLeft e.Left)
      (e.ScannedRight t.NextRight e.Right);
}

/**
  <Trim s.CHAR*> == s.CHAR*
  <Trim-L s.CHAR*> == s.CHAR*
  <Trim-R s.CHAR*> == s.CHAR*
*/
$ENTRY Trim {
  e.Line = <Trim-L <Trim-R e.Line>>;
}

$ENTRY Trim-L {
  ' ' e.Line = <Trim-L e.Line>;
  '\t' e.Line = <Trim-L e.Line>;
  '\r' e.Line = <Trim-L e.Line>;
  '\n' e.Line = <Trim-L e.Line>;
  e.Line = e.Line;
}

$ENTRY Trim-R {
  e.Line ' ' = <Trim-R e.Line>;
  e.Line '\t' = <Trim-R e.Line>;
  e.Line '\r' = <Trim-R e.Line>;
  e.Line '\n' = <Trim-R e.Line>;
  e.Line = e.Line;
}


$ENTRY Pipe;

$ENTRY Sort {
  /* пусто */ = /* пусто */;

  t.Pivot e.Items
    = <Reduce
        {
          ((e.Less) (e.Equal) (e.Greater)) t.Next
            = <TermCompare t.Next t.Pivot>
            : {
                '<' = ((e.Less t.Next) (e.Equal) (e.Greater));
                '=' = ((e.Less) (e.Equal t.Next) (e.Greater));
                '>' = ((e.Less) (e.Equal) (e.Greater t.Next));
              };
        }
        ( (/* less */) (t.Pivot /* equal */) (/* greater */) )
        e.Items
      >
    : ((e.Less) (e.Equal) (e.Greater))
    = <Sort e.Less> e.Equal <Sort e.Greater>;
}

$ENTRY Min {
  t.X t.Y
    = <TermCompare t.X t.Y>
    : {
        '<' = t.X;
        s.Other = t.Y;
      };

  t.First e.Tail = <Reduce &Min t.First e.Tail>;
}

$ENTRY Max {
  t.X t.Y
    = <TermCompare t.X t.Y>
    : {
        '>' = t.X;
        s.Other = t.Y;
      };

  t.First e.Tail = <Reduce &Max t.First e.Tail>;
}

/**
  <OneOf t.Elem e.SampleElems> == True | False
*/
$ENTRY OneOf {
  t.Sample e.Items-B t.Sample e.Items-E = True;
  t.Sample e.Items = False;
}

/**
  <Unique t.Item*> == t.Item*
*/
$ENTRY Unique {
  e.Uniques t.Repeated e.Items-B t.Repeated e.Items-E
    = e.Uniques <Unique e.Items-B t.Repeated e.Items-E>;

  e.Uniques = e.Uniques;
}


/**
  <TryLoadExpr e.FileName>
    == Success e.ANY | Fails e.Error

  e.Error ::= (s.Line s.Col) e.Message
  s.Line, s.Col ::= s.NUMBER
  e.Message ::= s.CHAR*
*/
$ENTRY TryLoadExpr {
  e.FileName
    = <TryLoadExpr-Parse
        ('$' /* scanned */) <TryLoadExpr-Prepare <LoadFile e.FileName>>
      >;
}

TryLoadExpr-Prepare {
  e.Lines = <DelAccumulator <MapAccum TryLoadExpr-PrepareLine 1 e.Lines>>;
}

TryLoadExpr-PrepareLine {
  s.LineNo ('*' e.Line) = <Inc s.LineNo>;

  s.LineNo (e.Line) = <Inc s.LineNo> (s.LineNo <Lenw e.Line>);
}

TryLoadExpr-Parse {
  (e.Scanned) (s.LineNo s.LineLen s.Letter e.Line) e.Lines
    , <Type s.Letter> : 'L' e.1
    = <TryLoadExpr-Parse-Ident
        (e.Scanned) (s.LineNo s.LineLen <Implode s.Letter e.Line>) e.Lines
      >;

  (e.Scanned) (s.LineNo s.LineLen s.Digit e.Line) e.Lines
    , <Type s.Digit> : 'D' e.1
    = <TryLoadExpr-Parse-Number
        (e.Scanned) (s.Digit) (s.LineNo s.LineLen <Type e.Line>) e.Lines
      >;

  (e.Scanned) (s.LineNo s.LineLen s.Quote e.Line) e.Lines
    , '\'\"' : e.1 s.Quote e.2
    = <TryLoadExpr-Parse-Quote
        (e.Scanned) (s.Quote) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (t.Stack e.Scanned) (s.LineNo s.LineLen '(' e.Line) e.Lines
    = <TryLoadExpr-Parse
        ((t.Stack e.Scanned (s.LineNo s.LineLen e.Line)))
        (s.LineNo s.LineLen e.Line) e.Lines
      >;

  ((t.Stack e.Scanned t.PosInfo) e.Bracketed)
  (s.LineNo s.LineLen ')' e.Line) e.Lines
    = <TryLoadExpr-Parse
        (t.Stack e.Scanned (e.Bracketed)) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  ('$' e.Scanned) (s.LineNo s.LineLen ')' e.Line) e.Lines
    = <TryLoadExpr-MakeError
        s.LineNo s.LineLen (e.Line) 'Unbalanced bracket \')\''
      >;

  (e.Scanned) (s.LineNo s.LineLen s.Char e.Line) e.Lines
    = <TryLoadExpr-Parse
        (e.Scanned <SkipSpace s.Char>) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.LineNo s.LineLen /* пусто */) e.Lines
    = <TryLoadExpr-Parse (e.Scanned) e.Lines>;

  ('$' e.Scanned) /* пусто */ = Success e.Scanned;

  ((t.Stack e.Scanned (s.LineNo s.LineLen e.Line)) e.Bracketed) /* пусто */
    = <TryLoadExpr-MakeError
        s.LineNo s.LineLen (e.Line) 'Unbalanced bracket \'(\''
      >;
}

TryLoadExpr-Parse-Ident {
  (e.Scanned) (s.LineNo s.LineLen s.Word e.Line) e.Lines
    = <TryLoadExpr-Parse
        (e.Scanned s.Word) (s.LineNo s.LineLen e.Line) e.Lines
      >;
}

TryLoadExpr-Parse-Number {
  (e.Scanned) (e.Number) (s.LineNo s.LineLen 'D' s.1 s.Digit e.Line) e.Lines
    = <TryLoadExpr-Parse-Number
        (e.Scanned) (e.Number s.Digit) (s.LineNo s.LineLen <Type e.Line>) e.Lines
      >;

  (e.Scanned) (e.Number) (s.LineNo s.LineLen s.1 s.2 e.Line) e.Lines
    , <Numb e.Number>
    : {
        s.OneNumber
          = <TryLoadExpr-Parse
              (e.Scanned s.OneNumber) (s.LineNo s.LineLen e.Line) e.Lines
            >;

        e.SomeNumbers
          = <TryLoadExpr-MakeError
              s.LineNo s.LineLen (e.Line)
              'Very long number literal ' e.Number
            >;
      }
}

TryLoadExpr-MakeError {
  s.LineNo s.LineLen (e.Rest) e.Message
    , <Lenw e.Rest> : s.RestLen e.1
    = Fails (s.LineNo <Inc <- s.LineLen s.RestLen>>) e.Message;
}

TryLoadExpr-Parse-Quote {
  (e.Scanned) ('\'' e.Text) (s.LineNo s.LineLen '\'' e.Line) e.Lines
    = <TryLoadExpr-Parse
        (e.Scanned e.Text) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) ('"' e.Text) (s.LineNo s.LineLen '"' e.Line) e.Lines
    = <TryLoadExpr-Parse
        (e.Scanned <Implode_Ext e.Text>) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen '\\x' e.Line) e.Lines
    = <TryLoadExpr-Parse-Hex
        (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.Quote e.Text)
  (s.LineNo s.LineLen '\\' s.Escaped e.Line) e.Lines
    , ('\'\'') ('\"\"') ('\\\\') ('n\n') ('r\r') ('t\t')
      ('<<') ('>>') ('((') ('))')
    : {
        e.Escapes-B (s.Escaped s.Char) e.Escapes-E
          = <TryLoadExpr-Parse-Quote
              (e.Scanned) (s.Quote e.Text s.Char)
              (s.LineNo s.LineLen e.Line) e.Lines
            >;

        e.Escapes
          = <TryLoadExpr-MakeError
              s.LineNo s.LineLen (e.Line)
              'Bad escape sequence \\' s.Escaped
            >;
      };

  (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen s.Char e.Line) e.Lines
    = <TryLoadExpr-Parse-Quote
        (e.Scanned) (s.Quote e.Text s.Char) (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen /* пусто */) e.Lines
    = <TryLoadExpr-MakeError s.LineNo s.LineLen () 'Unclosed quote ' s.Quote>;
}

SkipSpace {
  ' ' = /* пропускаем */;
  '\t' = /* пропускаем */;
  s.Char = s.Char;
}

TryLoadExpr-Parse-Hex {
  (e.Scanned) (s.Quote e.Text) (s.LineNo s.LineLen s.H1 s.H2 e.Line) e.Lines
    , <Hex s.H1> : s.Val1
    , <Hex s.H2> : s.Val2
    = <TryLoadExpr-Parse-Quote
        (e.Scanned)
        (s.Quote e.Text <Chr <+ <* s.Val1 16> s.Val2>>)
        (s.LineNo s.LineLen e.Line) e.Lines
      >;

  (e.Scanned) (s.Qoute e.Text) (s.LineNo s.LineLen e.Line) e.Lines
    = <TryLoadExpr-MakeError
        s.LineNo s.LineLen (e.Line)
        'Bad hex escape sequence \\x' <First2 e.Line>
      >;
}

Hex {
  s.Digit, <Type s.Digit> : 'D' e.1 = <Numb s.Digit>;

  s.Hex
    , <Upper s.Hex> : s.UHex
    , ('A' 10) ('B' 11) ('C' 12) ('D' 13) ('E' 14) ('F' 15)
    : e.Hex-B (s.UHex s.Value) e.Hex-E
    = s.Value;

  s.Other = /* пусто */;
}

First2 {
  s.1 s.2 e.Line = s.1 s.2;
  e.Line = e.Line;
}


/**
  <LoadExpr e.FileName> == e.Expr
*/
$ENTRY LoadExpr {
  e.FileName
    , <TryLoadExpr e.FileName>
    : {
        Success e.Expr = e.Expr;

        Fails (s.Line s.Col) e.Message
          = <Putout
              0 e.FileName ':' <Symb s.Line> ':' <Symb s.Col> ':' e.Message
            >
            <Exit 1>;
      };
}
/* Для построения .froms:
//FROM Library
*/
